import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  require_bn,
  require_browser,
  require_call_bind,
  require_call_bound,
  require_define_data_property,
  require_end_of_stream,
  require_es_object_atoms,
  require_get_intrinsic,
  require_has_property_descriptors,
  require_inherits_browser,
  require_js,
  require_pipeline,
  require_readable_browser,
  require_safe_buffer,
  require_sha,
  require_shams,
  require_stream_duplex,
  require_stream_passthrough,
  require_stream_readable,
  require_stream_transform,
  require_stream_writable,
  require_string_decoder,
  require_util
} from "./chunk-AHMQEAZ4.js";
import {
  require_events
} from "./chunk-J6HHMDDN.js";
import {
  AxiosError,
  axios_default
} from "./chunk-UMMEOQIZ.js";
import {
  Buffer$1,
  dist_exports,
  init_dist
} from "./chunk-2M7KVDMH.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-I22A42VH.js";

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function(message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module2.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/rlp/dist.browser/index.js
var require_dist4 = __commonJS({
  "node_modules/rlp/dist.browser/index.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLength = exports2.decode = exports2.encode = void 0;
    var bn_js_1 = __importDefault(require_bn());
    function encode3(input) {
      if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
          output.push(encode3(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
      } else {
        var inputBuf = toBuffer2(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
    }
    exports2.encode = encode3;
    function safeParseInt(v, base) {
      if (v[0] === "0" && v[1] === "0") {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseInt(v, base);
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Buffer.from([len + offset]);
      } else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, "hex");
      }
    }
    function decode2(input, stream) {
      if (stream === void 0) {
        stream = false;
      }
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var decoded = _decode(inputBuffer);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid remainder");
      }
      return decoded.data;
    }
    exports2.decode = decode2;
    function getLength(input) {
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 127) {
        return inputBuffer.length;
      } else if (firstByte <= 183) {
        return firstByte - 127;
      } else if (firstByte <= 191) {
        return firstByte - 182;
      } else if (firstByte <= 247) {
        return firstByte - 191;
      } else {
        var llength = firstByte - 246;
        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
        return llength + length_1;
      }
    }
    exports2.getLength = getLength;
    function _decode(input) {
      var length, llength, data, innerRemainder, d;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Buffer.from([]);
        } else {
          data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid rlp encoding: byte must be less 0x80");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
          throw new Error("invalid RLP: not enough bytes for string");
        }
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid rlp: total length is larger than the data");
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
          throw new Error("invalid rlp, List has a invalid length");
        }
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    function isHexPrefixed(str) {
      return str.slice(0, 2) === "0x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function intToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? "0" + a : a;
    }
    function intToBuffer(integer) {
      var hex = intToHex(integer);
      return Buffer.from(hex, "hex");
    }
    function toBuffer2(v) {
      if (!Buffer.isBuffer(v)) {
        if (typeof v === "string") {
          if (isHexPrefixed(v)) {
            return Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            return Buffer.from(v);
          }
        } else if (typeof v === "number" || typeof v === "bigint") {
          if (!v) {
            return Buffer.from([]);
          } else {
            return intToBuffer(v);
          }
        } else if (v === null || v === void 0) {
          return Buffer.from([]);
        } else if (v instanceof Uint8Array) {
          return Buffer.from(v);
        } else if (bn_js_1.default.isBN(v)) {
          return Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
  }
});

// node_modules/ethereumjs-util/dist.browser/externals.js
var require_externals = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/externals.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rlp = exports2.BN = void 0;
    var bn_js_1 = __importDefault(require_bn());
    exports2.BN = bn_js_1.default;
    var rlp = __importStar(require_dist4());
    exports2.rlp = rlp;
  }
});

// node_modules/ethereumjs-util/dist.browser/constants.js
var require_constants = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/constants.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KECCAK256_RLP = exports2.KECCAK256_RLP_S = exports2.KECCAK256_RLP_ARRAY = exports2.KECCAK256_RLP_ARRAY_S = exports2.KECCAK256_NULL = exports2.KECCAK256_NULL_S = exports2.TWO_POW256 = exports2.MAX_INTEGER = exports2.MAX_UINT64 = void 0;
    var buffer_1 = (init_dist(), __toCommonJS(dist_exports));
    var externals_1 = require_externals();
    exports2.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
    exports2.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports2.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports2.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports2.KECCAK256_NULL = buffer_1.Buffer.from(exports2.KECCAK256_NULL_S, "hex");
    exports2.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports2.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports2.KECCAK256_RLP_ARRAY_S, "hex");
    exports2.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports2.KECCAK256_RLP = buffer_1.Buffer.from(exports2.KECCAK256_RLP_S, "hex");
  }
});

// node_modules/assert/build/internal/errors.js
var require_errors = __commonJS({
  "node_modules/assert/build/internal/errors.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var codes = {};
    var assert;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits(NodeError2, _Base);
        var _super = _createSuper(NodeError2);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _super.call(this, getMessage(arg1, arg2, arg3));
          _this.code = code;
          return _this;
        }
        return _createClass(NodeError2);
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert === void 0) assert = require_assert();
      assert(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0) util = require_util();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type;
      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert === void 0) assert = require_assert();
      assert(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module2.exports.codes = codes;
  }
});

// node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "node_modules/assert/build/internal/assert/assertion_error.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function ownKeys(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t), true).forEach(function(r3) {
          _defineProperty(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2)) return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2) _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var _require = require_util();
    var inspect = _require.inspect;
    var _require2 = require_errors();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0) return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error, _inspect$custom) {
      _inherits(AssertionError2, _Error);
      var _super = _createSuper(AssertionError2);
      function AssertionError2(options) {
        var _this;
        _classCallCheck(this, AssertionError2);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _super.call(this, String(message));
        } else {
          if (process.stderr && process.stderr.isTTY) {
            if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _super.call(this, createErrDiff(actual, expected, operator));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _super.call(this, "".concat(base, " ").concat(res[0]));
            } else {
              _this = _super.call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n"));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _super.call(this, "".concat(_res).concat(other));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: _inspect$custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error), inspect.custom);
    module2.exports = AssertionError;
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject2 = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject2 && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject2 && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/object.assign/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object.assign/implementation.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_call_bound();
    var $Object = require_es_object_atoms();
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? $Object.getOwnPropertySymbols : null;
    module2.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = $Object(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = $Object(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && ($Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i = 0; i < keys.length; ++i) {
          var nextKey = keys[i];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object.assign/polyfill.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var implementation = require_implementation2();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i = 0; i < letters.length; ++i) {
        map[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module2.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// node_modules/object-is/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object-is/implementation.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/object-is/polyfill.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var implementation = require_implementation3();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat2 = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat2.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var getPolyfill = require_polyfill2();
    var define2 = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill2();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/is-nan/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/is-nan/implementation.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = function isNaN(value) {
      return value !== value;
    };
  }
});

// node_modules/is-nan/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/is-nan/polyfill.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var implementation = require_implementation4();
    module2.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "node_modules/is-nan/shim.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill3();
    module2.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define2(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/is-nan/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var callBind = require_call_bind();
    var define2 = require_define_properties();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill3();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "node_modules/assert/build/internal/util/comparisons.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array = [];
      set.forEach(function(value) {
        return array.push(value);
      });
      return array;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array = [];
      map.forEach(function(value, key) {
        return array.push([key, value]);
      });
      return array;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10) return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b, strict, memo) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b.has(val)) {
          if (strict) return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo)) return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b.get(key);
          if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict) return false;
            if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(_key) === "object" && _key !== null) {
            if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
          } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys.length; i++) {
        var _key2 = keys[i];
        if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module2.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// node_modules/assert/build/assert.js
var require_assert = __commonJS({
  "node_modules/assert/build/assert.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var _require$types = require_util().types;
    var isPromise = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = require_polyfill()();
    var objectIs = require_polyfill2()();
    var RegExpPrototypeTest = require_callBound()("RegExp.prototype.test");
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert = module2.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error) throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
      }
      if (message instanceof Error) throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert.fail = fail;
    assert.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert.ok = ok;
    assert.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = _createClass(function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    });
    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new AssertionError({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0) lazyLoadComparison();
        keys.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL) return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function internalMatch(string, regexp, message, fn, fnName) {
      if (!isRegExp(regexp)) {
        throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
      }
      var match = fnName === "match";
      if (typeof string !== "string" || RegExpPrototypeTest(regexp, string) !== match) {
        if (message instanceof Error) {
          throw message;
        }
        var generatedMessage = !message;
        message = message || (typeof string !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
        var err = new AssertionError({
          actual: string,
          expected: regexp,
          message,
          operator: fnName,
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    assert.match = function match(string, regexp, message) {
      internalMatch(string, regexp, message, match, "match");
    };
    assert.doesNotMatch = function doesNotMatch(string, regexp, message) {
      internalMatch(string, regexp, message, doesNotMatch, "doesNotMatch");
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert.strict = objectAssign(strict, assert, {
      equal: assert.strictEqual,
      deepEqual: assert.deepStrictEqual,
      notEqual: assert.notStrictEqual,
      notDeepEqual: assert.notDeepStrictEqual
    });
    assert.strict.strict = assert.strict;
  }
});

// node_modules/secp256k1/lib/index.js
var require_lib = __commonJS({
  "node_modules/secp256k1/lib/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert(cond, msg) {
      if (!cond) throw new Error(msg);
    }
    function isUint8Array(name, value, length) {
      assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function") output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module2.exports = (secp256k1) => {
      return {
        contextRandomize(seed) {
          assert(
            seed === null || seed instanceof Uint8Array,
            "Expected seed to be an Uint8Array or null"
          );
          if (seed !== null) isUint8Array("seed", seed, 32);
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0) assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert(
            toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
            "Expected recovery id to be a Number within interval [0, 3]"
          );
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0) isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0) isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/elliptic/package.json"(exports2, module2) {
    module2.exports = {
      name: "elliptic",
      version: "6.6.1",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/elliptic/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/elliptic/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r2, msg) {
      if (l != r2)
        throw new Error(msg || "Assertion failed: " + l + " != " + r2);
    };
  }
});

// node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils = __commonJS({
  "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = exports2;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex2(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex2;
    utils.encode = function encode3(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  }
});

// node_modules/elliptic/lib/elliptic/utils.js
var require_utils2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/utils.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = exports2;
    var BN3 = require_bn2();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i;
      for (i = 0; i < naf.length; i += 1) {
        naf[i] = 0;
      }
      var ws = 1 << w + 1;
      var k = num.clone();
      for (i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN3(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/randombytes/browser.js
var require_browser2 = __commonJS({
  "node_modules/randombytes/browser.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto = global.crypto || global.msCrypto;
    if (crypto && crypto.getRandomValues) {
      module2.exports = randomBytes;
    } else {
      module2.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
      var bytes = Buffer2.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/md5.js/node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/md5.js/node_modules/hash-base/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_readable_browser().Transform;
    var inherits = require_inherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module2.exports = HashBase;
  }
});

// node_modules/md5.js/index.js
var require_md5 = __commonJS({
  "node_modules/md5.js/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }
    module2.exports = MD5;
  }
});

// node_modules/ripemd160/node_modules/hash-base/index.js
var require_hash_base2 = __commonJS({
  "node_modules/ripemd160/node_modules/hash-base/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_readable_browser().Transform;
    var inherits = require_inherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module2.exports = HashBase;
  }
});

// node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/ripemd160/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base2();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module2.exports = RIPEMD160;
  }
});

// node_modules/stream-browserify/index.js
var require_stream_browserify = __commonJS({
  "node_modules/stream-browserify/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = Stream;
    var EE = require_events().EventEmitter;
    var inherits = require_inherits_browser();
    inherits(Stream, EE);
    Stream.Readable = require_stream_readable();
    Stream.Writable = require_stream_writable();
    Stream.Duplex = require_stream_duplex();
    Stream.Transform = require_stream_transform();
    Stream.PassThrough = require_stream_passthrough();
    Stream.finished = require_end_of_stream();
    Stream.pipeline = require_pipeline();
    Stream.Stream = Stream;
    function Stream() {
      EE.call(this);
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this;
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
      }
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) {
          throw er;
        }
      }
      source.on("error", onerror);
      dest.on("error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
  }
});

// node_modules/cipher-base/index.js
var require_cipher_base = __commonJS({
  "node_modules/cipher-base/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_stream_browserify().Transform;
    var StringDecoder = require_string_decoder().StringDecoder;
    var inherits = require_inherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this["final"] = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits(CipherBase, Transform);
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer2.prototype instanceof Uint8Array || Buffer2.TYPED_ARRAY_SUPPORT);
    function toBuffer2(data, encoding) {
      if (data instanceof Buffer2) {
        return data;
      }
      if (typeof data === "string") {
        return Buffer2.from(data, encoding);
      }
      if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) {
          return Buffer2.alloc(0);
        }
        var res = Buffer2.from(data.buffer, data.byteOffset, data.byteLength);
        if (res.byteLength === data.byteLength) {
          return res;
        }
      }
      if (useUint8Array && data instanceof Uint8Array) {
        return Buffer2.from(data);
      }
      if (Buffer2.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
        return Buffer2.from(data);
      }
      throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
    }
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      var bufferData = toBuffer2(data, inputEnc);
      var outData = this._update(bufferData);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error("can’t switch encodings");
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    module2.exports = CipherBase;
  }
});

// node_modules/create-hash/browser.js
var require_browser3 = __commonJS({
  "node_modules/create-hash/browser.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var MD5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var Base = require_cipher_base();
    function Hash(hash2) {
      Base.call(this, "digest");
      this._hash = hash2;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module2.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") return new MD5();
      if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }
});

// node_modules/create-hmac/legacy.js
var require_legacy = __commonJS({
  "node_modules/create-hmac/legacy.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var Buffer2 = require_safe_buffer().Buffer;
    var Base = require_cipher_base();
    var ZEROS = Buffer2.alloc(128);
    var blocksize = 64;
    function Hmac(alg, key) {
      Base.call(this, "digest");
      if (typeof key === "string") {
        key = Buffer2.from(key);
      }
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        key = alg(key);
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      this._hash = [ipad];
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.push(data);
    };
    Hmac.prototype._final = function() {
      var h = this._alg(Buffer2.concat(this._hash));
      return this._alg(Buffer2.concat([this._opad, h]));
    };
    module2.exports = Hmac;
  }
});

// node_modules/create-hash/md5.js
var require_md52 = __commonJS({
  "node_modules/create-hash/md5.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var MD5 = require_md5();
    module2.exports = function(buffer) {
      return new MD5().update(buffer).digest();
    };
  }
});

// node_modules/create-hmac/browser.js
var require_browser4 = __commonJS({
  "node_modules/create-hmac/browser.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var Legacy = require_legacy();
    var Base = require_cipher_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var md5 = require_md52();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var ZEROS = Buffer2.alloc(128);
    function Hmac(alg, key) {
      Base.call(this, "digest");
      if (typeof key === "string") {
        key = Buffer2.from(key);
      }
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      this._alg = alg;
      this._key = key;
      if (key.length > blocksize) {
        var hash2 = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash2.update(key).digest();
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
      var opad = this._opad = Buffer2.allocUnsafe(blocksize);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
      this._hash.update(ipad);
    }
    inherits(Hmac, Base);
    Hmac.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hmac.prototype._final = function() {
      var h = this._hash.digest();
      var hash2 = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
      return hash2.update(this._opad).update(h).digest();
    };
    module2.exports = function createHmac(alg, key) {
      alg = alg.toLowerCase();
      if (alg === "rmd160" || alg === "ripemd160") {
        return new Hmac("rmd160", key);
      }
      if (alg === "md5") {
        return new Legacy(md5, key);
      }
      return new Hmac(alg, key);
    };
  }
});

// node_modules/browserify-sign/browser/algorithms.json
var require_algorithms = __commonJS({
  "node_modules/browserify-sign/browser/algorithms.json"(exports2, module2) {
    module2.exports = {
      sha224WithRSAEncryption: {
        sign: "rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        sign: "ecdsa/rsa",
        hash: "sha224",
        id: "302d300d06096086480165030402040500041c"
      },
      sha256WithRSAEncryption: {
        sign: "rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        sign: "ecdsa/rsa",
        hash: "sha256",
        id: "3031300d060960864801650304020105000420"
      },
      sha384WithRSAEncryption: {
        sign: "rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        sign: "ecdsa/rsa",
        hash: "sha384",
        id: "3041300d060960864801650304020205000430"
      },
      sha512WithRSAEncryption: {
        sign: "rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        sign: "ecdsa/rsa",
        hash: "sha512",
        id: "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        sign: "rsa",
        hash: "sha1",
        id: "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        sign: "ecdsa",
        hash: "sha1",
        id: ""
      },
      sha256: {
        sign: "ecdsa",
        hash: "sha256",
        id: ""
      },
      sha224: {
        sign: "ecdsa",
        hash: "sha224",
        id: ""
      },
      sha384: {
        sign: "ecdsa",
        hash: "sha384",
        id: ""
      },
      sha512: {
        sign: "ecdsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-SHA1": {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      DSA: {
        sign: "dsa",
        hash: "sha1",
        id: ""
      },
      "DSA-WITH-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-SHA224": {
        sign: "dsa",
        hash: "sha224",
        id: ""
      },
      "DSA-WITH-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-SHA256": {
        sign: "dsa",
        hash: "sha256",
        id: ""
      },
      "DSA-WITH-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-SHA384": {
        sign: "dsa",
        hash: "sha384",
        id: ""
      },
      "DSA-WITH-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-SHA512": {
        sign: "dsa",
        hash: "sha512",
        id: ""
      },
      "DSA-RIPEMD160": {
        sign: "dsa",
        hash: "rmd160",
        id: ""
      },
      ripemd160WithRSA: {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        sign: "rsa",
        hash: "rmd160",
        id: "3021300906052b2403020105000414"
      },
      md5WithRSAEncryption: {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        sign: "rsa",
        hash: "md5",
        id: "3020300c06082a864886f70d020505000410"
      }
    };
  }
});

// node_modules/browserify-sign/algos.js
var require_algos = __commonJS({
  "node_modules/browserify-sign/algos.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = require_algorithms();
  }
});

// node_modules/pbkdf2/lib/precondition.js
var require_precondition = __commonJS({
  "node_modules/pbkdf2/lib/precondition.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var MAX_ALLOC = Math.pow(2, 30) - 1;
    module2.exports = function(iterations, keylen) {
      if (typeof iterations !== "number") {
        throw new TypeError("Iterations not a number");
      }
      if (iterations < 0) {
        throw new TypeError("Bad iterations");
      }
      if (typeof keylen !== "number") {
        throw new TypeError("Key length not a number");
      }
      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
        throw new TypeError("Bad key length");
      }
    };
  }
});

// node_modules/pbkdf2/lib/default-encoding.js
var require_default_encoding = __commonJS({
  "node_modules/pbkdf2/lib/default-encoding.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var defaultEncoding;
    if (global.process && global.process.browser) {
      defaultEncoding = "utf-8";
    } else if (global.process && global.process.version) {
      pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
      defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
    } else {
      defaultEncoding = "utf-8";
    }
    var pVersionMajor;
    module2.exports = defaultEncoding;
  }
});

// node_modules/pbkdf2/lib/to-buffer.js
var require_to_buffer = __commonJS({
  "node_modules/pbkdf2/lib/to-buffer.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function(thing, encoding, name) {
      if (Buffer2.isBuffer(thing)) {
        return thing;
      } else if (typeof thing === "string") {
        return Buffer2.from(thing, encoding);
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer2.from(thing.buffer);
      } else {
        throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
      }
    };
  }
});

// node_modules/pbkdf2/lib/sync-browser.js
var require_sync_browser = __commonJS({
  "node_modules/pbkdf2/lib/sync-browser.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var md5 = require_md52();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var toBuffer2 = require_to_buffer();
    var ZEROS = Buffer2.alloc(128);
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    };
    function Hmac(alg, key, saltLen) {
      var hash2 = getDigest(alg);
      var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
      if (key.length > blocksize) {
        key = hash2(key);
      } else if (key.length < blocksize) {
        key = Buffer2.concat([key, ZEROS], blocksize);
      }
      var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
      }
      var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
      ipad.copy(ipad1, 0, 0, blocksize);
      this.ipad1 = ipad1;
      this.ipad2 = ipad;
      this.opad = opad;
      this.alg = alg;
      this.blocksize = blocksize;
      this.hash = hash2;
      this.size = sizes[alg];
    }
    Hmac.prototype.run = function(data, ipad) {
      data.copy(ipad, this.blocksize);
      var h = this.hash(ipad);
      h.copy(this.opad, this.blocksize);
      return this.hash(this.opad);
    };
    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest();
      }
      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
      }
      if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
      if (alg === "md5") return md5;
      return shaFunc;
    }
    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      digest = digest || "sha1";
      var hmac = new Hmac(digest, password, salt.length);
      var DK = Buffer2.allocUnsafe(keylen);
      var block1 = Buffer2.allocUnsafe(salt.length + 4);
      salt.copy(block1, 0, 0, salt.length);
      var destPos = 0;
      var hLen = sizes[digest];
      var l = Math.ceil(keylen / hLen);
      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2);
          for (var k = 0; k < hLen; k++) T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
      }
      return DK;
    }
    module2.exports = pbkdf2;
  }
});

// node_modules/pbkdf2/lib/async.js
var require_async = __commonJS({
  "node_modules/pbkdf2/lib/async.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var checkParameters = require_precondition();
    var defaultEncoding = require_default_encoding();
    var sync = require_sync_browser();
    var toBuffer2 = require_to_buffer();
    var ZERO_BUF;
    var subtle = global.crypto && global.crypto.subtle;
    var toBrowser = {
      sha: "SHA-1",
      "sha-1": "SHA-1",
      sha1: "SHA-1",
      sha256: "SHA-256",
      "sha-256": "SHA-256",
      sha384: "SHA-384",
      "sha-384": "SHA-384",
      "sha-512": "SHA-512",
      sha512: "SHA-512"
    };
    var checks = [];
    function checkNative(algo) {
      if (global.process && !global.process.browser) {
        return Promise.resolve(false);
      }
      if (!subtle || !subtle.importKey || !subtle.deriveBits) {
        return Promise.resolve(false);
      }
      if (checks[algo] !== void 0) {
        return checks[algo];
      }
      ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
      var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
      }).catch(function() {
        return false;
      });
      checks[algo] = prom;
      return prom;
    }
    var nextTick;
    function getNextTick() {
      if (nextTick) {
        return nextTick;
      }
      if (global.process && global.process.nextTick) {
        nextTick = global.process.nextTick;
      } else if (global.queueMicrotask) {
        nextTick = global.queueMicrotask;
      } else if (global.setImmediate) {
        nextTick = global.setImmediate;
      } else {
        nextTick = global.setTimeout;
      }
      return nextTick;
    }
    function browserPbkdf2(password, salt, iterations, length, algo) {
      return subtle.importKey(
        "raw",
        password,
        { name: "PBKDF2" },
        false,
        ["deriveBits"]
      ).then(function(key) {
        return subtle.deriveBits({
          name: "PBKDF2",
          salt,
          iterations,
          hash: {
            name: algo
          }
        }, key, length << 3);
      }).then(function(res) {
        return Buffer2.from(res);
      });
    }
    function resolvePromise(promise, callback) {
      promise.then(function(out) {
        getNextTick()(function() {
          callback(null, out);
        });
      }, function(e) {
        getNextTick()(function() {
          callback(e);
        });
      });
    }
    module2.exports = function(password, salt, iterations, keylen, digest, callback) {
      if (typeof digest === "function") {
        callback = digest;
        digest = void 0;
      }
      digest = digest || "sha1";
      var algo = toBrowser[digest.toLowerCase()];
      if (!algo || typeof global.Promise !== "function") {
        getNextTick()(function() {
          var out;
          try {
            out = sync(password, salt, iterations, keylen, digest);
          } catch (e) {
            return callback(e);
          }
          callback(null, out);
        });
        return;
      }
      checkParameters(iterations, keylen);
      password = toBuffer2(password, defaultEncoding, "Password");
      salt = toBuffer2(salt, defaultEncoding, "Salt");
      if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
      resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
      }), callback);
    };
  }
});

// node_modules/pbkdf2/browser.js
var require_browser5 = __commonJS({
  "node_modules/pbkdf2/browser.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.pbkdf2 = require_async();
    exports2.pbkdf2Sync = require_sync_browser();
  }
});

// node_modules/des.js/lib/des/utils.js
var require_utils3 = __commonJS({
  "node_modules/des.js/lib/des/utils.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
      return res >>> 0;
    };
    exports2.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = value >>> 16 & 255;
      bytes[2 + off] = value >>> 8 & 255;
      bytes[3 + off] = value & 255;
    };
    exports2.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports2.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= inR >>> j + i & 1;
          outL <<= 1;
          outL |= inL >>> j + i & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= inR >>> j + i & 1;
          outR <<= 1;
          outR |= inL >>> j + i & 1;
        }
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports2.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= inR >> j + i & 1;
      }
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inR >> j + i & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= inL >> j + i & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= inL >> j + i & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports2.r28shl = function r28shl(num, shift) {
      return num << shift & 268435455 | num >>> 28 - shift;
    };
    var pc2table = [
      // inL => outL
      14,
      11,
      17,
      4,
      27,
      23,
      25,
      0,
      13,
      22,
      7,
      18,
      5,
      9,
      16,
      24,
      2,
      20,
      12,
      21,
      1,
      8,
      15,
      26,
      // inR => outR
      15,
      4,
      25,
      19,
      9,
      1,
      26,
      16,
      5,
      11,
      23,
      8,
      12,
      7,
      17,
      0,
      22,
      3,
      10,
      14,
      6,
      20,
      27,
      24
    ];
    exports2.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;
      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
      }
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    exports2.expand = function expand(r2, out, off) {
      var outL = 0;
      var outR = 0;
      outL = (r2 & 1) << 5 | r2 >>> 27;
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= r2 >>> i & 63;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= r2 >>> i & 63;
        outR <<= 6;
      }
      outR |= (r2 & 31) << 1 | r2 >>> 31;
      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };
    var sTable = [
      14,
      0,
      4,
      15,
      13,
      7,
      1,
      4,
      2,
      14,
      15,
      2,
      11,
      13,
      8,
      1,
      3,
      10,
      10,
      6,
      6,
      12,
      12,
      11,
      5,
      9,
      9,
      5,
      0,
      3,
      7,
      8,
      4,
      15,
      1,
      12,
      14,
      8,
      8,
      2,
      13,
      4,
      6,
      9,
      2,
      1,
      11,
      7,
      15,
      5,
      12,
      11,
      9,
      3,
      7,
      14,
      3,
      10,
      10,
      0,
      5,
      6,
      0,
      13,
      15,
      3,
      1,
      13,
      8,
      4,
      14,
      7,
      6,
      15,
      11,
      2,
      3,
      8,
      4,
      14,
      9,
      12,
      7,
      0,
      2,
      1,
      13,
      10,
      12,
      6,
      0,
      9,
      5,
      11,
      10,
      5,
      0,
      13,
      14,
      8,
      7,
      10,
      11,
      1,
      10,
      3,
      4,
      15,
      13,
      4,
      1,
      2,
      5,
      11,
      8,
      6,
      12,
      7,
      6,
      12,
      9,
      0,
      3,
      5,
      2,
      14,
      15,
      9,
      10,
      13,
      0,
      7,
      9,
      0,
      14,
      9,
      6,
      3,
      3,
      4,
      15,
      6,
      5,
      10,
      1,
      2,
      13,
      8,
      12,
      5,
      7,
      14,
      11,
      12,
      4,
      11,
      2,
      15,
      8,
      1,
      13,
      1,
      6,
      10,
      4,
      13,
      9,
      0,
      8,
      6,
      15,
      9,
      3,
      8,
      0,
      7,
      11,
      4,
      1,
      15,
      2,
      14,
      12,
      3,
      5,
      11,
      10,
      5,
      14,
      2,
      7,
      12,
      7,
      13,
      13,
      8,
      14,
      11,
      3,
      5,
      0,
      6,
      6,
      15,
      9,
      0,
      10,
      3,
      1,
      4,
      2,
      7,
      8,
      2,
      5,
      12,
      11,
      1,
      12,
      10,
      4,
      14,
      15,
      9,
      10,
      3,
      6,
      15,
      9,
      0,
      0,
      6,
      12,
      10,
      11,
      1,
      7,
      13,
      13,
      8,
      15,
      9,
      1,
      4,
      3,
      5,
      14,
      11,
      5,
      12,
      2,
      7,
      8,
      2,
      4,
      14,
      2,
      14,
      12,
      11,
      4,
      2,
      1,
      12,
      7,
      4,
      10,
      7,
      11,
      13,
      6,
      1,
      8,
      5,
      5,
      0,
      3,
      15,
      15,
      10,
      13,
      3,
      0,
      9,
      14,
      8,
      9,
      6,
      4,
      11,
      2,
      8,
      1,
      12,
      11,
      7,
      10,
      1,
      13,
      14,
      7,
      2,
      8,
      13,
      15,
      6,
      9,
      15,
      12,
      0,
      5,
      9,
      6,
      10,
      3,
      4,
      0,
      5,
      14,
      3,
      12,
      10,
      1,
      15,
      10,
      4,
      15,
      2,
      9,
      7,
      2,
      12,
      6,
      9,
      8,
      5,
      0,
      6,
      13,
      1,
      3,
      13,
      4,
      14,
      14,
      0,
      7,
      11,
      5,
      3,
      11,
      8,
      9,
      4,
      14,
      3,
      15,
      2,
      5,
      12,
      2,
      9,
      8,
      5,
      12,
      15,
      3,
      10,
      7,
      11,
      0,
      14,
      4,
      1,
      10,
      7,
      1,
      6,
      13,
      0,
      11,
      8,
      6,
      13,
      4,
      13,
      11,
      0,
      2,
      11,
      14,
      7,
      15,
      4,
      0,
      9,
      8,
      1,
      13,
      10,
      3,
      14,
      12,
      3,
      9,
      5,
      7,
      12,
      5,
      2,
      10,
      15,
      6,
      8,
      1,
      6,
      1,
      6,
      4,
      11,
      11,
      13,
      13,
      8,
      12,
      1,
      3,
      4,
      7,
      10,
      14,
      7,
      10,
      9,
      15,
      5,
      6,
      0,
      8,
      15,
      0,
      14,
      5,
      2,
      9,
      3,
      2,
      12,
      13,
      1,
      2,
      15,
      8,
      13,
      4,
      8,
      6,
      10,
      15,
      3,
      11,
      7,
      1,
      4,
      10,
      12,
      9,
      5,
      3,
      6,
      14,
      11,
      5,
      0,
      0,
      14,
      12,
      9,
      7,
      2,
      7,
      2,
      11,
      1,
      4,
      14,
      1,
      7,
      9,
      4,
      12,
      10,
      14,
      8,
      2,
      13,
      0,
      15,
      6,
      12,
      10,
      9,
      13,
      0,
      15,
      3,
      3,
      5,
      5,
      6,
      8,
      11
    ];
    exports2.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = inL >>> 18 - i * 6 & 63;
        var sb = sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = inR >>> 18 - i * 6 & 63;
        var sb = sTable[4 * 64 + i * 64 + b];
        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };
    var permuteTable = [
      16,
      25,
      12,
      11,
      3,
      20,
      4,
      15,
      31,
      17,
      9,
      6,
      27,
      14,
      1,
      22,
      30,
      24,
      8,
      18,
      0,
      5,
      29,
      23,
      13,
      19,
      2,
      26,
      10,
      21,
      28,
      7
    ];
    exports2.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
      }
      return out >>> 0;
    };
    exports2.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = "0" + str;
      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(" ");
    };
  }
});

// node_modules/des.js/lib/des/cipher.js
var require_cipher = __commonJS({
  "node_modules/des.js/lib/des/cipher.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var assert = require_minimalistic_assert();
    function Cipher(options) {
      this.options = options;
      this.type = this.options.type;
      this.blockSize = 8;
      this._init();
      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
      this.padding = options.padding !== false;
    }
    module2.exports = Cipher;
    Cipher.prototype._init = function _init() {
    };
    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];
      if (this.type === "decrypt")
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };
    Cipher.prototype._buffer = function _buffer(data, off) {
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;
      return min;
    };
    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };
    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = (this.bufferOff + data.length) / this.blockSize | 0;
      var out = new Array(count * this.blockSize);
      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }
      var max = data.length - (data.length - inputOff) % this.blockSize;
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];
      return out;
    };
    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;
      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }
      inputOff += this._buffer(data, inputOff);
      return out;
    };
    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);
      var last;
      if (this.type === "encrypt")
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();
      if (first)
        return first.concat(last);
      else
        return last;
    };
    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;
      while (off < buffer.length)
        buffer[off++] = 0;
      return true;
    };
    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };
    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };
    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);
      return this._unpad(out);
    };
  }
});

// node_modules/des.js/lib/des/des.js
var require_des = __commonJS({
  "node_modules/des.js/lib/des/des.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    var utils = require_utils3();
    var Cipher = require_cipher();
    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }
    function DES(options) {
      Cipher.call(this, options);
      var state = new DESState();
      this._desState = state;
      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module2.exports = DES;
    DES.create = function create(options) {
      return new DES(options);
    };
    var shiftTable = [
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      1
    ];
    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);
      assert.equal(key.length, this.blockSize, "Invalid key length");
      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);
      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };
    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;
      var l = utils.readUInt32BE(inp, inOff);
      var r2 = utils.readUInt32BE(inp, inOff + 4);
      utils.ip(l, r2, state.tmp, 0);
      l = state.tmp[0];
      r2 = state.tmp[1];
      if (this.type === "encrypt")
        this._encrypt(state, l, r2, state.tmp, 0);
      else
        this._decrypt(state, l, r2, state.tmp, 0);
      l = state.tmp[0];
      r2 = state.tmp[1];
      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r2, outOff + 4);
    };
    DES.prototype._pad = function _pad(buffer, off) {
      if (this.padding === false) {
        return false;
      }
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;
      return true;
    };
    DES.prototype._unpad = function _unpad(buffer) {
      if (this.padding === false) {
        return buffer;
      }
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        assert.equal(buffer[i], pad);
      return buffer.slice(0, buffer.length - pad);
    };
    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r2 = rStart;
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(r2, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r2;
        r2 = (l ^ f) >>> 0;
        l = t;
      }
      utils.rip(r2, l, out, off);
    };
    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r2 = lStart;
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r2 ^ f) >>> 0;
        r2 = t;
      }
      utils.rip(l, r2, out, off);
    };
  }
});

// node_modules/des.js/lib/des/cbc.js
var require_cbc = __commonJS({
  "node_modules/des.js/lib/des/cbc.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    var proto = {};
    function CBCState(iv) {
      assert.equal(iv.length, 8, "Invalid IV length");
      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }
    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);
      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }
      CBC.create = function create(options) {
        return new CBC(options);
      };
      return CBC;
    }
    exports2.instantiate = instantiate;
    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };
    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;
      var iv = state.iv;
      if (this.type === "encrypt") {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];
        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };
  }
});

// node_modules/des.js/lib/des/ede.js
var require_ede = __commonJS({
  "node_modules/des.js/lib/des/ede.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    var Cipher = require_cipher();
    var DES = require_des();
    function EDEState(type, key) {
      assert.equal(key.length, 24, "Invalid key length");
      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);
      if (type === "encrypt") {
        this.ciphers = [
          DES.create({ type: "encrypt", key: k1 }),
          DES.create({ type: "decrypt", key: k2 }),
          DES.create({ type: "encrypt", key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: "decrypt", key: k3 }),
          DES.create({ type: "encrypt", key: k2 }),
          DES.create({ type: "decrypt", key: k1 })
        ];
      }
    }
    function EDE(options) {
      Cipher.call(this, options);
      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);
    module2.exports = EDE;
    EDE.create = function create(options) {
      return new EDE(options);
    };
    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;
      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };
    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;
  }
});

// node_modules/des.js/lib/des.js
var require_des2 = __commonJS({
  "node_modules/des.js/lib/des.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.utils = require_utils3();
    exports2.Cipher = require_cipher();
    exports2.DES = require_des();
    exports2.CBC = require_cbc();
    exports2.EDE = require_ede();
  }
});

// node_modules/browserify-des/index.js
var require_browserify_des = __commonJS({
  "node_modules/browserify-des/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var CipherBase = require_cipher_base();
    var des = require_des2();
    var inherits = require_inherits_browser();
    var Buffer2 = require_safe_buffer().Buffer;
    var modes = {
      "des-ede3-cbc": des.CBC.instantiate(des.EDE),
      "des-ede3": des.EDE,
      "des-ede-cbc": des.CBC.instantiate(des.EDE),
      "des-ede": des.EDE,
      "des-cbc": des.CBC.instantiate(des.DES),
      "des-ecb": des.DES
    };
    modes.des = modes["des-cbc"];
    modes.des3 = modes["des-ede3-cbc"];
    module2.exports = DES;
    inherits(DES, CipherBase);
    function DES(opts) {
      CipherBase.call(this);
      var modeName = opts.mode.toLowerCase();
      var mode = modes[modeName];
      var type;
      if (opts.decrypt) {
        type = "decrypt";
      } else {
        type = "encrypt";
      }
      var key = opts.key;
      if (!Buffer2.isBuffer(key)) {
        key = Buffer2.from(key);
      }
      if (modeName === "des-ede" || modeName === "des-ede-cbc") {
        key = Buffer2.concat([key, key.slice(0, 8)]);
      }
      var iv = opts.iv;
      if (!Buffer2.isBuffer(iv)) {
        iv = Buffer2.from(iv);
      }
      this._des = mode.create({
        key,
        iv,
        type
      });
    }
    DES.prototype._update = function(data) {
      return Buffer2.from(this._des.update(data));
    };
    DES.prototype._final = function() {
      return Buffer2.from(this._des.final());
    };
  }
});

// node_modules/browserify-aes/modes/ecb.js
var require_ecb = __commonJS({
  "node_modules/browserify-aes/modes/ecb.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.encrypt = function(self2, block) {
      return self2._cipher.encryptBlock(block);
    };
    exports2.decrypt = function(self2, block) {
      return self2._cipher.decryptBlock(block);
    };
  }
});

// node_modules/buffer-xor/index.js
var require_buffer_xor = __commonJS({
  "node_modules/buffer-xor/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = function xor(a, b) {
      var length = Math.min(a.length, b.length);
      var buffer = new Buffer(length);
      for (var i = 0; i < length; ++i) {
        buffer[i] = a[i] ^ b[i];
      }
      return buffer;
    };
  }
});

// node_modules/browserify-aes/modes/cbc.js
var require_cbc2 = __commonJS({
  "node_modules/browserify-aes/modes/cbc.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var xor = require_buffer_xor();
    exports2.encrypt = function(self2, block) {
      var data = xor(block, self2._prev);
      self2._prev = self2._cipher.encryptBlock(data);
      return self2._prev;
    };
    exports2.decrypt = function(self2, block) {
      var pad = self2._prev;
      self2._prev = block;
      var out = self2._cipher.decryptBlock(block);
      return xor(out, pad);
    };
  }
});

// node_modules/browserify-aes/modes/cfb.js
var require_cfb = __commonJS({
  "node_modules/browserify-aes/modes/cfb.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var xor = require_buffer_xor();
    function encryptStart(self2, data, decrypt) {
      var len = data.length;
      var out = xor(data, self2._cache);
      self2._cache = self2._cache.slice(len);
      self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);
      return out;
    }
    exports2.encrypt = function(self2, data, decrypt) {
      var out = Buffer2.allocUnsafe(0);
      var len;
      while (data.length) {
        if (self2._cache.length === 0) {
          self2._cache = self2._cipher.encryptBlock(self2._prev);
          self2._prev = Buffer2.allocUnsafe(0);
        }
        if (self2._cache.length <= data.length) {
          len = self2._cache.length;
          out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);
          data = data.slice(len);
        } else {
          out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);
          break;
        }
      }
      return out;
    };
  }
});

// node_modules/browserify-aes/modes/cfb8.js
var require_cfb8 = __commonJS({
  "node_modules/browserify-aes/modes/cfb8.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad = self2._cipher.encryptBlock(self2._prev);
      var out = pad[0] ^ byteParam;
      self2._prev = Buffer2.concat([
        self2._prev.slice(1),
        Buffer2.from([decrypt ? byteParam : out])
      ]);
      return out;
    }
    exports2.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self2, chunk[i], decrypt);
      }
      return out;
    };
  }
});

// node_modules/browserify-aes/modes/cfb1.js
var require_cfb1 = __commonJS({
  "node_modules/browserify-aes/modes/cfb1.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    function encryptByte(self2, byteParam, decrypt) {
      var pad;
      var i = -1;
      var len = 8;
      var out = 0;
      var bit, value;
      while (++i < len) {
        pad = self2._cipher.encryptBlock(self2._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
      }
      return out;
    }
    function shiftIn(buffer, value) {
      var len = buffer.length;
      var i = -1;
      var out = Buffer2.allocUnsafe(buffer.length);
      buffer = Buffer2.concat([buffer, Buffer2.from([value])]);
      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
      }
      return out;
    }
    exports2.encrypt = function(self2, chunk, decrypt) {
      var len = chunk.length;
      var out = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        out[i] = encryptByte(self2, chunk[i], decrypt);
      }
      return out;
    };
  }
});

// node_modules/browserify-aes/modes/ofb.js
var require_ofb = __commonJS({
  "node_modules/browserify-aes/modes/ofb.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var xor = require_buffer_xor();
    function getBlock(self2) {
      self2._prev = self2._cipher.encryptBlock(self2._prev);
      return self2._prev;
    }
    exports2.encrypt = function(self2, chunk) {
      while (self2._cache.length < chunk.length) {
        self2._cache = Buffer.concat([self2._cache, getBlock(self2)]);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }
});

// node_modules/browserify-aes/incr32.js
var require_incr32 = __commonJS({
  "node_modules/browserify-aes/incr32.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function incr32(iv) {
      var len = iv.length;
      var item;
      while (len--) {
        item = iv.readUInt8(len);
        if (item === 255) {
          iv.writeUInt8(0, len);
        } else {
          item++;
          iv.writeUInt8(item, len);
          break;
        }
      }
    }
    module2.exports = incr32;
  }
});

// node_modules/browserify-aes/modes/ctr.js
var require_ctr = __commonJS({
  "node_modules/browserify-aes/modes/ctr.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var xor = require_buffer_xor();
    var Buffer2 = require_safe_buffer().Buffer;
    var incr32 = require_incr32();
    function getBlock(self2) {
      var out = self2._cipher.encryptBlockRaw(self2._prev);
      incr32(self2._prev);
      return out;
    }
    var blockSize = 16;
    exports2.encrypt = function(self2, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize);
      var start = self2._cache.length;
      self2._cache = Buffer2.concat([
        self2._cache,
        Buffer2.allocUnsafe(chunkNum * blockSize)
      ]);
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self2);
        var offset = start + i * blockSize;
        self2._cache.writeUInt32BE(out[0], offset + 0);
        self2._cache.writeUInt32BE(out[1], offset + 4);
        self2._cache.writeUInt32BE(out[2], offset + 8);
        self2._cache.writeUInt32BE(out[3], offset + 12);
      }
      var pad = self2._cache.slice(0, chunk.length);
      self2._cache = self2._cache.slice(chunk.length);
      return xor(chunk, pad);
    };
  }
});

// node_modules/browserify-aes/modes/list.json
var require_list = __commonJS({
  "node_modules/browserify-aes/modes/list.json"(exports2, module2) {
    module2.exports = {
      "aes-128-ecb": {
        cipher: "AES",
        key: 128,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-192-ecb": {
        cipher: "AES",
        key: 192,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-256-ecb": {
        cipher: "AES",
        key: 256,
        iv: 0,
        mode: "ECB",
        type: "block"
      },
      "aes-128-cbc": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-192-cbc": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-256-cbc": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes128: {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes192: {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      aes256: {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CBC",
        type: "block"
      },
      "aes-128-cfb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-192-cfb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-256-cfb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB",
        type: "stream"
      },
      "aes-128-cfb8": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-192-cfb8": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-256-cfb8": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB8",
        type: "stream"
      },
      "aes-128-cfb1": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-192-cfb1": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-256-cfb1": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CFB1",
        type: "stream"
      },
      "aes-128-ofb": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-192-ofb": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-256-ofb": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "OFB",
        type: "stream"
      },
      "aes-128-ctr": {
        cipher: "AES",
        key: 128,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-192-ctr": {
        cipher: "AES",
        key: 192,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-256-ctr": {
        cipher: "AES",
        key: 256,
        iv: 16,
        mode: "CTR",
        type: "stream"
      },
      "aes-128-gcm": {
        cipher: "AES",
        key: 128,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-192-gcm": {
        cipher: "AES",
        key: 192,
        iv: 12,
        mode: "GCM",
        type: "auth"
      },
      "aes-256-gcm": {
        cipher: "AES",
        key: 256,
        iv: 12,
        mode: "GCM",
        type: "auth"
      }
    };
  }
});

// node_modules/browserify-aes/modes/index.js
var require_modes = __commonJS({
  "node_modules/browserify-aes/modes/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var modeModules = {
      ECB: require_ecb(),
      CBC: require_cbc2(),
      CFB: require_cfb(),
      CFB8: require_cfb8(),
      CFB1: require_cfb1(),
      OFB: require_ofb(),
      CTR: require_ctr(),
      GCM: require_ctr()
    };
    var modes = require_list();
    for (key in modes) {
      modes[key].module = modeModules[modes[key].mode];
    }
    var key;
    module2.exports = modes;
  }
});

// node_modules/browserify-aes/aes.js
var require_aes = __commonJS({
  "node_modules/browserify-aes/aes.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    function asUInt32Array(buf) {
      if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
      var len = buf.length / 4 | 0;
      var out = new Array(len);
      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4);
      }
      return out;
    }
    function scrubVec(v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0;
      }
    }
    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0];
      var SUB_MIX1 = SUB_MIX[1];
      var SUB_MIX2 = SUB_MIX[2];
      var SUB_MIX3 = SUB_MIX[3];
      var s0 = M[0] ^ keySchedule[0];
      var s1 = M[1] ^ keySchedule[1];
      var s2 = M[2] ^ keySchedule[2];
      var s3 = M[3] ^ keySchedule[3];
      var t0, t1, t2, t3;
      var ksRow = 4;
      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
      }
      t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
      t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
      t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
      t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
      t0 = t0 >>> 0;
      t1 = t1 >>> 0;
      t2 = t2 >>> 0;
      t3 = t3 >>> 0;
      return [t0, t1, t2, t3];
    }
    var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
    var G = function() {
      var d = new Array(256);
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1;
        } else {
          d[j] = j << 1 ^ 283;
        }
      }
      var SBOX = [];
      var INV_SBOX = [];
      var SUB_MIX = [[], [], [], []];
      var INV_SUB_MIX = [[], [], [], []];
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; ++i) {
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
      return {
        SBOX,
        INV_SBOX,
        SUB_MIX,
        INV_SUB_MIX
      };
    }();
    function AES(key) {
      this._key = asUInt32Array(key);
      this._reset();
    }
    AES.blockSize = 4 * 4;
    AES.keySize = 256 / 8;
    AES.prototype.blockSize = AES.blockSize;
    AES.prototype.keySize = AES.keySize;
    AES.prototype._reset = function() {
      var keyWords = this._key;
      var keySize = keyWords.length;
      var nRounds = keySize + 6;
      var ksRows = (nRounds + 1) * 4;
      var keySchedule = [];
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k];
      }
      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
          t = t << 8 | t >>> 24;
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
          t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) {
          t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
        }
        keySchedule[k] = keySchedule[k - keySize] ^ t;
      }
      var invKeySchedule = [];
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt;
        } else {
          invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
        }
      }
      this._nRounds = nRounds;
      this._keySchedule = keySchedule;
      this._invKeySchedule = invKeySchedule;
    };
    AES.prototype.encryptBlockRaw = function(M) {
      M = asUInt32Array(M);
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
    };
    AES.prototype.encryptBlock = function(M) {
      var out = this.encryptBlockRaw(M);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[1], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[3], 12);
      return buf;
    };
    AES.prototype.decryptBlock = function(M) {
      M = asUInt32Array(M);
      var m1 = M[1];
      M[1] = M[3];
      M[3] = m1;
      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0], 0);
      buf.writeUInt32BE(out[3], 4);
      buf.writeUInt32BE(out[2], 8);
      buf.writeUInt32BE(out[1], 12);
      return buf;
    };
    AES.prototype.scrub = function() {
      scrubVec(this._keySchedule);
      scrubVec(this._invKeySchedule);
      scrubVec(this._key);
    };
    module2.exports.AES = AES;
  }
});

// node_modules/browserify-aes/ghash.js
var require_ghash = __commonJS({
  "node_modules/browserify-aes/ghash.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var ZEROES = Buffer2.alloc(16, 0);
    function toArray(buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ];
    }
    function fromArray(out) {
      var buf = Buffer2.allocUnsafe(16);
      buf.writeUInt32BE(out[0] >>> 0, 0);
      buf.writeUInt32BE(out[1] >>> 0, 4);
      buf.writeUInt32BE(out[2] >>> 0, 8);
      buf.writeUInt32BE(out[3] >>> 0, 12);
      return buf;
    }
    function GHASH(key) {
      this.h = key;
      this.state = Buffer2.alloc(16, 0);
      this.cache = Buffer2.allocUnsafe(0);
    }
    GHASH.prototype.ghash = function(block) {
      var i = -1;
      while (++i < block.length) {
        this.state[i] ^= block[i];
      }
      this._multiply();
    };
    GHASH.prototype._multiply = function() {
      var Vi = toArray(this.h);
      var Zi = [0, 0, 0, 0];
      var j, xi, lsbVi;
      var i = -1;
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
          Zi[0] ^= Vi[0];
          Zi[1] ^= Vi[1];
          Zi[2] ^= Vi[2];
          Zi[3] ^= Vi[3];
        }
        lsbVi = (Vi[3] & 1) !== 0;
        for (j = 3; j > 0; j--) {
          Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        }
        Vi[0] = Vi[0] >>> 1;
        if (lsbVi) {
          Vi[0] = Vi[0] ^ 225 << 24;
        }
      }
      this.state = fromArray(Zi);
    };
    GHASH.prototype.update = function(buf) {
      this.cache = Buffer2.concat([this.cache, buf]);
      var chunk;
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
      }
    };
    GHASH.prototype.final = function(abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer2.concat([this.cache, ZEROES], 16));
      }
      this.ghash(fromArray([0, abl, 0, bl]));
      return this.state;
    };
    module2.exports = GHASH;
  }
});

// node_modules/browserify-aes/authCipher.js
var require_authCipher = __commonJS({
  "node_modules/browserify-aes/authCipher.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var aes = require_aes();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_cipher_base();
    var inherits = require_inherits_browser();
    var GHASH = require_ghash();
    var xor = require_buffer_xor();
    var incr32 = require_incr32();
    function xorTest(a, b) {
      var out = 0;
      if (a.length !== b.length) out++;
      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; ++i) {
        out += a[i] ^ b[i];
      }
      return out;
    }
    function calcIv(self2, iv, ck) {
      if (iv.length === 12) {
        self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);
        return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);
      }
      var ghash = new GHASH(ck);
      var len = iv.length;
      var toPad = len % 16;
      ghash.update(iv);
      if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer2.alloc(toPad, 0));
      }
      ghash.update(Buffer2.alloc(8, 0));
      var ivBits = len * 8;
      var tail = Buffer2.alloc(8);
      tail.writeUIntBE(ivBits, 0, 8);
      ghash.update(tail);
      self2._finID = ghash.state;
      var out = Buffer2.from(self2._finID);
      incr32(out);
      return out;
    }
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      var h = Buffer2.alloc(4, 0);
      this._cipher = new aes.AES(key);
      var ck = this._cipher.encryptBlock(h);
      this._ghash = new GHASH(ck);
      iv = calcIv(this, iv, ck);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._alen = 0;
      this._len = 0;
      this._mode = mode;
      this._authTag = null;
      this._called = false;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
          rump = Buffer2.alloc(rump, 0);
          this._ghash.update(rump);
        }
      }
      this._called = true;
      var out = this._mode.encrypt(this, chunk);
      if (this._decrypt) {
        this._ghash.update(chunk);
      } else {
        this._ghash.update(out);
      }
      this._len += chunk.length;
      return out;
    };
    StreamCipher.prototype._final = function() {
      if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
      this._authTag = tag;
      this._cipher.scrub();
    };
    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer2.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
      return this._authTag;
    };
    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
      this._authTag = tag;
    };
    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error("Attempting to set AAD in unsupported state");
      this._ghash.update(buf);
      this._alen += buf.length;
    };
    module2.exports = StreamCipher;
  }
});

// node_modules/browserify-aes/streamCipher.js
var require_streamCipher = __commonJS({
  "node_modules/browserify-aes/streamCipher.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var aes = require_aes();
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_cipher_base();
    var inherits = require_inherits_browser();
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this);
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._cache = Buffer2.allocUnsafe(0);
      this._secCache = Buffer2.allocUnsafe(0);
      this._decrypt = decrypt;
      this._mode = mode;
    }
    inherits(StreamCipher, Transform);
    StreamCipher.prototype._update = function(chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt);
    };
    StreamCipher.prototype._final = function() {
      this._cipher.scrub();
    };
    module2.exports = StreamCipher;
  }
});

// node_modules/evp_bytestokey/index.js
var require_evp_bytestokey = __commonJS({
  "node_modules/evp_bytestokey/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var MD5 = require_md5();
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer2.isBuffer(password)) password = Buffer2.from(password, "binary");
      if (salt) {
        if (!Buffer2.isBuffer(salt)) salt = Buffer2.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
      }
      var keyLen = keyBits / 8;
      var key = Buffer2.alloc(keyLen);
      var iv = Buffer2.alloc(ivLen || 0);
      var tmp = Buffer2.alloc(0);
      while (keyLen > 0 || ivLen > 0) {
        var hash2 = new MD5();
        hash2.update(tmp);
        hash2.update(password);
        if (salt) hash2.update(salt);
        tmp = hash2.digest();
        var used = 0;
        if (keyLen > 0) {
          var keyStart = key.length - keyLen;
          used = Math.min(keyLen, tmp.length);
          tmp.copy(key, keyStart, 0, used);
          keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen;
          var length = Math.min(ivLen, tmp.length - used);
          tmp.copy(iv, ivStart, used, used + length);
          ivLen -= length;
        }
      }
      tmp.fill(0);
      return { key, iv };
    }
    module2.exports = EVP_BytesToKey;
  }
});

// node_modules/browserify-aes/encrypter.js
var require_encrypter = __commonJS({
  "node_modules/browserify-aes/encrypter.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var MODES = require_modes();
    var AuthCipher = require_authCipher();
    var Buffer2 = require_safe_buffer().Buffer;
    var StreamCipher = require_streamCipher();
    var Transform = require_cipher_base();
    var aes = require_aes();
    var ebtk = require_evp_bytestokey();
    var inherits = require_inherits_browser();
    function Cipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Cipher, Transform);
    Cipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get()) {
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    var PADDING = Buffer2.alloc(16, 16);
    Cipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
      }
      if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
      }
    };
    Cipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function() {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      var len = 16 - this.cache.length;
      var padBuff = Buffer2.allocUnsafe(len);
      var i = -1;
      while (++i < len) {
        padBuff.writeUInt8(len, i);
      }
      return Buffer2.concat([this.cache, padBuff]);
    };
    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv);
      }
      return new Cipher(config.module, password, iv);
    }
    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    exports2.createCipheriv = createCipheriv;
    exports2.createCipher = createCipher;
  }
});

// node_modules/browserify-aes/decrypter.js
var require_decrypter = __commonJS({
  "node_modules/browserify-aes/decrypter.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var AuthCipher = require_authCipher();
    var Buffer2 = require_safe_buffer().Buffer;
    var MODES = require_modes();
    var StreamCipher = require_streamCipher();
    var Transform = require_cipher_base();
    var aes = require_aes();
    var ebtk = require_evp_bytestokey();
    var inherits = require_inherits_browser();
    function Decipher(mode, key, iv) {
      Transform.call(this);
      this._cache = new Splitter();
      this._last = void 0;
      this._cipher = new aes.AES(key);
      this._prev = Buffer2.from(iv);
      this._mode = mode;
      this._autopadding = true;
    }
    inherits(Decipher, Transform);
    Decipher.prototype._update = function(data) {
      this._cache.add(data);
      var chunk;
      var thing;
      var out = [];
      while (chunk = this._cache.get(this._autopadding)) {
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
      }
      return Buffer2.concat(out);
    };
    Decipher.prototype._final = function() {
      var chunk = this._cache.flush();
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk));
      } else if (chunk) {
        throw new Error("data not multiple of block length");
      }
    };
    Decipher.prototype.setAutoPadding = function(setTo) {
      this._autopadding = !!setTo;
      return this;
    };
    function Splitter() {
      this.cache = Buffer2.allocUnsafe(0);
    }
    Splitter.prototype.add = function(data) {
      this.cache = Buffer2.concat([this.cache, data]);
    };
    Splitter.prototype.get = function(autoPadding) {
      var out;
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16);
          this.cache = this.cache.slice(16);
          return out;
        }
      }
      return null;
    };
    Splitter.prototype.flush = function() {
      if (this.cache.length) return this.cache;
    };
    function unpad(last) {
      var padded = last[15];
      if (padded < 1 || padded > 16) {
        throw new Error("unable to decrypt data");
      }
      var i = -1;
      while (++i < padded) {
        if (last[i + (16 - padded)] !== padded) {
          throw new Error("unable to decrypt data");
        }
      }
      if (padded === 16) return;
      return last.slice(0, 16 - padded);
    }
    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      if (typeof iv === "string") iv = Buffer2.from(iv);
      if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
      if (typeof password === "string") password = Buffer2.from(password);
      if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
      if (config.type === "stream") {
        return new StreamCipher(config.module, password, iv, true);
      } else if (config.type === "auth") {
        return new AuthCipher(config.module, password, iv, true);
      }
      return new Decipher(config.module, password, iv);
    }
    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()];
      if (!config) throw new TypeError("invalid suite type");
      var keys = ebtk(password, false, config.key, config.iv);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    exports2.createDecipher = createDecipher;
    exports2.createDecipheriv = createDecipheriv;
  }
});

// node_modules/browserify-aes/browser.js
var require_browser6 = __commonJS({
  "node_modules/browserify-aes/browser.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var ciphers = require_encrypter();
    var deciphers = require_decrypter();
    var modes = require_list();
    function getCiphers() {
      return Object.keys(modes);
    }
    exports2.createCipher = exports2.Cipher = ciphers.createCipher;
    exports2.createCipheriv = exports2.Cipheriv = ciphers.createCipheriv;
    exports2.createDecipher = exports2.Decipher = deciphers.createDecipher;
    exports2.createDecipheriv = exports2.Decipheriv = deciphers.createDecipheriv;
    exports2.listCiphers = exports2.getCiphers = getCiphers;
  }
});

// node_modules/browserify-des/modes.js
var require_modes2 = __commonJS({
  "node_modules/browserify-des/modes.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2["des-ecb"] = {
      key: 8,
      iv: 0
    };
    exports2["des-cbc"] = exports2.des = {
      key: 8,
      iv: 8
    };
    exports2["des-ede3-cbc"] = exports2.des3 = {
      key: 24,
      iv: 8
    };
    exports2["des-ede3"] = {
      key: 24,
      iv: 0
    };
    exports2["des-ede-cbc"] = {
      key: 16,
      iv: 8
    };
    exports2["des-ede"] = {
      key: 16,
      iv: 0
    };
  }
});

// node_modules/browserify-cipher/browser.js
var require_browser7 = __commonJS({
  "node_modules/browserify-cipher/browser.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var DES = require_browserify_des();
    var aes = require_browser6();
    var aesModes = require_modes();
    var desModes = require_modes2();
    var ebtk = require_evp_bytestokey();
    function createCipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createCipheriv(suite, keys.key, keys.iv);
    }
    function createDecipher(suite, password) {
      suite = suite.toLowerCase();
      var keyLen, ivLen;
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
      } else {
        throw new TypeError("invalid suite type");
      }
      var keys = ebtk(password, false, keyLen, ivLen);
      return createDecipheriv(suite, keys.key, keys.iv);
    }
    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({ key, iv, mode: suite });
      throw new TypeError("invalid suite type");
    }
    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase();
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
      if (desModes[suite]) return new DES({ key, iv, mode: suite, decrypt: true });
      throw new TypeError("invalid suite type");
    }
    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers());
    }
    exports2.createCipher = exports2.Cipher = createCipher;
    exports2.createCipheriv = exports2.Cipheriv = createCipheriv;
    exports2.createDecipher = exports2.Decipher = createDecipher;
    exports2.createDecipheriv = exports2.Decipheriv = createDecipheriv;
    exports2.listCiphers = exports2.getCiphers = getCiphers;
  }
});

// node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/diffie-hellman/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/miller-rabin/node_modules/bn.js/lib/bn.js
var require_bn4 = __commonJS({
  "node_modules/miller-rabin/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/miller-rabin/lib/mr.js
var require_mr = __commonJS({
  "node_modules/miller-rabin/lib/mr.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var bn = require_bn4();
    var brorand = require_brorand();
    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module2.exports = MillerRabin;
    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };
    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);
      do
        var a = new bn(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);
      return a;
    };
    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };
    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k)
        k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {
      }
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb)
          cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i === s)
          return false;
      }
      return prime;
    };
    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);
      if (!k)
        k = Math.max(1, len / 48 | 0);
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) {
      }
      var d = n.shrn(s);
      var rn1 = n1.toRed(red);
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;
        for (var i = 1; i < s; i++) {
          x = x.redSqr();
          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }
        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }
      return false;
    };
  }
});

// node_modules/diffie-hellman/lib/generatePrime.js
var require_generatePrime = __commonJS({
  "node_modules/diffie-hellman/lib/generatePrime.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var randomBytes = require_browser2();
    module2.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN3 = require_bn3();
    var TWENTYFOUR = new BN3(24);
    var MillerRabin = require_mr();
    var millerRabin = new MillerRabin();
    var ONE2 = new BN3(1);
    var TWO = new BN3(2);
    var FIVE = new BN3(5);
    var SIXTEEN = new BN3(16);
    var EIGHT = new BN3(8);
    var TEN = new BN3(10);
    var THREE = new BN3(3);
    var SEVEN = new BN3(7);
    var ELEVEN = new BN3(11);
    var FOUR = new BN3(4);
    var TWELVE = new BN3(12);
    var primes = null;
    function _getPrimes() {
      if (primes !== null)
        return primes;
      var limit = 1048576;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;
        if (i !== j && res[j] <= sqrt)
          continue;
        res[i++] = k;
      }
      primes = res;
      return res;
    }
    function simpleSieve(p) {
      var primes2 = _getPrimes();
      for (var i = 0; i < primes2.length; i++)
        if (p.modn(primes2[i]) === 0) {
          if (p.cmpn(primes2[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }
      return true;
    }
    function fermatTest(p) {
      var red = BN3.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }
    function findPrime(bits, gen) {
      if (bits < 16) {
        if (gen === 2 || gen === 5) {
          return new BN3([140, 123]);
        } else {
          return new BN3([140, 39]);
        }
      }
      gen = new BN3(gen);
      var num, n2;
      while (true) {
        num = new BN3(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE2);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }
    }
  }
});

// node_modules/diffie-hellman/lib/primes.json
var require_primes = __commonJS({
  "node_modules/diffie-hellman/lib/primes.json"(exports2, module2) {
    module2.exports = {
      modp1: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      modp2: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      modp5: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      modp14: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      modp15: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      modp16: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      modp17: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      modp18: {
        gen: "02",
        prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
  }
});

// node_modules/diffie-hellman/lib/dh.js
var require_dh = __commonJS({
  "node_modules/diffie-hellman/lib/dh.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn3();
    var MillerRabin = require_mr();
    var millerRabin = new MillerRabin();
    var TWENTYFOUR = new BN3(24);
    var ELEVEN = new BN3(11);
    var TEN = new BN3(10);
    var THREE = new BN3(3);
    var SEVEN = new BN3(7);
    var primes = require_generatePrime();
    var randomBytes = require_browser2();
    module2.exports = DH;
    function setPublicKey(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this._pub = new BN3(pub);
      return this;
    }
    function setPrivateKey(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      this._priv = new BN3(priv);
      return this;
    }
    var primeCache = {};
    function checkPrime(prime, generator) {
      var gen = generator.toString("hex");
      var hex = [gen, prime.toString(16)].join("_");
      if (hex in primeCache) {
        return primeCache[hex];
      }
      var error = 0;
      if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        error += 1;
        if (gen === "02" || gen === "05") {
          error += 8;
        } else {
          error += 4;
        }
        primeCache[hex] = error;
        return error;
      }
      if (!millerRabin.test(prime.shrn(1))) {
        error += 2;
      }
      var rem;
      switch (gen) {
        case "02":
          if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
            error += 8;
          }
          break;
        case "05":
          rem = prime.mod(TEN);
          if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
            error += 8;
          }
          break;
        default:
          error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    function DH(prime, generator, malleable) {
      this.setGenerator(generator);
      this.__prime = new BN3(prime);
      this._prime = BN3.mont(this.__prime);
      this._primeLen = prime.length;
      this._pub = void 0;
      this._priv = void 0;
      this._primeCode = void 0;
      if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
      } else {
        this._primeCode = 8;
      }
    }
    Object.defineProperty(DH.prototype, "verifyError", {
      enumerable: true,
      get: function() {
        if (typeof this._primeCode !== "number") {
          this._primeCode = checkPrime(this.__prime, this.__gen);
        }
        return this._primeCode;
      }
    });
    DH.prototype.generateKeys = function() {
      if (!this._priv) {
        this._priv = new BN3(randomBytes(this._primeLen));
      }
      this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
      return this.getPublicKey();
    };
    DH.prototype.computeSecret = function(other) {
      other = new BN3(other);
      other = other.toRed(this._prime);
      var secret = other.redPow(this._priv).fromRed();
      var out = new Buffer(secret.toArray());
      var prime = this.getPrime();
      if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([front, out]);
      }
      return out;
    };
    DH.prototype.getPublicKey = function getPublicKey(enc) {
      return formatReturnValue(this._pub, enc);
    };
    DH.prototype.getPrivateKey = function getPrivateKey(enc) {
      return formatReturnValue(this._priv, enc);
    };
    DH.prototype.getPrime = function(enc) {
      return formatReturnValue(this.__prime, enc);
    };
    DH.prototype.getGenerator = function(enc) {
      return formatReturnValue(this._gen, enc);
    };
    DH.prototype.setGenerator = function(gen, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(gen)) {
        gen = new Buffer(gen, enc);
      }
      this.__gen = gen;
      this._gen = new BN3(gen);
      return this;
    };
    function formatReturnValue(bn, enc) {
      var buf = new Buffer(bn.toArray());
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  }
});

// node_modules/diffie-hellman/browser.js
var require_browser8 = __commonJS({
  "node_modules/diffie-hellman/browser.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var generatePrime = require_generatePrime();
    var primes = require_primes();
    var DH = require_dh();
    function getDiffieHellman(mod) {
      var prime = new Buffer(primes[mod].prime, "hex");
      var gen = new Buffer(primes[mod].gen, "hex");
      return new DH(prime, gen);
    }
    var ENCODINGS = {
      "binary": true,
      "hex": true,
      "base64": true
    };
    function createDiffieHellman(prime, enc, generator, genc) {
      if (Buffer.isBuffer(enc) || ENCODINGS[enc] === void 0) {
        return createDiffieHellman(prime, "binary", enc, generator);
      }
      enc = enc || "binary";
      genc = genc || "binary";
      generator = generator || new Buffer([2]);
      if (!Buffer.isBuffer(generator)) {
        generator = new Buffer(generator, genc);
      }
      if (typeof prime === "number") {
        return new DH(generatePrime(prime, generator), generator, true);
      }
      if (!Buffer.isBuffer(prime)) {
        prime = new Buffer(prime, enc);
      }
      return new DH(prime, generator, true);
    }
    exports2.DiffieHellmanGroup = exports2.createDiffieHellmanGroup = exports2.getDiffieHellman = getDiffieHellman;
    exports2.createDiffieHellman = exports2.DiffieHellman = createDiffieHellman;
  }
});

// node_modules/process-nextick-args/index.js
var require_process_nextick_args = __commonJS({
  "node_modules/process-nextick-args/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
      module2.exports = { nextTick };
    } else {
      module2.exports = process;
    }
    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== "function") {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i;
      switch (len) {
        case 0:
        case 1:
          return process.nextTick(fn);
        case 2:
          return process.nextTick(function afterTickOne() {
            fn.call(null, arg1);
          });
        case 3:
          return process.nextTick(function afterTickTwo() {
            fn.call(null, arg1, arg2);
          });
        case 4:
          return process.nextTick(function afterTickThree() {
            fn.call(null, arg1, arg2, arg3);
          });
        default:
          args = new Array(len - 1);
          i = 0;
          while (i < args.length) {
            args[i++] = arguments[i];
          }
          return process.nextTick(function afterTick() {
            fn.apply(null, args);
          });
      }
    }
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var toString = {}.toString;
    module2.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = require_events().EventEmitter;
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/node_modules/safe-buffer/index.js
var require_safe_buffer2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/node_modules/safe-buffer/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var buffer = (init_dist(), __toCommonJS(dist_exports));
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/core-util-is/lib/util.js
var require_util2 = __commonJS({
  "node_modules/core-util-is/lib/util.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === "[object Array]";
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return objectToString(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject2;
    function isDate(d) {
      return objectToString(d) === "[object Date]";
    }
    exports2.isDate = isDate;
    function isError(e) {
      return objectToString(e) === "[object Error]" || e instanceof Error;
    }
    exports2.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = (init_dist(), __toCommonJS(dist_exports)).Buffer.isBuffer;
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/BufferList.js
var require_BufferList = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/BufferList.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Buffer2 = require_safe_buffer2().Buffer;
    var util = require_util();
    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }
    module2.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList.prototype.push = function push(v) {
        var entry = { data: v, next: null };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList.prototype.unshift = function unshift(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
        return ret;
      };
      BufferList.prototype.concat = function concat2(n) {
        if (this.length === 0) return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };
      return BufferList;
    }();
    if (util && util.inspect && util.inspect.custom) {
      module2.exports.prototype[util.inspect.custom] = function() {
        var obj = util.inspect({ length: this.length });
        return this.constructor.name + " " + obj;
      };
    }
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var pna = require_process_nextick_args();
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            pna.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            pna.nextTick(emitErrorNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            pna.nextTick(emitErrorNT, _this, err2);
          }
        } else if (cb) {
          cb(err2);
        }
      });
      return this;
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy
    };
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var pna = require_process_nextick_args();
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    var Duplex;
    Writable.WritableState = WritableState;
    var util = Object.create(require_util2());
    util.inherits = require_inherits_browser();
    var internalUtil = {
      deprecate: require_browser()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    util.inherits(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream) {
      Duplex = Duplex || require_stream_duplex2();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex2();
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }
      this._writableState = new WritableState(options, this);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      this.emit("error", new Error("Cannot pipe, not readable"));
    };
    function writeAfterEnd(stream, cb) {
      var er = new Error("write after end");
      stream.emit("error", er);
      pna.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      if (chunk === null) {
        er = new TypeError("May not write null values to stream");
      } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      if (er) {
        stream.emit("error", er);
        pna.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf) encoding = "buffer";
      else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== "function") cb = nop;
      if (state.ended) writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      var state = this._writableState;
      state.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string") encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret) state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);
      else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        pna.nextTick(cb, er);
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit("error", er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state);
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          asyncWrite(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null) state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new Error("_write() is not implemented"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending) endWritable(this, state, cb);
    };
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          stream.emit("error", err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function") {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) pna.nextTick(cb);
        else stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      get: function() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      this.end();
      cb(err);
    };
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var pna = require_process_nextick_args();
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var util = Object.create(require_util2());
    util.inherits = require_inherits_browser();
    var Readable = require_stream_readable2();
    var Writable = require_stream_writable2();
    util.inherits(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      if (options && options.readable === false) this.readable = false;
      if (options && options.writable === false) this.writable = false;
      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
      this.once("end", onend);
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._writableState.highWaterMark;
      }
    });
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return;
      pna.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null);
      this.end();
      pna.nextTick(cb, err);
    };
  }
});

// node_modules/browserify-sign/node_modules/string_decoder/node_modules/safe-buffer/index.js
var require_safe_buffer3 = __commonJS({
  "node_modules/browserify-sign/node_modules/string_decoder/node_modules/safe-buffer/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var buffer = (init_dist(), __toCommonJS(dist_exports));
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/browserify-sign/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder2 = __commonJS({
  "node_modules/browserify-sign/node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer3().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc) return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried) return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0) return "";
      var r2;
      var i;
      if (this.lastNeed) {
        r2 = this.fillLast(buf);
        if (r2 === void 0) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r2 ? r2 + this.text(buf, i) : this.text(buf, i);
      return r2 || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127) return 0;
      else if (byte >> 5 === 6) return 2;
      else if (byte >> 4 === 14) return 3;
      else if (byte >> 3 === 30) return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;
          else self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "�";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "�";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r2 = utf8CheckExtraBytes(this, buf, p);
      if (r2 !== void 0) return r2;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r2 + "�";
      return r2;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r2 = buf.toString("utf16le", i);
        if (r2) {
          var c = r2.charCodeAt(r2.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r2.slice(0, -1);
          }
        }
        return r2;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r2 + this.lastChar.toString("utf16le", 0, end);
      }
      return r2;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r2;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var pna = require_process_nextick_args();
    module2.exports = Readable;
    var isArray = require_isarray();
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_safe_buffer2().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var util = Object.create(require_util2());
    util.inherits = require_inherits_browser();
    var debugUtil = require_util();
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function() {
      };
    }
    var BufferList = require_BufferList();
    var destroyImpl = require_destroy();
    var StringDecoder;
    util.inherits(Readable, Stream);
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
      else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
      else emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream) {
      Duplex = Duplex || require_stream_duplex2();
      options = options || {};
      var isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      if (hwm || hwm === 0) this.highWaterMark = hwm;
      else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
      else this.highWaterMark = defaultHwm;
      this.highWaterMark = Math.floor(this.highWaterMark);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = require_string_decoder2().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex2();
      if (!(this instanceof Readable)) return new Readable(options);
      this._readableState = new ReadableState(options, this);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      get: function() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      this.push(null);
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          stream.emit("error", er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
            else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit("error", new Error("stream.push() after EOF"));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
              else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }
      return needMoreData(state);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit("data", chunk);
        stream.read(0);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new TypeError("Invalid non-string/buffer chunk");
      }
      return er;
    }
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder) StringDecoder = require_string_decoder2().StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };
    var MAX_HWM = 8388608;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
      }
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false;
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0) state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0) ret = fromList(n, state);
      else ret = null;
      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }
      if (state.length === 0) {
        if (!state.ended) state.needReadable = true;
        if (nOrig !== n && state.ended) endReadable(this);
      }
      if (ret !== null) this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      emitReadable(stream);
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);
        else emitReadable_(stream);
      }
    }
    function emitReadable_(stream) {
      debug("emit readable");
      stream.emit("readable");
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
        else len = state.length;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      this.emit("error", new Error("_read() is not implemented"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);
      else src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }
      var increasedAwaitDrain = false;
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf2(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = { hasUnpiped: false };
      if (state.pipesCount === 0) return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, { hasUnpiped: false });
        }
        return this;
      }
      var index = indexOf2(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      if (ev === "data") {
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === "readable") {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      if (!state.reading) {
        debug("resume read 0");
        stream.read(0);
      }
      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = /* @__PURE__ */ function(method) {
            return function() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function() {
        return this._readableState.highWaterMark;
      }
    });
    Readable._fromList = fromList;
    function fromList(n, state) {
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.head.data;
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = fromListPartial(n, state.buffer, state.decoder);
      }
      return ret;
    }
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        ret = list.shift();
      } else {
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;
        else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function copyFromBuffer(n, list) {
      var ret = Buffer2.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;
            else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
      }
    }
    function indexOf2(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = Transform;
    var Duplex = require_stream_duplex2();
    var util = Object.create(require_util2());
    util.inherits = require_inherits_browser();
    util.inherits(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (!cb) {
        return this.emit("error", new Error("write callback called multiple times"));
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function") {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error("_transform() is not implemented");
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      var _this2 = this;
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
        _this2.emit("close");
      });
    };
    function done(stream, er, data) {
      if (er) return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return stream.push(null);
    }
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = PassThrough;
    var Transform = require_stream_transform2();
    var util = Object.create(require_util2());
    util.inherits = require_inherits_browser();
    util.inherits(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/browserify-sign/node_modules/readable-stream/readable-browser.js
var require_readable_browser2 = __commonJS({
  "node_modules/browserify-sign/node_modules/readable-stream/readable-browser.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2 = module2.exports = require_stream_readable2();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable2();
    exports2.Duplex = require_stream_duplex2();
    exports2.Transform = require_stream_transform2();
    exports2.PassThrough = require_stream_passthrough2();
  }
});

// node_modules/browserify-rsa/index.js
var require_browserify_rsa = __commonJS({
  "node_modules/browserify-rsa/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn();
    var randomBytes = require_browser2();
    var Buffer2 = require_safe_buffer().Buffer;
    function getr(priv) {
      var len = priv.modulus.byteLength();
      var r2;
      do {
        r2 = new BN3(randomBytes(len));
      } while (r2.cmp(priv.modulus) >= 0 || !r2.umod(priv.prime1) || !r2.umod(priv.prime2));
      return r2;
    }
    function blind(priv) {
      var r2 = getr(priv);
      var blinder = r2.toRed(BN3.mont(priv.modulus)).redPow(new BN3(priv.publicExponent)).fromRed();
      return { blinder, unblinder: r2.invm(priv.modulus) };
    }
    function crt(msg, priv) {
      var blinds = blind(priv);
      var len = priv.modulus.byteLength();
      var blinded = new BN3(msg).mul(blinds.blinder).umod(priv.modulus);
      var c1 = blinded.toRed(BN3.mont(priv.prime1));
      var c2 = blinded.toRed(BN3.mont(priv.prime2));
      var qinv = priv.coefficient;
      var p = priv.prime1;
      var q = priv.prime2;
      var m1 = c1.redPow(priv.exponent1).fromRed();
      var m2 = c2.redPow(priv.exponent2).fromRed();
      var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
      return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer2, "be", len);
    }
    crt.getr = getr;
    module2.exports = crt;
  }
});

// node_modules/asn1.js/node_modules/bn.js/lib/bn.js
var require_bn5 = __commonJS({
  "node_modules/asn1.js/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/vm-browserify/index.js
var require_vm_browserify = __commonJS({
  "node_modules/vm-browserify/index.js"(exports, module) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var indexOf = function(xs, item) {
      if (xs.indexOf) return xs.indexOf(item);
      else for (var i = 0; i < xs.length; i++) {
        if (xs[i] === item) return i;
      }
      return -1;
    };
    var Object_keys = function(obj) {
      if (Object.keys) return Object.keys(obj);
      else {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
      }
    };
    var forEach = function(xs, fn) {
      if (xs.forEach) return xs.forEach(fn);
      else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
      }
    };
    var defineProp = function() {
      try {
        Object.defineProperty({}, "_", {});
        return function(obj, name, value) {
          Object.defineProperty(obj, name, {
            writable: true,
            enumerable: false,
            configurable: true,
            value
          });
        };
      } catch (e) {
        return function(obj, name, value) {
          obj[name] = value;
        };
      }
    }();
    var globals = [
      "Array",
      "Boolean",
      "Date",
      "Error",
      "EvalError",
      "Function",
      "Infinity",
      "JSON",
      "Math",
      "NaN",
      "Number",
      "Object",
      "RangeError",
      "ReferenceError",
      "RegExp",
      "String",
      "SyntaxError",
      "TypeError",
      "URIError",
      "decodeURI",
      "decodeURIComponent",
      "encodeURI",
      "encodeURIComponent",
      "escape",
      "eval",
      "isFinite",
      "isNaN",
      "parseFloat",
      "parseInt",
      "undefined",
      "unescape"
    ];
    function Context() {
    }
    Context.prototype = {};
    var Script = exports.Script = function NodeScript(code) {
      if (!(this instanceof Script)) return new Script(code);
      this.code = code;
    };
    Script.prototype.runInContext = function(context) {
      if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
      }
      var iframe = document.createElement("iframe");
      if (!iframe.style) iframe.style = {};
      iframe.style.display = "none";
      document.body.appendChild(iframe);
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
      if (!wEval && wExecScript) {
        wExecScript.call(win, "null");
        wEval = win.eval;
      }
      forEach(Object_keys(context), function(key) {
        win[key] = context[key];
      });
      forEach(globals, function(key) {
        if (context[key]) {
          win[key] = context[key];
        }
      });
      var winKeys = Object_keys(win);
      var res = wEval.call(win, this.code);
      forEach(Object_keys(win), function(key) {
        if (key in context || indexOf(winKeys, key) === -1) {
          context[key] = win[key];
        }
      });
      forEach(globals, function(key) {
        if (!(key in context)) {
          defineProp(context, key, win[key]);
        }
      });
      document.body.removeChild(iframe);
      return res;
    };
    Script.prototype.runInThisContext = function() {
      return eval(this.code);
    };
    Script.prototype.runInNewContext = function(context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
      if (context) {
        forEach(Object_keys(ctx), function(key) {
          context[key] = ctx[key];
        });
      }
      return res;
    };
    forEach(Object_keys(Script.prototype), function(name) {
      exports[name] = Script[name] = function(code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
      };
    });
    exports.isContext = function(context) {
      return context instanceof Context;
    };
    exports.createScript = function(code) {
      return exports.Script(code);
    };
    exports.createContext = Script.createContext = function(context) {
      var copy = new Context();
      if (typeof context === "object") {
        forEach(Object_keys(context), function(key) {
          copy[key] = context[key];
        });
      }
      return copy;
    };
  }
});

// node_modules/asn1.js/lib/asn1/api.js
var require_api = __commonJS({
  "node_modules/asn1.js/lib/asn1/api.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var asn1 = require_asn1();
    var inherits = require_inherits_browser();
    var api = exports2;
    api.define = function define2(name, body) {
      return new Entity(name, body);
    };
    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(base) {
      var named;
      try {
        named = require_vm_browserify().runInThisContext(
          "(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})"
        );
      } catch (e) {
        named = function(entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base);
      named.prototype._initNamed = function initnamed(entity) {
        base.call(this, entity);
      };
      return new named(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode2(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode3(data, enc, reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/reporter.js
var require_reporter = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/reporter.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports2.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      var state = this._reporterState;
      return { obj: state.obj, pathLen: state.path.length };
    };
    Reporter.prototype.restore = function restore(data) {
      var state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      var state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      var state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join("/");
    };
    Reporter.prototype.enterObject = function enterObject() {
      var state = this._reporterState;
      var prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      var state = this._reporterState;
      var now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error(msg) {
      var err;
      var state = this._reporterState;
      var inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function(elem) {
          return "[" + JSON.stringify(elem) + "]";
        }).join(""), msg.message || msg, msg.stack);
      }
      if (!state.options.partial)
        throw err;
      if (!inherited)
        state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      var state = this._reporterState;
      if (!state.options.partial)
        return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + " at: " + (this.path || "(shallow)");
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/buffer.js
var require_buffer = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/buffer.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var Reporter = require_base().Reporter;
    var Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports2.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      var res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || "DecoderBuffer overrun");
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || "DecoderBuffer overrun");
      var res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
          if (!(item instanceof EncoderBuffer))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === "number") {
        if (!(0 <= value && value <= 255))
          return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
      } else if (typeof value === "string") {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error("Unsupported type: " + typeof value);
      }
    }
    exports2.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = new Buffer2(this.length);
      if (!offset)
        offset = 0;
      if (this.length === 0)
        return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function(item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === "number")
          out[offset] = this.value;
        else if (typeof this.value === "string")
          out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/node.js
var require_node = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/node.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Reporter = require_base().Reporter;
    var EncoderBuffer = require_base().EncoderBuffer;
    var DecoderBuffer = require_base().DecoderBuffer;
    var assert = require_minimalistic_assert();
    var tags = [
      "seq",
      "seqof",
      "set",
      "setof",
      "objid",
      "bool",
      "gentime",
      "utctime",
      "null_",
      "enum",
      "int",
      "objDesc",
      "bitstr",
      "bmpstr",
      "charstr",
      "genstr",
      "graphstr",
      "ia5str",
      "iso646str",
      "numstr",
      "octstr",
      "printstr",
      "t61str",
      "unistr",
      "utf8str",
      "videostr"
    ];
    var methods = [
      "key",
      "obj",
      "use",
      "optional",
      "explicit",
      "implicit",
      "def",
      "choice",
      "any",
      "contains"
    ].concat(tags);
    var overrided = [
      "_peekTag",
      "_decodeTag",
      "_use",
      "_decodeStr",
      "_decodeObjid",
      "_decodeTime",
      "_decodeNull",
      "_decodeInt",
      "_decodeBool",
      "_decodeList",
      "_encodeComposite",
      "_encodeStr",
      "_encodeObjid",
      "_encodeTime",
      "_encodeNull",
      "_encodeInt",
      "_encodeBool"
    ];
    function Node(enc, parent) {
      var state = {};
      this._baseState = state;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state["default"] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module2.exports = Node;
    var stateProps = [
      "enc",
      "parent",
      "children",
      "tag",
      "args",
      "reverseArgs",
      "choice",
      "optional",
      "any",
      "obj",
      "use",
      "alteredUse",
      "key",
      "default",
      "explicit",
      "implicit",
      "contains"
    ];
    Node.prototype.clone = function clone() {
      var state = this._baseState;
      var cstate = {};
      stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
      });
      var res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      var state = this._baseState;
      methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
          var clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      var state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, "Root node can have only one child");
    };
    Node.prototype._useArgs = function useArgs(args) {
      var state = this._baseState;
      var children = args.filter(function(arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function(child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
          if (typeof arg !== "object" || arg.constructor !== Object)
            return arg;
          var res = {};
          Object.keys(arg).forEach(function(key) {
            if (key == (key | 0))
              key |= 0;
            var value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    overrided.forEach(function(method) {
      Node.prototype[method] = function _overrided() {
        var state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
      };
    });
    tags.forEach(function(tag) {
      Node.prototype[tag] = function _tagMethod() {
        var state = this._baseState;
        var args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      var state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      var state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      var state = this._baseState;
      assert(state["default"] === null);
      state["default"] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      var state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0)
        this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key(newKey) {
      var state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      var state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      var state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
      }));
      return this;
    };
    Node.prototype.contains = function contains(item) {
      var state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode2(input, options) {
      var state = this._baseState;
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
      var result = state["default"];
      var present = true;
      var prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);
      if (state.optional) {
        var tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;
        if (tag === null && !state.any) {
          var save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present))
            return present;
        }
      }
      var prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          var explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }
        var start = input.offset;
        if (state.use === null && state.choice === null) {
          if (state.any)
            var save = input.save();
          var body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;
          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, "content");
        if (state.any)
          result = result;
        else if (state.choice === null)
          result = this._decodeGeneric(state.tag, input, options);
        else
          result = this._decodeChoice(input, options);
        if (input.isError(result))
          return result;
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
          var data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
      }
      if (state.obj && present)
        result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      var state = this._baseState;
      if (tag === "seq" || tag === "set")
        return null;
      if (tag === "seqof" || tag === "setof")
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === "objid" && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === "objid")
        return this._decodeObjid(input, null, null, options);
      else if (tag === "gentime" || tag === "utctime")
        return this._decodeTime(input, tag, options);
      else if (tag === "null_")
        return this._decodeNull(input, options);
      else if (tag === "bool")
        return this._decodeBool(input, options);
      else if (tag === "objDesc")
        return this._decodeStr(input, tag, options);
      else if (tag === "int" || tag === "enum")
        return this._decodeInt(input, state.args && state.args[0], options);
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
      } else {
        return input.error("unknown tag: " + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      var state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      var state = this._baseState;
      var result = null;
      var match = false;
      Object.keys(state.choice).some(function(key) {
        var save = input.save();
        var node = state.choice[key];
        try {
          var value = node._decode(input, options);
          if (input.isError(value))
            return false;
          result = { type: key, value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match)
        return input.error("Choice not matched");
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode3(data, reporter, parent) {
      var state = this._baseState;
      if (state["default"] !== null && state["default"] === data)
        return;
      var result = this._encodeValue(data, reporter, parent);
      if (result === void 0)
        return;
      if (this._skipDefault(result, reporter, parent))
        return;
      return result;
    };
    Node.prototype._encodeValue = function encode3(data, reporter, parent) {
      var state = this._baseState;
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
      var result = null;
      this.reporter = reporter;
      if (state.optional && data === void 0) {
        if (state["default"] !== null)
          data = state["default"];
        else
          return;
      }
      var content = null;
      var primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function(child2) {
          if (child2._baseState.tag === "null_")
            return child2._encode(null, reporter, data);
          if (child2._baseState.key === null)
            return reporter.error("Child should have a key");
          var prevKey = reporter.enterKey(child2._baseState.key);
          if (typeof data !== "object")
            return reporter.error("Child expected, but input is not object");
          var res = child2._encode(data[child2._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);
          return res;
        }, this).filter(function(child2) {
          return child2;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === "seqof" || state.tag === "setof") {
          if (!(state.args && state.args.length === 1))
            return reporter.error("Too many args for : " + state.tag);
          if (!Array.isArray(data))
            return reporter.error("seqof/setof, but data is not Array");
          var child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function(item) {
            var state2 = this._baseState;
            return this._getUse(state2.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      var result;
      if (!state.any && state.choice === null) {
        var tag = state.implicit !== null ? state.implicit : state.tag;
        var cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
          if (state.use === null)
            reporter.error("Tag could be omitted only for .use()");
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, "context", result);
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      var state = this._baseState;
      var node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type + " not found in " + JSON.stringify(Object.keys(state.choice))
        );
      }
      return node._encode(data.value, reporter);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      var state = this._baseState;
      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === "objid" && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === "objid")
        return this._encodeObjid(data, null, null);
      else if (tag === "gentime" || tag === "utctime")
        return this._encodeTime(data, tag);
      else if (tag === "null_")
        return this._encodeNull();
      else if (tag === "int" || tag === "enum")
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === "bool")
        return this._encodeBool(data);
      else if (tag === "objDesc")
        return this._encodeStr(data, tag);
      else
        throw new Error("Unsupported tag: " + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
    };
  }
});

// node_modules/asn1.js/lib/asn1/base/index.js
var require_base = __commonJS({
  "node_modules/asn1.js/lib/asn1/base/index.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var base = exports2;
    base.Reporter = require_reporter().Reporter;
    base.DecoderBuffer = require_buffer().DecoderBuffer;
    base.EncoderBuffer = require_buffer().EncoderBuffer;
    base.Node = require_node();
  }
});

// node_modules/asn1.js/lib/asn1/constants/der.js
var require_der = __commonJS({
  "node_modules/asn1.js/lib/asn1/constants/der.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var constants = require_constants2();
    exports2.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports2.tagClassByName = constants._reverse(exports2.tagClass);
    exports2.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports2.tagByName = constants._reverse(exports2.tag);
  }
});

// node_modules/asn1.js/lib/asn1/constants/index.js
var require_constants2 = __commonJS({
  "node_modules/asn1.js/lib/asn1/constants/index.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var constants = exports2;
    constants._reverse = function reverse(map) {
      var res = {};
      Object.keys(map).forEach(function(key) {
        if ((key | 0) == key)
          key = key | 0;
        var value = map[key];
        res[value] = key;
      });
      return res;
    };
    constants.der = require_der();
  }
});

// node_modules/asn1.js/lib/asn1/decoders/der.js
var require_der2 = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/der.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var asn1 = require_asn1();
    var base = asn1.base;
    var bignum = asn1.bignum;
    var der = asn1.constants.der;
    function DERDecoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode2(data, options) {
      if (!(data instanceof base.DecoderBuffer))
        data = new base.DecoderBuffer(data, options);
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      base.Node.call(this, "der", parent);
    }
    inherits(DERNode, base.Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;
      var state = buffer.save();
      var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;
      buffer.restore(state);
      return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      var decodedTag = derDecodeTag(
        buffer,
        'Failed to decode tag of "' + tag + '"'
      );
      if (buffer.isError(decodedTag))
        return decodedTag;
      var len = derDecodeLen(
        buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"'
      );
      if (buffer.isError(len))
        return len;
      if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      var state = buffer.save();
      var res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"'
      );
      if (buffer.isError(res))
        return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      while (true) {
        var tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        var len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;
        var res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res))
          return res;
        if (tag.tagStr === "end")
          break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
      var result = [];
      while (!buffer.isEmpty()) {
        var possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd))
          return possibleEnd;
        var res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === "bitstr") {
        var unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused, data: buffer.raw() };
      } else if (tag === "bmpstr") {
        var raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error("Decoding of string type: bmpstr length mismatch");
        var str = "";
        for (var i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === "numstr") {
        var numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) {
          return buffer.error("Decoding of string type: numstr unsupported characters");
        }
        return numstr;
      } else if (tag === "octstr") {
        return buffer.raw();
      } else if (tag === "objDesc") {
        return buffer.raw();
      } else if (tag === "printstr") {
        var printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) {
          return buffer.error("Decoding of string type: printstr unsupported characters");
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error("Decoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      var result;
      var identifiers = [];
      var ident = 0;
      while (!buffer.isEmpty()) {
        var subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 128)
        identifiers.push(ident);
      var first = identifiers[0] / 40 | 0;
      var second = identifiers[0] % 40;
      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));
      if (values) {
        var tmp = values[result.join(" ")];
        if (tmp === void 0)
          tmp = values[result.join(".")];
        if (tmp !== void 0)
          result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      var str = buffer.raw().toString();
      if (tag === "gentime") {
        var year = str.slice(0, 4) | 0;
        var mon = str.slice(4, 6) | 0;
        var day = str.slice(6, 8) | 0;
        var hour = str.slice(8, 10) | 0;
        var min = str.slice(10, 12) | 0;
        var sec = str.slice(12, 14) | 0;
      } else if (tag === "utctime") {
        var year = str.slice(0, 2) | 0;
        var mon = str.slice(2, 4) | 0;
        var day = str.slice(4, 6) | 0;
        var hour = str.slice(6, 8) | 0;
        var min = str.slice(8, 10) | 0;
        var sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2e3 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error("Decoding " + tag + " time is not supported yet");
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull(buffer) {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      var res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      var raw = buffer.raw();
      var res = new bignum(raw);
      if (values)
        res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getDecoder("der").tree;
    };
    function derDecodeTag(buf, fail) {
      var tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;
      var cls = der.tagClass[tag >> 6];
      var primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        var oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      var tagStr = der.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      var len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;
      if (!primitive && len === 128)
        return null;
      if ((len & 128) === 0) {
        return len;
      }
      var num = len & 127;
      if (num > 4)
        return buf.error("length octect is too long");
      len = 0;
      for (var i = 0; i < num; i++) {
        len <<= 8;
        var j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }
      return len;
    }
  }
});

// node_modules/asn1.js/lib/asn1/decoders/pem.js
var require_pem = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/pem.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
    var DERDecoder = require_der2();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMDecoder, DERDecoder);
    module2.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode2(data, options) {
      var lines = data.toString().split(/[\r\n]+/g);
      var label = options.label.toUpperCase();
      var re = /^-----(BEGIN|END) ([^-]+)-----$/;
      var start = -1;
      var end = -1;
      for (var i = 0; i < lines.length; i++) {
        var match = lines[i].match(re);
        if (match === null)
          continue;
        if (match[2] !== label)
          continue;
        if (start === -1) {
          if (match[1] !== "BEGIN")
            break;
          start = i;
        } else {
          if (match[1] !== "END")
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error("PEM section not found for: " + label);
      var base64 = lines.slice(start + 1, end).join("");
      base64.replace(/[^a-z0-9\+\/=]+/gi, "");
      var input = new Buffer2(base64, "base64");
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  }
});

// node_modules/asn1.js/lib/asn1/decoders/index.js
var require_decoders = __commonJS({
  "node_modules/asn1.js/lib/asn1/decoders/index.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var decoders = exports2;
    decoders.der = require_der2();
    decoders.pem = require_pem();
  }
});

// node_modules/asn1.js/lib/asn1/encoders/der.js
var require_der3 = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/der.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
    var asn1 = require_asn1();
    var base = asn1.base;
    var der = asn1.constants.der;
    function DEREncoder(entity) {
      this.enc = "der";
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode3(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      base.Node.call(this, "der", parent);
    }
    inherits(DERNode, base.Node);
    DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
      var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        var header = new Buffer2(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([header, content]);
      }
      var lenOctets = 1;
      for (var i = content.length; i >= 256; i >>= 8)
        lenOctets++;
      var header = new Buffer2(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 255;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === "bitstr") {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === "bmpstr") {
        var buf = new Buffer2(str.length * 2);
        for (var i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === "numstr") {
        if (!this._isNumstr(str)) {
          return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        }
        return this._createEncoderBuffer(str);
      } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) {
          return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === "objDesc") {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error("Encoding of string type: " + tag + " unsupported");
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(id2, values, relative) {
      if (typeof id2 === "string") {
        if (!values)
          return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id2))
          return this.reporter.error("objid not found in values map");
        id2 = values[id2].split(/[\s\.]+/g);
        for (var i = 0; i < id2.length; i++)
          id2[i] |= 0;
      } else if (Array.isArray(id2)) {
        id2 = id2.slice();
        for (var i = 0; i < id2.length; i++)
          id2[i] |= 0;
      }
      if (!Array.isArray(id2)) {
        return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id2));
      }
      if (!relative) {
        if (id2[1] >= 40)
          return this.reporter.error("Second objid identifier OOB");
        id2.splice(0, 2, id2[0] * 40 + id2[1]);
      }
      var size = 0;
      for (var i = 0; i < id2.length; i++) {
        var ident = id2[i];
        for (size++; ident >= 128; ident >>= 7)
          size++;
      }
      var objid = new Buffer2(size);
      var offset = objid.length - 1;
      for (var i = id2.length - 1; i >= 0; i--) {
        var ident = id2[i];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0)
          objid[offset--] = 128 | ident & 127;
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10)
        return "0" + num;
      else
        return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      var str;
      var date = new Date(time);
      if (tag === "gentime") {
        str = [
          two(date.getFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else if (tag === "utctime") {
        str = [
          two(date.getFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          "Z"
        ].join("");
      } else {
        this.reporter.error("Encoding " + tag + " time is not supported yet");
      }
      return this._encodeStr(str, "octstr");
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer("");
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === "string") {
        if (!values)
          return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        }
        num = values[num];
      }
      if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
        var numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = new Buffer2(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        var size = num.length;
        if (num.length === 0)
          size++;
        var out = new Buffer2(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }
      if (num < 128)
        return this._createEncoderBuffer(num);
      if (num < 256)
        return this._createEncoderBuffer([0, num]);
      var size = 1;
      for (var i = num; i >= 256; i >>= 8)
        size++;
      var out = new Array(size);
      for (var i = out.length - 1; i >= 0; i--) {
        out[i] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(new Buffer2(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === "function")
        entity = entity(obj);
      return entity._getEncoder("der").tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      var state = this._baseState;
      var i;
      if (state["default"] === null)
        return false;
      var data = dataBuffer.join();
      if (state.defaultBuffer === void 0)
        state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
      if (data.length !== state.defaultBuffer.length)
        return false;
      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      var res;
      if (tag === "seqof")
        tag = "seq";
      else if (tag === "setof")
        tag = "set";
      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === "number" && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error("Unknown tag: " + tag);
      if (res >= 31)
        return reporter.error("Multi-octet tag encoding unsupported");
      if (!primitive)
        res |= 32;
      res |= der.tagClassByName[cls || "universal"] << 6;
      return res;
    }
  }
});

// node_modules/asn1.js/lib/asn1/encoders/pem.js
var require_pem2 = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/pem.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var inherits = require_inherits_browser();
    var DEREncoder = require_der3();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = "pem";
    }
    inherits(PEMEncoder, DEREncoder);
    module2.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode3(data, options) {
      var buf = DEREncoder.prototype.encode.call(this, data);
      var p = buf.toString("base64");
      var out = ["-----BEGIN " + options.label + "-----"];
      for (var i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push("-----END " + options.label + "-----");
      return out.join("\n");
    };
  }
});

// node_modules/asn1.js/lib/asn1/encoders/index.js
var require_encoders = __commonJS({
  "node_modules/asn1.js/lib/asn1/encoders/index.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var encoders = exports2;
    encoders.der = require_der3();
    encoders.pem = require_pem2();
  }
});

// node_modules/asn1.js/lib/asn1.js
var require_asn1 = __commonJS({
  "node_modules/asn1.js/lib/asn1.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var asn1 = exports2;
    asn1.bignum = require_bn5();
    asn1.define = require_api().define;
    asn1.base = require_base();
    asn1.constants = require_constants2();
    asn1.decoders = require_decoders();
    asn1.encoders = require_encoders();
  }
});

// node_modules/parse-asn1/certificate.js
var require_certificate = __commonJS({
  "node_modules/parse-asn1/certificate.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var asn = require_asn1();
    var Time = asn.define("Time", function() {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      });
    });
    var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
      this.seq().obj(
        this.key("type").objid(),
        this.key("value").any()
      );
    });
    var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("parameters").optional(),
        this.key("curve").objid().optional()
      );
    });
    var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
      this.setof(AttributeTypeValue);
    });
    var RDNSequence = asn.define("RDNSequence", function() {
      this.seqof(RelativeDistinguishedName);
    });
    var Name = asn.define("Name", function() {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      });
    });
    var Validity = asn.define("Validity", function() {
      this.seq().obj(
        this.key("notBefore").use(Time),
        this.key("notAfter").use(Time)
      );
    });
    var Extension = asn.define("Extension", function() {
      this.seq().obj(
        this.key("extnID").objid(),
        this.key("critical").bool().def(false),
        this.key("extnValue").octstr()
      );
    });
    var TBSCertificate = asn.define("TBSCertificate", function() {
      this.seq().obj(
        this.key("version").explicit(0)["int"]().optional(),
        this.key("serialNumber")["int"](),
        this.key("signature").use(AlgorithmIdentifier),
        this.key("issuer").use(Name),
        this.key("validity").use(Validity),
        this.key("subject").use(Name),
        this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
        this.key("issuerUniqueID").implicit(1).bitstr().optional(),
        this.key("subjectUniqueID").implicit(2).bitstr().optional(),
        this.key("extensions").explicit(3).seqof(Extension).optional()
      );
    });
    var X509Certificate = asn.define("X509Certificate", function() {
      this.seq().obj(
        this.key("tbsCertificate").use(TBSCertificate),
        this.key("signatureAlgorithm").use(AlgorithmIdentifier),
        this.key("signatureValue").bitstr()
      );
    });
    module2.exports = X509Certificate;
  }
});

// node_modules/parse-asn1/asn1.js
var require_asn12 = __commonJS({
  "node_modules/parse-asn1/asn1.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var asn1 = require_asn1();
    exports2.certificate = require_certificate();
    var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("modulus")["int"](),
        this.key("publicExponent")["int"](),
        this.key("privateExponent")["int"](),
        this.key("prime1")["int"](),
        this.key("prime2")["int"](),
        this.key("exponent1")["int"](),
        this.key("exponent2")["int"](),
        this.key("coefficient")["int"]()
      );
    });
    exports2.RSAPrivateKey = RSAPrivateKey;
    var RSAPublicKey = asn1.define("RSAPublicKey", function() {
      this.seq().obj(
        this.key("modulus")["int"](),
        this.key("publicExponent")["int"]()
      );
    });
    exports2.RSAPublicKey = RSAPublicKey;
    var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
      this.seq().obj(
        this.key("algorithm").objid(),
        this.key("none").null_().optional(),
        this.key("curve").objid().optional(),
        this.key("params").seq().obj(
          this.key("p")["int"](),
          this.key("q")["int"](),
          this.key("g")["int"]()
        ).optional()
      );
    });
    var PublicKey2 = asn1.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPublicKey").bitstr()
      );
    });
    exports2.PublicKey = PublicKey2;
    var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("algorithm").use(AlgorithmIdentifier),
        this.key("subjectPrivateKey").octstr()
      );
    });
    exports2.PrivateKey = PrivateKeyInfo;
    var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(
        this.key("algorithm").seq().obj(
          this.key("id").objid(),
          this.key("decrypt").seq().obj(
            this.key("kde").seq().obj(
              this.key("id").objid(),
              this.key("kdeparams").seq().obj(
                this.key("salt").octstr(),
                this.key("iters")["int"]()
              )
            ),
            this.key("cipher").seq().obj(
              this.key("algo").objid(),
              this.key("iv").octstr()
            )
          )
        ),
        this.key("subjectPrivateKey").octstr()
      );
    });
    exports2.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
    var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("p")["int"](),
        this.key("q")["int"](),
        this.key("g")["int"](),
        this.key("pub_key")["int"](),
        this.key("priv_key")["int"]()
      );
    });
    exports2.DSAPrivateKey = DSAPrivateKey;
    exports2.DSAparam = asn1.define("DSAparam", function() {
      this["int"]();
    });
    var ECParameters = asn1.define("ECParameters", function() {
      this.choice({
        namedCurve: this.objid()
      });
    });
    var ECPrivateKey = asn1.define("ECPrivateKey", function() {
      this.seq().obj(
        this.key("version")["int"](),
        this.key("privateKey").octstr(),
        this.key("parameters").optional().explicit(0).use(ECParameters),
        this.key("publicKey").optional().explicit(1).bitstr()
      );
    });
    exports2.ECPrivateKey = ECPrivateKey;
    exports2.signature = asn1.define("signature", function() {
      this.seq().obj(
        this.key("r")["int"](),
        this.key("s")["int"]()
      );
    });
  }
});

// node_modules/parse-asn1/aesid.json
var require_aesid = __commonJS({
  "node_modules/parse-asn1/aesid.json"(exports2, module2) {
    module2.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
  }
});

// node_modules/parse-asn1/fixProc.js
var require_fixProc = __commonJS({
  "node_modules/parse-asn1/fixProc.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
    var evp = require_evp_bytestokey();
    var ciphers = require_browser6();
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function(okey, password) {
      var key = okey.toString();
      var match = key.match(findProc);
      var decrypted;
      if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
      } else {
        var suite = "aes" + match[1];
        var iv = Buffer2.from(match[2], "hex");
        var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher["final"]());
        decrypted = Buffer2.concat(out);
      }
      var tag = key.match(startRegex)[1];
      return {
        tag,
        data: decrypted
      };
    };
  }
});

// node_modules/parse-asn1/index.js
var require_parse_asn1 = __commonJS({
  "node_modules/parse-asn1/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var asn1 = require_asn12();
    var aesid = require_aesid();
    var fixProc = require_fixProc();
    var ciphers = require_browser6();
    var compat = require_browser5();
    var Buffer2 = require_safe_buffer().Buffer;
    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt;
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
      var iv = data.algorithm.decrypt.cipher.iv;
      var cipherText = data.subjectPrivateKey;
      var keylen = parseInt(algo.split("-")[1], 10) / 8;
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
      var cipher = ciphers.createDecipheriv(algo, key, iv);
      var out = [];
      out.push(cipher.update(cipherText));
      out.push(cipher["final"]());
      return Buffer2.concat(out);
    }
    function parseKeys(buffer) {
      var password;
      if (typeof buffer === "object" && !Buffer2.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
      }
      if (typeof buffer === "string") {
        buffer = Buffer2.from(buffer);
      }
      var stripped = fixProc(buffer, password);
      var type = stripped.tag;
      var data = stripped.data;
      var subtype, ndata;
      switch (type) {
        case "CERTIFICATE":
          ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case "PUBLIC KEY":
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, "der");
          }
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
            case "1.2.840.10045.2.1":
              ndata.subjectPrivateKey = ndata.subjectPublicKey;
              return {
                type: "ec",
                data: ndata
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
              return {
                type: "dsa",
                data: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        // throw new Error('unknown key type ' + type)
        case "ENCRYPTED PRIVATE KEY":
          data = asn1.EncryptedPrivateKey.decode(data, "der");
          data = decrypt(data, password);
        // falls through
        case "PRIVATE KEY":
          ndata = asn1.PrivateKey.decode(data, "der");
          subtype = ndata.algorithm.algorithm.join(".");
          switch (subtype) {
            case "1.2.840.113549.1.1.1":
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
            case "1.2.840.10045.2.1":
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
              };
            case "1.2.840.10040.4.1":
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
              return {
                type: "dsa",
                params: ndata.algorithm.params
              };
            default:
              throw new Error("unknown key id " + subtype);
          }
        // throw new Error('unknown key type ' + type)
        case "RSA PUBLIC KEY":
          return asn1.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
          return asn1.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
          return {
            type: "dsa",
            params: asn1.DSAPrivateKey.decode(data, "der")
          };
        case "EC PRIVATE KEY":
          data = asn1.ECPrivateKey.decode(data, "der");
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          };
        default:
          throw new Error("unknown key type " + type);
      }
    }
    parseKeys.signature = asn1.signature;
    module2.exports = parseKeys;
  }
});

// node_modules/browserify-sign/browser/curves.json
var require_curves = __commonJS({
  "node_modules/browserify-sign/browser/curves.json"(exports2, module2) {
    module2.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
  }
});

// node_modules/browserify-sign/browser/sign.js
var require_sign = __commonJS({
  "node_modules/browserify-sign/browser/sign.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var createHmac = require_browser4();
    var crt = require_browserify_rsa();
    var EC = require_elliptic().ec;
    var BN3 = require_bn();
    var parseKeys = require_parse_asn1();
    var curves = require_curves();
    var RSA_PKCS1_PADDING = 1;
    function sign(hash2, key, hashType, signType, tag) {
      var priv = parseKeys(key);
      if (priv.curve) {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong private key type");
        }
        return ecSign(hash2, priv);
      } else if (priv.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong private key type");
        }
        return dsaSign(hash2, priv, hashType);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong private key type");
      }
      if (key.padding !== void 0 && key.padding !== RSA_PKCS1_PADDING) {
        throw new Error("illegal or unsupported padding mode");
      }
      hash2 = Buffer2.concat([tag, hash2]);
      var len = priv.modulus.byteLength();
      var pad = [0, 1];
      while (hash2.length + pad.length + 1 < len) {
        pad.push(255);
      }
      pad.push(0);
      var i = -1;
      while (++i < hash2.length) {
        pad.push(hash2[i]);
      }
      var out = crt(pad, priv);
      return out;
    }
    function ecSign(hash2, priv) {
      var curveId = curves[priv.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + priv.curve.join("."));
      }
      var curve = new EC(curveId);
      var key = curve.keyFromPrivate(priv.privateKey);
      var out = key.sign(hash2);
      return Buffer2.from(out.toDER());
    }
    function dsaSign(hash2, priv, algo) {
      var x = priv.params.priv_key;
      var p = priv.params.p;
      var q = priv.params.q;
      var g = priv.params.g;
      var r2 = new BN3(0);
      var k;
      var H = bits2int(hash2, q).mod(q);
      var s = false;
      var kv = getKey(x, q, hash2, algo);
      while (s === false) {
        k = makeKey(q, kv, algo);
        r2 = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r2))).mod(q);
        if (s.cmpn(0) === 0) {
          s = false;
          r2 = new BN3(0);
        }
      }
      return toDER(r2, s);
    }
    function toDER(r2, s) {
      r2 = r2.toArray();
      s = s.toArray();
      if (r2[0] & 128) {
        r2 = [0].concat(r2);
      }
      if (s[0] & 128) {
        s = [0].concat(s);
      }
      var total = r2.length + s.length + 4;
      var res = [
        48,
        total,
        2,
        r2.length
      ];
      res = res.concat(r2, [2, s.length], s);
      return Buffer2.from(res);
    }
    function getKey(x, q, hash2, algo) {
      x = Buffer2.from(x.toArray());
      if (x.length < q.byteLength()) {
        var zeros2 = Buffer2.alloc(q.byteLength() - x.length);
        x = Buffer2.concat([zeros2, x]);
      }
      var hlen = hash2.length;
      var hbits = bits2octets(hash2, q);
      var v = Buffer2.alloc(hlen);
      v.fill(1);
      var k = Buffer2.alloc(hlen);
      k = createHmac(algo, k).update(v).update(Buffer2.from([0])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      k = createHmac(algo, k).update(v).update(Buffer2.from([1])).update(x).update(hbits).digest();
      v = createHmac(algo, k).update(v).digest();
      return { k, v };
    }
    function bits2int(obits, q) {
      var bits = new BN3(obits);
      var shift = (obits.length << 3) - q.bitLength();
      if (shift > 0) {
        bits.ishrn(shift);
      }
      return bits;
    }
    function bits2octets(bits, q) {
      bits = bits2int(bits, q);
      bits = bits.mod(q);
      var out = Buffer2.from(bits.toArray());
      if (out.length < q.byteLength()) {
        var zeros2 = Buffer2.alloc(q.byteLength() - out.length);
        out = Buffer2.concat([zeros2, out]);
      }
      return out;
    }
    function makeKey(q, kv, algo) {
      var t;
      var k;
      do {
        t = Buffer2.alloc(0);
        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest();
          t = Buffer2.concat([t, kv.v]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      } while (k.cmp(q) !== -1);
      return k;
    }
    function makeR(g, k, p, q) {
      return g.toRed(BN3.mont(p)).redPow(k).fromRed().mod(q);
    }
    module2.exports = sign;
    module2.exports.getKey = getKey;
    module2.exports.makeKey = makeKey;
  }
});

// node_modules/browserify-sign/browser/verify.js
var require_verify = __commonJS({
  "node_modules/browserify-sign/browser/verify.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var BN3 = require_bn();
    var EC = require_elliptic().ec;
    var parseKeys = require_parse_asn1();
    var curves = require_curves();
    function verify(sig, hash2, key, signType, tag) {
      var pub = parseKeys(key);
      if (pub.type === "ec") {
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
          throw new Error("wrong public key type");
        }
        return ecVerify(sig, hash2, pub);
      } else if (pub.type === "dsa") {
        if (signType !== "dsa") {
          throw new Error("wrong public key type");
        }
        return dsaVerify(sig, hash2, pub);
      }
      if (signType !== "rsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong public key type");
      }
      hash2 = Buffer2.concat([tag, hash2]);
      var len = pub.modulus.byteLength();
      var pad = [1];
      var padNum = 0;
      while (hash2.length + pad.length + 2 < len) {
        pad.push(255);
        padNum += 1;
      }
      pad.push(0);
      var i = -1;
      while (++i < hash2.length) {
        pad.push(hash2[i]);
      }
      pad = Buffer2.from(pad);
      var red = BN3.mont(pub.modulus);
      sig = new BN3(sig).toRed(red);
      sig = sig.redPow(new BN3(pub.publicExponent));
      sig = Buffer2.from(sig.fromRed().toArray());
      var out = padNum < 8 ? 1 : 0;
      len = Math.min(sig.length, pad.length);
      if (sig.length !== pad.length) {
        out = 1;
      }
      i = -1;
      while (++i < len) {
        out |= sig[i] ^ pad[i];
      }
      return out === 0;
    }
    function ecVerify(sig, hash2, pub) {
      var curveId = curves[pub.data.algorithm.curve.join(".")];
      if (!curveId) {
        throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
      }
      var curve = new EC(curveId);
      var pubkey = pub.data.subjectPrivateKey.data;
      return curve.verify(hash2, sig, pubkey);
    }
    function dsaVerify(sig, hash2, pub) {
      var p = pub.data.p;
      var q = pub.data.q;
      var g = pub.data.g;
      var y = pub.data.pub_key;
      var unpacked = parseKeys.signature.decode(sig, "der");
      var s = unpacked.s;
      var r2 = unpacked.r;
      checkValue(s, q);
      checkValue(r2, q);
      var montp = BN3.mont(p);
      var w = s.invm(q);
      var v = g.toRed(montp).redPow(new BN3(hash2).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r2.mul(w).mod(q)).fromRed()).mod(p).mod(q);
      return v.cmp(r2) === 0;
    }
    function checkValue(b, q) {
      if (b.cmpn(0) <= 0) {
        throw new Error("invalid sig");
      }
      if (b.cmp(q) >= 0) {
        throw new Error("invalid sig");
      }
    }
    module2.exports = verify;
  }
});

// node_modules/browserify-sign/browser/index.js
var require_browser9 = __commonJS({
  "node_modules/browserify-sign/browser/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var Buffer2 = require_safe_buffer().Buffer;
    var createHash = require_browser3();
    var stream = require_readable_browser2();
    var inherits = require_inherits_browser();
    var sign = require_sign();
    var verify = require_verify();
    var algorithms = require_algorithms();
    Object.keys(algorithms).forEach(function(key) {
      algorithms[key].id = Buffer2.from(algorithms[key].id, "hex");
      algorithms[key.toLowerCase()] = algorithms[key];
    });
    function Sign(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hashType = data.hash;
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Sign, stream.Writable);
    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Sign.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Sign.prototype.sign = function signMethod(key, enc) {
      this.end();
      var hash2 = this._hash.digest();
      var sig = sign(hash2, key, this._hashType, this._signType, this._tag);
      return enc ? sig.toString(enc) : sig;
    };
    function Verify(algorithm) {
      stream.Writable.call(this);
      var data = algorithms[algorithm];
      if (!data) {
        throw new Error("Unknown message digest");
      }
      this._hash = createHash(data.hash);
      this._tag = data.id;
      this._signType = data.sign;
    }
    inherits(Verify, stream.Writable);
    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data);
      done();
    };
    Verify.prototype.update = function update(data, enc) {
      this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
      return this;
    };
    Verify.prototype.verify = function verifyMethod(key, sig, enc) {
      var sigBuffer = typeof sig === "string" ? Buffer2.from(sig, enc) : sig;
      this.end();
      var hash2 = this._hash.digest();
      return verify(sigBuffer, hash2, key, this._signType, this._tag);
    };
    function createSign(algorithm) {
      return new Sign(algorithm);
    }
    function createVerify(algorithm) {
      return new Verify(algorithm);
    }
    module2.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign,
      createVerify
    };
  }
});

// node_modules/create-ecdh/node_modules/bn.js/lib/bn.js
var require_bn6 = __commonJS({
  "node_modules/create-ecdh/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/create-ecdh/browser.js
var require_browser10 = __commonJS({
  "node_modules/create-ecdh/browser.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var elliptic = require_elliptic();
    var BN3 = require_bn6();
    module2.exports = function createECDH(curve) {
      return new ECDH(curve);
    };
    var aliases = {
      secp256k1: {
        name: "secp256k1",
        byteLength: 32
      },
      secp224r1: {
        name: "p224",
        byteLength: 28
      },
      prime256v1: {
        name: "p256",
        byteLength: 32
      },
      prime192v1: {
        name: "p192",
        byteLength: 24
      },
      ed25519: {
        name: "ed25519",
        byteLength: 32
      },
      secp384r1: {
        name: "p384",
        byteLength: 48
      },
      secp521r1: {
        name: "p521",
        byteLength: 66
      }
    };
    aliases.p224 = aliases.secp224r1;
    aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
    aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
    aliases.p384 = aliases.secp384r1;
    aliases.p521 = aliases.secp521r1;
    function ECDH(curve) {
      this.curveType = aliases[curve];
      if (!this.curveType) {
        this.curveType = {
          name: curve
        };
      }
      this.curve = new elliptic.ec(this.curveType.name);
      this.keys = void 0;
    }
    ECDH.prototype.generateKeys = function(enc, format) {
      this.keys = this.curve.genKeyPair();
      return this.getPublicKey(enc, format);
    };
    ECDH.prototype.computeSecret = function(other, inenc, enc) {
      inenc = inenc || "utf8";
      if (!Buffer.isBuffer(other)) {
        other = new Buffer(other, inenc);
      }
      var otherPub = this.curve.keyFromPublic(other).getPublic();
      var out = otherPub.mul(this.keys.getPrivate()).getX();
      return formatReturnValue(out, enc, this.curveType.byteLength);
    };
    ECDH.prototype.getPublicKey = function(enc, format) {
      var key = this.keys.getPublic(format === "compressed", true);
      if (format === "hybrid") {
        if (key[key.length - 1] % 2) {
          key[0] = 7;
        } else {
          key[0] = 6;
        }
      }
      return formatReturnValue(key, enc);
    };
    ECDH.prototype.getPrivateKey = function(enc) {
      return formatReturnValue(this.keys.getPrivate(), enc);
    };
    ECDH.prototype.setPublicKey = function(pub, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(pub)) {
        pub = new Buffer(pub, enc);
      }
      this.keys._importPublic(pub);
      return this;
    };
    ECDH.prototype.setPrivateKey = function(priv, enc) {
      enc = enc || "utf8";
      if (!Buffer.isBuffer(priv)) {
        priv = new Buffer(priv, enc);
      }
      var _priv = new BN3(priv);
      _priv = _priv.toString(16);
      this.keys = this.curve.genKeyPair();
      this.keys._importPrivate(_priv);
      return this;
    };
    function formatReturnValue(bn, enc, len) {
      if (!Array.isArray(bn)) {
        bn = bn.toArray();
      }
      var buf = new Buffer(bn);
      if (len && buf.length < len) {
        var zeros2 = new Buffer(len - buf.length);
        zeros2.fill(0);
        buf = Buffer.concat([zeros2, buf]);
      }
      if (!enc) {
        return buf;
      } else {
        return buf.toString(enc);
      }
    }
  }
});

// node_modules/public-encrypt/mgf.js
var require_mgf = __commonJS({
  "node_modules/public-encrypt/mgf.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var createHash = require_browser3();
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function(seed, len) {
      var t = Buffer2.alloc(0);
      var i = 0;
      var c;
      while (t.length < len) {
        c = i2ops(i++);
        t = Buffer2.concat([t, createHash("sha1").update(seed).update(c).digest()]);
      }
      return t.slice(0, len);
    };
    function i2ops(c) {
      var out = Buffer2.allocUnsafe(4);
      out.writeUInt32BE(c, 0);
      return out;
    }
  }
});

// node_modules/public-encrypt/xor.js
var require_xor = __commonJS({
  "node_modules/public-encrypt/xor.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = function xor(a, b) {
      var len = a.length;
      var i = -1;
      while (++i < len) {
        a[i] ^= b[i];
      }
      return a;
    };
  }
});

// node_modules/public-encrypt/node_modules/bn.js/lib/bn.js
var require_bn7 = __commonJS({
  "node_modules/public-encrypt/node_modules/bn.js/lib/bn.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    (function(module3, exports3) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN3;
      } else {
        exports3.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_dist(), __toCommonJS(dist_exports)).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN3.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer2(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports2);
  }
});

// node_modules/public-encrypt/withPublic.js
var require_withPublic = __commonJS({
  "node_modules/public-encrypt/withPublic.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn7();
    var Buffer2 = require_safe_buffer().Buffer;
    function withPublic(paddedMsg, key) {
      return Buffer2.from(paddedMsg.toRed(BN3.mont(key.modulus)).redPow(new BN3(key.publicExponent)).fromRed().toArray());
    }
    module2.exports = withPublic;
  }
});

// node_modules/public-encrypt/publicEncrypt.js
var require_publicEncrypt = __commonJS({
  "node_modules/public-encrypt/publicEncrypt.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var parseKeys = require_parse_asn1();
    var randomBytes = require_browser2();
    var createHash = require_browser3();
    var mgf = require_mgf();
    var xor = require_xor();
    var BN3 = require_bn7();
    var withPublic = require_withPublic();
    var crt = require_browserify_rsa();
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function publicEncrypt(publicKey, msg, reverse) {
      var padding2;
      if (publicKey.padding) {
        padding2 = publicKey.padding;
      } else if (reverse) {
        padding2 = 1;
      } else {
        padding2 = 4;
      }
      var key = parseKeys(publicKey);
      var paddedMsg;
      if (padding2 === 4) {
        paddedMsg = oaep(key, msg);
      } else if (padding2 === 1) {
        paddedMsg = pkcs1(key, msg, reverse);
      } else if (padding2 === 3) {
        paddedMsg = new BN3(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error("data too long for modulus");
        }
      } else {
        throw new Error("unknown padding");
      }
      if (reverse) {
        return crt(paddedMsg, key);
      } else {
        return withPublic(paddedMsg, key);
      }
    };
    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var mLen = msg.length;
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      var hLen2 = 2 * hLen;
      if (mLen > k - hLen2 - 2) {
        throw new Error("message too long");
      }
      var ps = Buffer2.alloc(k - mLen - hLen2 - 2);
      var dblen = k - hLen - 1;
      var seed = randomBytes(hLen);
      var maskedDb = xor(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf(seed, dblen));
      var maskedSeed = xor(seed, mgf(maskedDb, hLen));
      return new BN3(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k));
    }
    function pkcs1(key, msg, reverse) {
      var mLen = msg.length;
      var k = key.modulus.byteLength();
      if (mLen > k - 11) {
        throw new Error("message too long");
      }
      var ps;
      if (reverse) {
        ps = Buffer2.alloc(k - mLen - 3, 255);
      } else {
        ps = nonZero(k - mLen - 3);
      }
      return new BN3(Buffer2.concat([Buffer2.from([0, reverse ? 1 : 2]), ps, Buffer2.alloc(1), msg], k));
    }
    function nonZero(len) {
      var out = Buffer2.allocUnsafe(len);
      var i = 0;
      var cache = randomBytes(len * 2);
      var cur = 0;
      var num;
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2);
          cur = 0;
        }
        num = cache[cur++];
        if (num) {
          out[i++] = num;
        }
      }
      return out;
    }
  }
});

// node_modules/public-encrypt/privateDecrypt.js
var require_privateDecrypt = __commonJS({
  "node_modules/public-encrypt/privateDecrypt.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var parseKeys = require_parse_asn1();
    var mgf = require_mgf();
    var xor = require_xor();
    var BN3 = require_bn7();
    var crt = require_browserify_rsa();
    var createHash = require_browser3();
    var withPublic = require_withPublic();
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function privateDecrypt(privateKey, enc, reverse) {
      var padding2;
      if (privateKey.padding) {
        padding2 = privateKey.padding;
      } else if (reverse) {
        padding2 = 1;
      } else {
        padding2 = 4;
      }
      var key = parseKeys(privateKey);
      var k = key.modulus.byteLength();
      if (enc.length > k || new BN3(enc).cmp(key.modulus) >= 0) {
        throw new Error("decryption error");
      }
      var msg;
      if (reverse) {
        msg = withPublic(new BN3(enc), key);
      } else {
        msg = crt(enc, key);
      }
      var zBuffer = Buffer2.alloc(k - msg.length);
      msg = Buffer2.concat([zBuffer, msg], k);
      if (padding2 === 4) {
        return oaep(key, msg);
      } else if (padding2 === 1) {
        return pkcs1(key, msg, reverse);
      } else if (padding2 === 3) {
        return msg;
      } else {
        throw new Error("unknown padding");
      }
    };
    function oaep(key, msg) {
      var k = key.modulus.byteLength();
      var iHash = createHash("sha1").update(Buffer2.alloc(0)).digest();
      var hLen = iHash.length;
      if (msg[0] !== 0) {
        throw new Error("decryption error");
      }
      var maskedSeed = msg.slice(1, hLen + 1);
      var maskedDb = msg.slice(hLen + 1);
      var seed = xor(maskedSeed, mgf(maskedDb, hLen));
      var db = xor(maskedDb, mgf(seed, k - hLen - 1));
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error("decryption error");
      }
      var i = hLen;
      while (db[i] === 0) {
        i++;
      }
      if (db[i++] !== 1) {
        throw new Error("decryption error");
      }
      return db.slice(i);
    }
    function pkcs1(key, msg, reverse) {
      var p1 = msg.slice(0, 2);
      var i = 2;
      var status = 0;
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++;
          break;
        }
      }
      var ps = msg.slice(2, i - 1);
      if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
        status++;
      }
      if (ps.length < 8) {
        status++;
      }
      if (status) {
        throw new Error("decryption error");
      }
      return msg.slice(i);
    }
    function compare(a, b) {
      a = Buffer2.from(a);
      b = Buffer2.from(b);
      var dif = 0;
      var len = a.length;
      if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
      }
      var i = -1;
      while (++i < len) {
        dif += a[i] ^ b[i];
      }
      return dif;
    }
  }
});

// node_modules/public-encrypt/browser.js
var require_browser11 = __commonJS({
  "node_modules/public-encrypt/browser.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.publicEncrypt = require_publicEncrypt();
    exports2.privateDecrypt = require_privateDecrypt();
    exports2.privateEncrypt = function privateEncrypt(key, buf) {
      return exports2.publicEncrypt(key, buf, true);
    };
    exports2.publicDecrypt = function publicDecrypt(key, buf) {
      return exports2.privateDecrypt(key, buf, true);
    };
  }
});

// node_modules/randomfill/browser.js
var require_browser12 = __commonJS({
  "node_modules/randomfill/browser.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function oldBrowser() {
      throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
    }
    var safeBuffer = require_safe_buffer();
    var randombytes = require_browser2();
    var Buffer2 = safeBuffer.Buffer;
    var kBufferMaxLength = safeBuffer.kMaxLength;
    var crypto = global.crypto || global.msCrypto;
    var kMaxUint32 = Math.pow(2, 32) - 1;
    function assertOffset(offset, length) {
      if (typeof offset !== "number" || offset !== offset) {
        throw new TypeError("offset must be a number");
      }
      if (offset > kMaxUint32 || offset < 0) {
        throw new TypeError("offset must be a uint32");
      }
      if (offset > kBufferMaxLength || offset > length) {
        throw new RangeError("offset out of range");
      }
    }
    function assertSize(size, offset, length) {
      if (typeof size !== "number" || size !== size) {
        throw new TypeError("size must be a number");
      }
      if (size > kMaxUint32 || size < 0) {
        throw new TypeError("size must be a uint32");
      }
      if (size + offset > length || size > kBufferMaxLength) {
        throw new RangeError("buffer too small");
      }
    }
    if (crypto && crypto.getRandomValues || !process.browser) {
      exports2.randomFill = randomFill;
      exports2.randomFillSync = randomFillSync;
    } else {
      exports2.randomFill = oldBrowser;
      exports2.randomFillSync = oldBrowser;
    }
    function randomFill(buf, offset, size, cb) {
      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
      } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
      } else if (typeof cb !== "function") {
        throw new TypeError('"cb" argument must be a function');
      }
      assertOffset(offset, buf.length);
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size, cb);
    }
    function actualFill(buf, offset, size, cb) {
      if (process.browser) {
        var ourBuf = buf.buffer;
        var uint = new Uint8Array(ourBuf, offset, size);
        crypto.getRandomValues(uint);
        if (cb) {
          process.nextTick(function() {
            cb(null, buf);
          });
          return;
        }
        return buf;
      }
      if (cb) {
        randombytes(size, function(err, bytes3) {
          if (err) {
            return cb(err);
          }
          bytes3.copy(buf, offset);
          cb(null, buf);
        });
        return;
      }
      var bytes = randombytes(size);
      bytes.copy(buf, offset);
      return buf;
    }
    function randomFillSync(buf, offset, size) {
      if (typeof offset === "undefined") {
        offset = 0;
      }
      if (!Buffer2.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      }
      assertOffset(offset, buf.length);
      if (size === void 0) size = buf.length - offset;
      assertSize(size, offset, buf.length);
      return actualFill(buf, offset, size);
    }
  }
});

// node_modules/crypto-browserify/index.js
var require_crypto_browserify = __commonJS({
  "node_modules/crypto-browserify/index.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.randomBytes = exports2.rng = exports2.pseudoRandomBytes = exports2.prng = require_browser2();
    exports2.createHash = exports2.Hash = require_browser3();
    exports2.createHmac = exports2.Hmac = require_browser4();
    var algos = require_algos();
    var algoKeys = Object.keys(algos);
    var hashes = [
      "sha1",
      "sha224",
      "sha256",
      "sha384",
      "sha512",
      "md5",
      "rmd160"
    ].concat(algoKeys);
    exports2.getHashes = function() {
      return hashes;
    };
    var p = require_browser5();
    exports2.pbkdf2 = p.pbkdf2;
    exports2.pbkdf2Sync = p.pbkdf2Sync;
    var aes = require_browser7();
    exports2.Cipher = aes.Cipher;
    exports2.createCipher = aes.createCipher;
    exports2.Cipheriv = aes.Cipheriv;
    exports2.createCipheriv = aes.createCipheriv;
    exports2.Decipher = aes.Decipher;
    exports2.createDecipher = aes.createDecipher;
    exports2.Decipheriv = aes.Decipheriv;
    exports2.createDecipheriv = aes.createDecipheriv;
    exports2.getCiphers = aes.getCiphers;
    exports2.listCiphers = aes.listCiphers;
    var dh = require_browser8();
    exports2.DiffieHellmanGroup = dh.DiffieHellmanGroup;
    exports2.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
    exports2.getDiffieHellman = dh.getDiffieHellman;
    exports2.createDiffieHellman = dh.createDiffieHellman;
    exports2.DiffieHellman = dh.DiffieHellman;
    var sign = require_browser9();
    exports2.createSign = sign.createSign;
    exports2.Sign = sign.Sign;
    exports2.createVerify = sign.createVerify;
    exports2.Verify = sign.Verify;
    exports2.createECDH = require_browser10();
    var publicEncrypt = require_browser11();
    exports2.publicEncrypt = publicEncrypt.publicEncrypt;
    exports2.privateEncrypt = publicEncrypt.privateEncrypt;
    exports2.publicDecrypt = publicEncrypt.publicDecrypt;
    exports2.privateDecrypt = publicEncrypt.privateDecrypt;
    var rf = require_browser12();
    exports2.randomFill = rf.randomFill;
    exports2.randomFillSync = rf.randomFillSync;
    exports2.createCredentials = function() {
      throw new Error("sorry, createCredentials is not implemented yet\nwe accept pull requests\nhttps://github.com/browserify/crypto-browserify");
    };
    exports2.constants = {
      DH_CHECK_P_NOT_SAFE_PRIME: 2,
      DH_CHECK_P_NOT_PRIME: 1,
      DH_UNABLE_TO_CHECK_GENERATOR: 4,
      DH_NOT_SUITABLE_GENERATOR: 8,
      NPN_ENABLED: 1,
      ALPN_ENABLED: 1,
      RSA_PKCS1_PADDING: 1,
      RSA_SSLV23_PADDING: 2,
      RSA_NO_PADDING: 3,
      RSA_PKCS1_OAEP_PADDING: 4,
      RSA_X931_PADDING: 5,
      RSA_PKCS1_PSS_PADDING: 6,
      POINT_CONVERSION_COMPRESSED: 2,
      POINT_CONVERSION_UNCOMPRESSED: 4,
      POINT_CONVERSION_HYBRID: 6
    };
  }
});

// node_modules/brorand/index.js
var require_brorand = __commonJS({
  "node_modules/brorand/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var r2;
    module2.exports = function rand(len) {
      if (!r2)
        r2 = new Rand(null);
      return r2.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module2.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto = require_crypto_browserify();
        if (typeof crypto.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }
    var crypto;
  }
});

// node_modules/elliptic/lib/elliptic/curve/base.js
var require_base2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/base.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils2();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN3(conf.p, 16);
      this.red = conf.prime ? BN3.red(conf.prime) : BN3.mont(this.p);
      this.zero = new BN3(0).toRed(this.red);
      this.one = new BN3(1).toRed(this.red);
      this.two = new BN3(2).toRed(this.red);
      this.n = conf.n && new BN3(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module2.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode3(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r2 = this;
      for (var i = 0; i < k; i++)
        r2 = r2.dbl();
      return r2;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/short.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils2();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base2();
    var assert = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module2.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN3(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN3(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN3(vec.a, 16),
            b: new BN3(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN3.mont(num);
      var tinv = new BN3(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN3(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN3(1);
      var y1 = new BN3(0);
      var x2 = new BN3(0);
      var y2 = new BN3(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r2;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r2 = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r2.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r2.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r2;
        v = u;
        u = r2;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r2.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN3(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN3(0);
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = new BN3(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r2 = this;
        for (i = 0; i < pow; i++)
          r2 = r2.dbl();
        return r2;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN3(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base2();
    var utils = require_utils2();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.i4 = new BN3(4).toRed(this.red).redInvm();
      this.two = new BN3(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module2.exports = MontCurve;
    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN3(x, 16);
        this.z = new BN3(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils2();
    var BN3 = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base2();
    var assert = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN3(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN3(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN3(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module2.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN3(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = z ? new BN3(z, 16) : this.curve.one;
        this.t = t && new BN3(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/index.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var curve = exports2;
    curve.base = require_base2();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils4 = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports2.inherits = inherits;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports2.toArray = toArray;
    function toHex2(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports2.toHex = toHex2;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports2.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports2.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports2.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports2.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports2.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports2.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports2.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports2.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports2.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports2.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports2.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports2.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports2.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports2.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports2.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports2.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports2.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports2.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports2.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r2 = al << 32 - num | ah >>> num;
      return r2 >>> 0;
    }
    exports2.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports2.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports2.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports2.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports2.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r2 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r2, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r2, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports2.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports2.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports2.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports2.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports2.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports2.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports2.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports2.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module2.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module2.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module2.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module2.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ ~xh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ ~xl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ xh & zh ^ yh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ xl & zl ^ yl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module2.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    exports2.sha1 = require__();
    exports2.sha224 = require__3();
    exports2.sha256 = require__2();
    exports2.sha384 = require__5();
    exports2.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports2.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r2[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r2 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function Hmac(hash2, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash2, key, enc);
      this.Hash = hash2;
      this.blockSize = hash2.blockSize / 8;
      this.outSize = hash2.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module2.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
      for (i = 0; i < key.length; i++)
        key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++)
        key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var hash2 = exports2;
    hash2.utils = require_utils4();
    hash2.common = require_common();
    hash2.sha = require_sha2();
    hash2.ripemd = require_ripemd();
    hash2.hmac = require_hmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  }
});

// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/elliptic/lib/elliptic/curves.js
var require_curves2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/curves.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var curves = exports2;
    var hash2 = require_hash();
    var curve = require_curve();
    var utils = require_utils2();
    var assert = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var hash2 = require_hash();
    var utils = require_utils();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module2.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash2.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/key.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils2();
    var assert = utils.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module2.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN3(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature, options) {
      return this.ec.verify(msg, signature, this, void 0, options);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils2();
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN3(options.r, 16);
      this.s = new BN3(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module2.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var r2 = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      if ((data[p.place] & 128) !== 0) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r2[0] === 0) {
        if (r2[1] & 128) {
          r2 = r2.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN3(r2);
      this.s = new BN3(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r2 = this.r.toArray();
      var s = this.s.toArray();
      if (r2[0] & 128)
        r2 = [0].concat(r2);
      if (s[0] & 128)
        s = [0].concat(s);
      r2 = rmPadding(r2);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r2.length);
      arr = arr.concat(r2);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils2();
    var curves = require_curves2();
    var rand = require_brorand();
    var assert = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module2.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN3(2));
      for (; ; ) {
        var priv = new BN3(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
      var byteLength;
      if (BN3.isBN(msg) || typeof msg === "number") {
        msg = new BN3(msg, 16);
        byteLength = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength = msg.length;
        msg = new BN3(msg, 16);
      } else {
        var str = msg.toString();
        byteLength = str.length + 1 >>> 1;
        msg = new BN3(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      if (typeof msg !== "string" && typeof msg !== "number" && !BN3.isBN(msg)) {
        assert(
          typeof msg === "object" && msg && typeof msg.length === "number",
          "Expected message to be an array-like, a hex string, or a BN instance"
        );
        assert(msg.length >>> 0 === msg.length);
        for (var i = 0; i < msg.length; i++) assert((msg[i] & 255) === msg[i]);
      }
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      assert(!msg.isNeg(), "Can not sign a negative message");
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      assert(new BN3(nonce).eq(msg), "Can not sign message");
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN3(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN3(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r2 = kpX.umod(this.n);
        if (r2.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r2.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r: r2, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc, options) {
      if (!options)
        options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r2 = signature.r;
      var s = signature.s;
      if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r2).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r2) === 0;
      }
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r2);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN3(msg);
      var r2 = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
      else
        r2 = this.curve.pointFromX(r2, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r2, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var utils = require_utils2();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash2.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix2() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module2.exports = KeyPair;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var BN3 = require_bn2();
    var utils = require_utils2();
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN3)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex2() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module2.exports = Signature;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var hash2 = require_hash();
    var curves = require_curves2();
    var utils = require_utils2();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    module2.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r2 = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r2);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r2.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash3.update(arguments[i]);
      return utils.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/elliptic/lib/elliptic.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var elliptic = exports2;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils2();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves2();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/secp256k1/lib/elliptic.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var EC = require_elliptic().ec;
    var ec = new EC("secp256k1");
    var ecparams = ec.curve;
    var BN3 = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN3(xbuf);
      if (x.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y.isOdd()) y = y.redNeg();
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec.keyPair({ pub: { x, y } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN3(xbuf);
      let y = new BN3(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec.keyPair({ pub: { x, y } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33) return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65) return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point) {
      const pubkey = point.encode(null, output.length === 33);
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }
    module2.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN3(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN3(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1;
        bn.iadd(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN3(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1;
        }
        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2;
        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
      },
      signatureNormalize(sig) {
        const r2 = new BN3(sig.subarray(0, 32));
        const s = new BN3(sig.subarray(32, 64));
        if (r2.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN3(sigR).cmp(ecparams.n) >= 0) return 1;
        if (new BN3(sigS).cmp(ecparams.n) >= 0) return 1;
        const { output } = obj;
        let r2 = output.subarray(4, 4 + 33);
        r2[0] = 0;
        r2.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r2[posR] === 0 && !(r2[posR + 1] & 128); --lenR, ++posR) ;
        r2 = r2.subarray(posR);
        if (r2[0] & 128) return 1;
        if (lenR > 1 && r2[0] === 0 && !(r2[1] & 128)) return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS) ;
        s = s.subarray(posS);
        if (s[0] & 128) return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128)) return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r2.length;
        output.set(r2, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport(output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 48) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 2) return 1;
        const lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 2) return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 128) return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
        if (sig[lenR + 6] & 128) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error("S length is too long");
        let r2 = new BN3(sigR);
        if (r2.cmp(ecparams.n) >= 0) r2 = new BN3(0);
        let s = new BN3(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN3(0);
        output.set(r2.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error("This is the way");
            return new BN3(nonce);
          };
        }
        const d = new BN3(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
        let sig;
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2;
        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2;
        let point;
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const scalar = new BN3(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point.encode(null, true);
          const sha2562 = ec.hash().update(data2).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha2562[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point.getX().toArray("be", 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];
          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point.getY().toArray("be", 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];
          const hash2 = hashfn(xbuf, ybuf, data);
          const isValid = hash2 instanceof Uint8Array && hash2.length === output.length;
          if (!isValid) return 2;
          output.set(hash2);
        }
        return 0;
      }
    };
  }
});

// node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "node_modules/secp256k1/elliptic.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    module2.exports = require_lib()(require_elliptic2());
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/random.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    var randombytes = require_browser2();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports2.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports2.getRandomBytesSync = getRandomBytesSync;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k12 = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/secp256k1.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __awaiter4 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator4 = exports2 && exports2.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export(m) {
      for (var p in m) if (!exports2.hasOwnProperty(p)) exports2[p] = m[p];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    var secp256k1_1 = require_elliptic3();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter4(this, void 0, void 0, function() {
        var pk;
        return __generator4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (false) return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a2.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports2.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports2.createPrivateKeySync = createPrivateKeySync;
    __export(require_elliptic3());
  }
});

// node_modules/ethereumjs-util/dist.browser/internal.js
var require_internal = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/internal.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHexString = exports2.getKeys = exports2.fromAscii = exports2.fromUtf8 = exports2.toAscii = exports2.arrayContainsArray = exports2.getBinarySize = exports2.padToEven = exports2.stripHexPrefix = exports2.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports2.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = function(str) {
      if (typeof str !== "string")
        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports2.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
      }
      if (a.length % 2)
        a = "0".concat(a);
      return a;
    }
    exports2.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
      }
      return Buffer.byteLength(str, "utf8");
    }
    exports2.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
      }
      return subset[some ? "some" : "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    exports2.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      var str = "";
      var i = 0;
      var l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports2.toAscii = toAscii;
    function fromUtf8(stringValue) {
      var str = Buffer.from(stringValue, "utf8");
      return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
    }
    exports2.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      var hex = "";
      for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0".concat(n) : n;
      }
      return "0x".concat(hex);
    }
    exports2.fromAscii = fromAscii;
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
      }
      if (typeof key !== "string") {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
      }
      var result = [];
      for (var i = 0; i < params.length; i++) {
        var value = params[i][key];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
        }
        result.push(value);
      }
      return result;
    }
    exports2.getKeys = getKeys;
    function isHexString2(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (length && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports2.isHexString = isHexString2;
  }
});

// node_modules/ethereumjs-util/dist.browser/helpers.js
var require_helpers = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/helpers.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertIsString = exports2.assertIsArray = exports2.assertIsBuffer = exports2.assertIsHexString = void 0;
    var internal_1 = require_internal();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports2.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports2.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports2.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        var msg = "This method only supports strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports2.assertIsString = assertIsString;
  }
});

// node_modules/ethereumjs-util/dist.browser/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/bytes.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __values = exports2 && exports2.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports2 && exports2.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done) ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bufArrToArr = exports2.arrToBufArr = exports2.validateNoLeadingZeroes = exports2.baToJSON = exports2.toUtf8 = exports2.addHexPrefix = exports2.toUnsigned = exports2.fromSigned = exports2.bufferToHex = exports2.bufferToInt = exports2.toBuffer = exports2.unpadHexString = exports2.unpadArray = exports2.unpadBuffer = exports2.setLengthRight = exports2.setLengthLeft = exports2.zeros = exports2.intToBuffer = exports2.intToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var helpers_1 = require_helpers();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: ".concat(i));
      }
      return "0x".concat(i.toString(16));
    };
    exports2.intToHex = intToHex;
    var intToBuffer = function(i) {
      var hex = (0, exports2.intToHex)(i);
      return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports2.intToBuffer = intToBuffer;
    var zeros2 = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    exports2.zeros = zeros2;
    var setLength = function(msg, length, right) {
      var buf = (0, exports2.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports2.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports2.setLengthRight = setLengthRight;
    var stripZeros2 = function(a) {
      var first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports2.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports2.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return stripZeros2(a);
    };
    exports2.unpadHexString = unpadHexString;
    var toBuffer2 = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports2.intToBuffer)(v);
      }
      if (externals_1.BN.isBN(v)) {
        if (v.isNeg()) {
          throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
        }
        return v.toArrayLike(Buffer);
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports2.toBuffer = toBuffer2;
    var bufferToInt = function(buf) {
      return new externals_1.BN((0, exports2.toBuffer)(buf)).toNumber();
    };
    exports2.bufferToInt = bufferToInt;
    var bufferToHex2 = function(buf) {
      buf = (0, exports2.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports2.bufferToHex = bufferToHex2;
    var fromSigned = function(num) {
      return new externals_1.BN(num).fromTwos(256);
    };
    exports2.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    exports2.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports2.addHexPrefix = addHexPrefix;
    var toUtf8 = function(hex) {
      var zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      var bufferVal = Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports2.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return "0x".concat(ba.toString("hex"));
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push((0, exports2.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports2.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      var e_1, _a2;
      try {
        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
          if (v !== void 0 && v.length > 0 && v[0] === 0) {
            throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    exports2.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map(function(a) {
        return arrToBufArr(a);
      });
    }
    exports2.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
      }
      return arr.map(function(a) {
        return bufArrToArr(a);
      });
    }
    exports2.bufArrToArr = bufArrToArr;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/hash-utils.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash2 = hashConstructor();
        hash2.update(msg);
        return Buffer.from(hash2.digest());
      };
    }
    exports2.createHashFunction = createHashFunction;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/keccak.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_js();
    exports2.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports2.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports2.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports2.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// node_modules/ethereumjs-util/dist.browser/hash.js
var require_hash2 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/hash.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rlphash = exports2.ripemd160FromArray = exports2.ripemd160FromString = exports2.ripemd160 = exports2.sha256FromArray = exports2.sha256FromString = exports2.sha256 = exports2.keccakFromArray = exports2.keccakFromHexString = exports2.keccakFromString = exports2.keccak256 = exports2.keccak = void 0;
    var keccak_1 = require_keccak();
    var createHash = require_browser3();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var helpers_1 = require_helpers();
    var keccak = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsBuffer)(a);
      switch (bits) {
        case 224: {
          return (0, keccak_1.keccak224)(a);
        }
        case 256: {
          return (0, keccak_1.keccak256)(a);
        }
        case 384: {
          return (0, keccak_1.keccak384)(a);
        }
        case 512: {
          return (0, keccak_1.keccak512)(a);
        }
        default: {
          throw new Error("Invald algorithm: keccak".concat(bits));
        }
      }
    };
    exports2.keccak = keccak;
    var keccak2563 = function(a) {
      return (0, exports2.keccak)(a);
    };
    exports2.keccak256 = keccak2563;
    var keccakFromString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsString)(a);
      var buf = Buffer.from(a, "utf8");
      return (0, exports2.keccak)(buf, bits);
    };
    exports2.keccakFromString = keccakFromString;
    var keccakFromHexString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsHexString)(a);
      return (0, exports2.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports2.keccakFromHexString = keccakFromHexString;
    var keccakFromArray = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsArray)(a);
      return (0, exports2.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports2.keccakFromArray = keccakFromArray;
    var _sha256 = function(a) {
      a = (0, bytes_1.toBuffer)(a);
      return createHash("sha256").update(a).digest();
    };
    var sha2562 = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return _sha256(a);
    };
    exports2.sha256 = sha2562;
    var sha256FromString = function(a) {
      (0, helpers_1.assertIsString)(a);
      return _sha256(a);
    };
    exports2.sha256FromString = sha256FromString;
    var sha256FromArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return _sha256(a);
    };
    exports2.sha256FromArray = sha256FromArray;
    var _ripemd160 = function(a, padded) {
      a = (0, bytes_1.toBuffer)(a);
      var hash2 = createHash("rmd160").update(a).digest();
      if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash2, 32);
      } else {
        return hash2;
      }
    };
    var ripemd1602 = function(a, padded) {
      (0, helpers_1.assertIsBuffer)(a);
      return _ripemd160(a, padded);
    };
    exports2.ripemd160 = ripemd1602;
    var ripemd160FromString = function(a, padded) {
      (0, helpers_1.assertIsString)(a);
      return _ripemd160(a, padded);
    };
    exports2.ripemd160FromString = ripemd160FromString;
    var ripemd160FromArray = function(a, padded) {
      (0, helpers_1.assertIsArray)(a);
      return _ripemd160(a, padded);
    };
    exports2.ripemd160FromArray = ripemd160FromArray;
    var rlphash = function(a) {
      return (0, exports2.keccak)(externals_1.rlp.encode(a));
    };
    exports2.rlphash = rlphash;
  }
});

// node_modules/ethereumjs-util/dist.browser/types.js
var require_types = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/types.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toType = exports2.TypeOutput = exports2.bnToRlp = exports2.bnToUnpaddedBuffer = exports2.bnToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var bytes_1 = require_bytes();
    function bnToHex(value) {
      return "0x".concat(value.toString(16));
    }
    exports2.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
    }
    exports2.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports2.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports2.TypeOutput || (exports2.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      var output = (0, bytes_1.toBuffer)(input);
      if (outputType === TypeOutput.Buffer) {
        return output;
      } else if (outputType === TypeOutput.BN) {
        return new externals_1.BN(output);
      } else if (outputType === TypeOutput.Number) {
        var bn = new externals_1.BN(output);
        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return "0x".concat(output.toString("hex"));
      }
    }
    exports2.toType = toType;
  }
});

// node_modules/ethereumjs-util/dist.browser/account.js
var require_account = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/account.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __read = exports2 && exports2.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done) ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isZeroAddress = exports2.zeroAddress = exports2.importPublic = exports2.privateToAddress = exports2.privateToPublic = exports2.publicToAddress = exports2.pubToAddress = exports2.isValidPublic = exports2.isValidPrivate = exports2.generateAddress2 = exports2.generateAddress = exports2.isValidChecksumAddress = exports2.toChecksumAddress = exports2.isValidAddress = exports2.Account = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var secp256k1_1 = require_secp256k12();
    var internal_1 = require_internal();
    var constants_1 = require_constants();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    var Account = (
      /** @class */
      function() {
        function Account2(nonce, balance, stateRoot, codeHash) {
          if (nonce === void 0) {
            nonce = new externals_1.BN(0);
          }
          if (balance === void 0) {
            balance = new externals_1.BN(0);
          }
          if (stateRoot === void 0) {
            stateRoot = constants_1.KECCAK256_RLP;
          }
          if (codeHash === void 0) {
            codeHash = constants_1.KECCAK256_NULL;
          }
          this.nonce = nonce;
          this.balance = balance;
          this.stateRoot = stateRoot;
          this.codeHash = codeHash;
          this._validate();
        }
        Account2.fromAccountData = function(accountData) {
          var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
          return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
        };
        Account2.fromRlpSerializedAccount = function(serialized) {
          var values = externals_1.rlp.decode(serialized);
          if (!Array.isArray(values)) {
            throw new Error("Invalid serialized account input. Must be array");
          }
          return this.fromValuesArray(values);
        };
        Account2.fromValuesArray = function(values) {
          var _a2 = __read(values, 4), nonce = _a2[0], balance = _a2[1], stateRoot = _a2[2], codeHash = _a2[3];
          return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
        };
        Account2.prototype._validate = function() {
          if (this.nonce.lt(new externals_1.BN(0))) {
            throw new Error("nonce must be greater than zero");
          }
          if (this.balance.lt(new externals_1.BN(0))) {
            throw new Error("balance must be greater than zero");
          }
          if (this.stateRoot.length !== 32) {
            throw new Error("stateRoot must have a length of 32");
          }
          if (this.codeHash.length !== 32) {
            throw new Error("codeHash must have a length of 32");
          }
        };
        Account2.prototype.raw = function() {
          return [
            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
            (0, types_1.bnToUnpaddedBuffer)(this.balance),
            this.stateRoot,
            this.codeHash
          ];
        };
        Account2.prototype.serialize = function() {
          return externals_1.rlp.encode(this.raw());
        };
        Account2.prototype.isContract = function() {
          return !this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        Account2.prototype.isEmpty = function() {
          return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        return Account2;
      }()
    );
    exports2.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports2.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      var prefix = "";
      if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + "0x";
      }
      var hash2 = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
      var ret = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash2[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports2.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports2.isValidAddress)(hexAddress) && (0, exports2.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports2.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      var nonceBN = new externals_1.BN(nonce);
      if (nonceBN.isZero()) {
        return (0, hash_1.rlphash)([from, null]).slice(-20);
      }
      return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports2.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      (0, assert_1.default)(from.length === 20);
      (0, assert_1.default)(salt.length === 32);
      var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, hash_1.keccak256)(initCode)]));
      return address.slice(-20);
    };
    exports2.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return (0, secp256k1_1.privateKeyVerify)(privateKey);
    };
    exports2.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return (0, secp256k1_1.publicKeyVerify)(publicKey);
    };
    exports2.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
      }
      (0, assert_1.default)(pubKey.length === 64);
      return (0, hash_1.keccak)(pubKey).slice(-20);
    };
    exports2.pubToAddress = pubToAddress;
    exports2.publicToAddress = exports2.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    };
    exports2.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports2.publicToAddress)((0, exports2.privateToPublic)(privateKey));
    };
    exports2.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports2.importPublic = importPublic;
    var zeroAddress = function() {
      var addressLength = 20;
      var addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports2.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      var zeroAddr = (0, exports2.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports2.isZeroAddress = isZeroAddress;
  }
});

// node_modules/ethereumjs-util/dist.browser/address.js
var require_address = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/address.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Address = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var account_1 = require_account();
    var Address = (
      /** @class */
      function() {
        function Address2(buf) {
          (0, assert_1.default)(buf.length === 20, "Invalid address length");
          this.buf = buf;
        }
        Address2.zero = function() {
          return new Address2((0, bytes_1.zeros)(20));
        };
        Address2.fromString = function(str) {
          (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
          return new Address2((0, bytes_1.toBuffer)(str));
        };
        Address2.fromPublicKey = function(pubKey) {
          (0, assert_1.default)(Buffer.isBuffer(pubKey), "Public key should be Buffer");
          var buf = (0, account_1.pubToAddress)(pubKey);
          return new Address2(buf);
        };
        Address2.fromPrivateKey = function(privateKey) {
          (0, assert_1.default)(Buffer.isBuffer(privateKey), "Private key should be Buffer");
          var buf = (0, account_1.privateToAddress)(privateKey);
          return new Address2(buf);
        };
        Address2.generate = function(from, nonce) {
          (0, assert_1.default)(externals_1.BN.isBN(nonce));
          return new Address2((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
        };
        Address2.generate2 = function(from, salt, initCode) {
          (0, assert_1.default)(Buffer.isBuffer(salt));
          (0, assert_1.default)(Buffer.isBuffer(initCode));
          return new Address2((0, account_1.generateAddress2)(from.buf, salt, initCode));
        };
        Address2.prototype.equals = function(address) {
          return this.buf.equals(address.buf);
        };
        Address2.prototype.isZero = function() {
          return this.equals(Address2.zero());
        };
        Address2.prototype.isPrecompileOrSystemAddress = function() {
          var addressBN = new externals_1.BN(this.buf);
          var rangeMin = new externals_1.BN(0);
          var rangeMax = new externals_1.BN("ffff", "hex");
          return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
        };
        Address2.prototype.toString = function() {
          return "0x" + this.buf.toString("hex");
        };
        Address2.prototype.toBuffer = function() {
          return Buffer.from(this.buf);
        };
        return Address2;
      }()
    );
    exports2.Address = Address;
  }
});

// node_modules/ethereumjs-util/dist.browser/signature.js
var require_signature3 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/signature.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashPersonalMessage = exports2.isValidSignature = exports2.fromRpcSig = exports2.toCompactSig = exports2.toRpcSig = exports2.ecrecover = exports2.ecsign = void 0;
    var secp256k1_1 = require_secp256k12();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    function ecsign(msgHash, privateKey, chainId) {
      var _a2 = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a2.signature, recovery = _a2.recid;
      var r2 = Buffer.from(signature.slice(0, 32));
      var s = Buffer.from(signature.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r: r2, s, v: v_1 };
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
      return { r: r2, s, v };
    }
    exports2.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (vBN.eqn(0) || vBN.eqn(1))
        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      var rec = new externals_1.BN(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    var ecrecover = function(msgHash, v, r2, s, chainId) {
      var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
      return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    exports2.ecrecover = ecrecover;
    var toRpcSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports2.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
      var ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports2.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      var buf = (0, bytes_1.toBuffer)(sig);
      var r2;
      var s;
      var v;
      if (buf.length >= 65) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r: r2,
        s
      };
    };
    exports2.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r2, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) {
        homesteadOrLater = true;
      }
      var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r2.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      var rBN = new externals_1.BN(r2);
      var sBN = new externals_1.BN(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports2.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      var prefix = Buffer.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
      return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
    };
    exports2.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/ethereumjs-util/dist.browser/object.js
var require_object = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/object.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineProperties = void 0;
    var assert_1 = __importDefault(require_assert());
    var internal_1 = require_internal();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label) {
        if (label === void 0) {
          label = false;
        }
        if (label) {
          var obj_1 = {};
          self2._fields.forEach(function(field) {
            obj_1[field] = "0x".concat(self2[field].toString("hex"));
          });
          return obj_1;
        }
        return (0, bytes_1.baToJSON)(self2.raw);
      };
      self2.serialize = function serialize() {
        return externals_1.rlp.encode(self2.raw);
      };
      fields.forEach(function(field, i) {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i];
        }
        function setter(v) {
          v = (0, bytes_1.toBuffer)(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = (0, bytes_1.unpadBuffer)(v);
            (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
          }
          self2.raw[i] = v;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer.from((0, internal_1.stripHexPrefix)(data), "hex");
        }
        if (Buffer.isBuffer(data)) {
          data = externals_1.rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d, i) {
            self2[self2._fields[i]] = (0, bytes_1.toBuffer)(d);
          });
        } else if (typeof data === "object") {
          var keys_1 = Object.keys(data);
          fields.forEach(function(field) {
            if (keys_1.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys_1.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
    exports2.defineProperties = defineProperties;
  }
});

// node_modules/ethereumjs-util/dist.browser/index.js
var require_dist5 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/index.js"(exports2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHexString = exports2.getKeys = exports2.fromAscii = exports2.fromUtf8 = exports2.toAscii = exports2.arrayContainsArray = exports2.getBinarySize = exports2.padToEven = exports2.stripHexPrefix = exports2.isHexPrefixed = void 0;
    __exportStar(require_constants(), exports2);
    __exportStar(require_account(), exports2);
    __exportStar(require_address(), exports2);
    __exportStar(require_hash2(), exports2);
    __exportStar(require_signature3(), exports2);
    __exportStar(require_bytes(), exports2);
    __exportStar(require_object(), exports2);
    __exportStar(require_externals(), exports2);
    __exportStar(require_types(), exports2);
    var internal_1 = require_internal();
    Object.defineProperty(exports2, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports2, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports2, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports2, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports2, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports2, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    Object.defineProperty(exports2, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports2, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports2, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports2, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
  }
});

// node_modules/@moralisweb3/common-sol-utils/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@moralisweb3/common-sol-utils/node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode3(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var charCode = source.charCodeAt(psz);
          if (charCode > 255) {
            return;
          }
          var carry = BASE_MAP[charCode];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode3,
        decodeUnsafe,
        decode: decode2
      };
    }
    module2.exports = base;
  }
});

// node_modules/@moralisweb3/common-sol-utils/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@moralisweb3/common-sol-utils/node_modules/bs58/index.js"(exports2, module2) {
    var import_dist208 = __toESM(require_dist());
    var import_dist209 = __toESM(require_dist2());
    var import_dist210 = __toESM(require_dist3());
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/moralis/lib/esm/index.js
var import_dist205 = __toESM(require_dist());
var import_dist206 = __toESM(require_dist2());
var import_dist207 = __toESM(require_dist3());

// node_modules/@moralisweb3/streams/lib/esm/index.js
var import_dist184 = __toESM(require_dist());
var import_dist185 = __toESM(require_dist2());
var import_dist186 = __toESM(require_dist3());

// node_modules/@moralisweb3/api-utils/lib/esm/index.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-core/lib/esm/index.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var ModuleType;
(function(ModuleType2) {
  ModuleType2["API"] = "api";
  ModuleType2["DEFAULT"] = "default";
})(ModuleType || (ModuleType = {}));
var isApiModule = function(moralisClass) {
  if (moralisClass.type === ModuleType.API) {
    return true;
  }
  return false;
};
var CoreErrorCode;
(function(CoreErrorCode2) {
  CoreErrorCode2["GENERIC_CORE_ERROR"] = "C0001";
  CoreErrorCode2["DUPLICATE_MODULE"] = "C0002";
  CoreErrorCode2["MODULE_NOT_FOUND"] = "C0003";
  CoreErrorCode2["VALIDATION_ERROR"] = "C0004";
  CoreErrorCode2["INVALID_ARGUMENT"] = "C0005";
  CoreErrorCode2["REQUEST_ERROR"] = "C0006";
  CoreErrorCode2["NO_DATA_FOUND"] = "C0007";
  CoreErrorCode2["NOT_INITIALIZED"] = "C0008";
  CoreErrorCode2["ALREADY_INITIALIZED"] = "C0009";
  CoreErrorCode2["METHOD_FAILED"] = "C0010";
  CoreErrorCode2["STATE_MACHINE_STARTED"] = "C0011";
  CoreErrorCode2["STATE_MACHINE_NOT_STARTED"] = "C0012";
  CoreErrorCode2["CONFIG_KEY_NOT_EXIST"] = "C0013";
  CoreErrorCode2["CONFIG_INVALID_VALUE"] = "C0014";
  CoreErrorCode2["CONFIG_KEY_ALREADY_EXIST"] = "C0015";
  CoreErrorCode2["INVALID_DATA"] = "C0016";
  CoreErrorCode2["BIG_NUMBER_ERROR"] = "C0500";
  CoreErrorCode2["NOT_IMPLEMENTED"] = "C9000";
})(CoreErrorCode || (CoreErrorCode = {}));
var ApiErrorCode;
(function(ApiErrorCode2) {
  ApiErrorCode2["GENERIC_API_ERROR"] = "A0001";
  ApiErrorCode2["PAGE_LIMIT_EXCEEDED"] = "A0002";
  ApiErrorCode2["API_KEY_NOT_SET"] = "A0003";
  ApiErrorCode2["INVALID_PARAMS"] = "A0004";
  ApiErrorCode2["NOT_FOUND"] = "A0404";
  ApiErrorCode2["NOT_IMPLEMENTED"] = "A9000";
})(ApiErrorCode || (ApiErrorCode = {}));
var AuthErrorCode;
(function(AuthErrorCode2) {
  AuthErrorCode2["GENERIC_AUTH_ERROR"] = "U0001";
  AuthErrorCode2["INCORRECT_NETWORK"] = "U0002";
  AuthErrorCode2["INCORRECT_PARAMETER"] = "U0003";
  AuthErrorCode2["NOT_IMPLEMENTED"] = "U9000";
})(AuthErrorCode || (AuthErrorCode = {}));
var StreamErrorCode;
(function(StreamErrorCode2) {
  StreamErrorCode2["GENERIC_STREAM_ERROR"] = "S0001";
  StreamErrorCode2["INCORRECT_NETWORK"] = "S0002";
  StreamErrorCode2["INCORRECT_PARAMETER"] = "S0003";
  StreamErrorCode2["INVALID_SIGNATURE"] = "S0004";
  StreamErrorCode2["NOT_IMPLEMENTED"] = "S9000";
})(StreamErrorCode || (StreamErrorCode = {}));
var MoralisError = (
  /** @class */
  function(_super) {
    __extends(MoralisError2, _super);
    function MoralisError2(_a2) {
      var message = _a2.message, code = _a2.code, details = _a2.details, cause = _a2.cause;
      var _this = (
        // @ts-ignore Typescript does not recognise 'cause' ? OR we have wrong TS version
        _super.call(this, MoralisError2.makeMessage(message, code), { cause }) || this
      );
      _this.name = "Moralis SDK Error";
      _this.isMoralisError = true;
      Object.setPrototypeOf(_this, MoralisError2.prototype);
      _this.code = code;
      _this.details = details;
      if (cause) {
        _this.cause = cause;
        if ("stack" in cause) {
          _this.stack = "".concat(_this.stack, "\nCAUSE: ").concat(cause.stack);
        }
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisError2);
      }
      return _this;
    }
    MoralisError2.makeMessage = function(message, code) {
      return "[".concat(code, "] ").concat(message);
    };
    return MoralisError2;
  }(Error)
);
var CoreError = (
  /** @class */
  function(_super) {
    __extends(CoreError2, _super);
    function CoreError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK Core Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, CoreError2);
      }
      return _this;
    }
    return CoreError2;
  }(MoralisError)
);
var MoralisApiError = (
  /** @class */
  function(_super) {
    __extends(MoralisApiError2, _super);
    function MoralisApiError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK API Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisApiError2);
      }
      return _this;
    }
    return MoralisApiError2;
  }(MoralisError)
);
var MoralisAuthError = (
  /** @class */
  function(_super) {
    __extends(MoralisAuthError2, _super);
    function MoralisAuthError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Auth Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisAuthError2);
      }
      return _this;
    }
    return MoralisAuthError2;
  }(MoralisError)
);
var MoralisStreamError = (
  /** @class */
  function(_super) {
    __extends(MoralisStreamError2, _super);
    function MoralisStreamError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Stream Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisStreamError2);
      }
      return _this;
    }
    return MoralisStreamError2;
  }(MoralisError)
);
var isMoralisError = function(error) {
  if (!(error instanceof Error)) {
    return false;
  }
  if (!error.isMoralisError) {
    return false;
  }
  return true;
};
var Modules = (
  /** @class */
  function() {
    function Modules2() {
      this.modules = /* @__PURE__ */ new Map();
    }
    Modules2.prototype.register = function(module2) {
      if (this.modules.has(module2.name)) {
        throw new CoreError({
          code: CoreErrorCode.DUPLICATE_MODULE,
          message: 'The module "'.concat(module2.name, '" has already been registered.')
        });
      }
      this.modules.set(module2.name, module2);
      module2.setup();
    };
    Modules2.prototype.get = function(name) {
      var module2 = this.modules.get(name);
      if (!module2) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
      return module2;
    };
    Modules2.prototype.tryGet = function(name) {
      return this.modules.get(name) || null;
    };
    Modules2.prototype.has = function(name) {
      return this.modules.has(name);
    };
    Modules2.prototype.getApi = function(name) {
      var module2 = this.modules.get(name);
      if (!module2 || !isApiModule(module2)) {
        throw new CoreError({
          code: CoreErrorCode.MODULE_NOT_FOUND,
          message: 'No ApiModule found with the name "'.concat(name, '"')
        });
      }
      return module2;
    };
    Modules2.prototype.remove = function(name) {
      var isRemoved = this.modules.delete(name);
      if (!isRemoved) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
    };
    Modules2.prototype.list = function() {
      return Array.from(this.modules.values());
    };
    Modules2.prototype.listNames = function() {
      return this.list().map(function(module2) {
        return module2.name;
      });
    };
    Modules2.prototype.listApis = function() {
      return this.list().filter(isApiModule);
    };
    return Modules2;
  }()
);
var CoreConfig = {
  logLevel: {
    name: "logLevel",
    defaultValue: "info"
  },
  buidEnvironment: {
    name: "buidEnvironment",
    defaultValue: "browser"
  },
  defaultNetwork: {
    name: "defaultNetwork",
    defaultValue: "Evm"
  },
  product: {
    name: "product",
    defaultValue: void 0
  },
  /**
   * @description Maximal number of request retries.
   */
  maxRetries: {
    name: "maxRetries",
    defaultValue: 2
  }
};
var logLevelMap = {
  verbose: 5,
  debug: 4,
  info: 3,
  warning: 2,
  error: 1,
  off: 0
};
var LoggerController = (
  /** @class */
  function() {
    function LoggerController2(moduleName, config) {
      this.moduleName = moduleName;
      this.config = config;
    }
    LoggerController2.create = function(moduleName, core2) {
      return new LoggerController2(moduleName, core2.config);
    };
    Object.defineProperty(LoggerController2.prototype, "level", {
      get: function() {
        return this.config.get(CoreConfig.logLevel);
      },
      enumerable: false,
      configurable: true
    });
    LoggerController2.prototype._transport = function(level, message, details) {
      var logMessage = this._makeLogMessage(message);
      var args = [logMessage, details].filter(function(arg) {
        return arg != null;
      });
      switch (level) {
        case "error":
          console.error.apply(console, args);
          break;
        case "warn":
          console.warn.apply(console, args);
          break;
        case "log":
          console.log.apply(console, args);
          break;
      }
    };
    LoggerController2.prototype._shouldLog = function(logLevel) {
      var level = logLevelMap[logLevel];
      var acceptedLevel = logLevelMap[this.level];
      if (level > acceptedLevel) {
        return false;
      }
      return true;
    };
    LoggerController2.prototype._makeLogMessage = function(message) {
      return "Moralis[".concat(this.moduleName, "]: ").concat(message);
    };
    LoggerController2.prototype.error = function(error, details) {
      if (!this._shouldLog("error")) {
        return;
      }
      var message = "";
      if (typeof error === "string") {
        message = error;
      } else if (isMoralisError(error)) {
        message = error.message;
        if (error.details) {
          if (details) {
            details._errorDetails = error.details;
          } else {
            details = {
              _errorDetails: error.details
            };
          }
        }
      } else {
        message = error.message;
      }
      this._transport("error", message, details);
    };
    LoggerController2.prototype.warn = function(message, details) {
      if (!this._shouldLog("warning")) {
        return;
      }
      this._transport("warn", message, details);
    };
    LoggerController2.prototype.info = function(message, details) {
      if (!this._shouldLog("info")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.debug = function(message, details) {
      if (!this._shouldLog("debug")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.verbose = function(message, details) {
      if (!this._shouldLog("verbose")) {
        return;
      }
      this._transport("log", message, details);
    };
    return LoggerController2;
  }()
);
var Config = (
  /** @class */
  function() {
    function Config2() {
      this.items = /* @__PURE__ */ new Map();
    }
    Config2.prototype.registerKey = function(key, validator) {
      if (this.items.has(key.name)) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,
          message: 'Key "'.concat(key.name, '" is already registered')
        });
      }
      this.items.set(key.name, { key, value: key.defaultValue, validator });
    };
    Config2.prototype.getKeys = function() {
      return Array.from(this.items.keys());
    };
    Config2.prototype.hasKey = function(key) {
      return this.items.has(key.name);
    };
    Config2.prototype.get = function(keyOrName) {
      return this.getItem(keyOrName).value;
    };
    Config2.prototype.set = function(keyOrName, value) {
      var item = this.getItem(keyOrName);
      var error = item.validator ? item.validator(value) : null;
      if (error) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_INVALID_VALUE,
          message: 'Cannot set this config. Invalid value for "'.concat(item.key.name, '". ').concat(error)
        });
      }
      item.value = value;
    };
    Config2.prototype.merge = function(values) {
      var _this = this;
      Object.keys(values).forEach(function(keyName) {
        _this.set(keyName, values[keyName]);
      });
    };
    Config2.prototype.reset = function() {
      this.items.forEach(function(item) {
        item.value = item.key.defaultValue;
      });
    };
    Config2.prototype.getItem = function(keyOrName) {
      var keyName = typeof keyOrName === "string" ? keyOrName : keyOrName.name;
      var item = this.items.get(keyName);
      if (!item) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_NOT_EXIST,
          message: 'Key "'.concat(keyName, '" is unregistered. Have you registered all required modules?')
        });
      }
      return item;
    };
    return Config2;
  }()
);
var CoreConfigSetup = (
  /** @class */
  function() {
    function CoreConfigSetup2() {
    }
    CoreConfigSetup2.register = function(config) {
      config.registerKey(CoreConfig.logLevel);
      config.registerKey(CoreConfig.buidEnvironment);
      config.registerKey(CoreConfig.defaultNetwork);
      config.registerKey(CoreConfig.product);
      config.registerKey(CoreConfig.maxRetries);
    };
    return CoreConfigSetup2;
  }()
);
var LIB_VERSION = "2.27.2";
var MoralisData = (
  /** @class */
  /* @__PURE__ */ function() {
    function MoralisData2() {
    }
    return MoralisData2;
  }()
);
var MoralisDataObject = (
  /** @class */
  function(_super) {
    __extends(MoralisDataObject2, _super);
    function MoralisDataObject2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return MoralisDataObject2;
  }(MoralisData)
);
var BigNumberFormatter = (
  /** @class */
  function() {
    function BigNumberFormatter2() {
    }
    BigNumberFormatter2.toDecimal = function(value, decimals) {
      if (decimals < 0) {
        throw new CoreError({
          code: CoreErrorCode.BIG_NUMBER_ERROR,
          message: "Invalid decimals"
        });
      }
      var result = value.toString();
      if (decimals === 0) {
        return result;
      }
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      result = result.padStart(decimals, "0");
      var dot = result.length - decimals;
      var whole = dot === 0 ? "0" : result.substring(0, dot);
      var fraction = result.substring(dot);
      result = "".concat(whole, ".").concat(fraction);
      while (result[result.length - 1] === "0" && result[result.length - 2] !== ".") {
        result = result.substring(0, result.length - 1);
      }
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    BigNumberFormatter2.toHex = function(value) {
      var result = value.toString(16);
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      if (result.length % 2 !== 0) {
        result = "0".concat(result);
      }
      result = "0x".concat(result);
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    return BigNumberFormatter2;
  }()
);
var BigNumberParser = (
  /** @class */
  function() {
    function BigNumberParser2() {
    }
    BigNumberParser2.parseInt = function(value) {
      assertNotEmpty(value);
      if (typeof value === "string") {
        if (value.length === 0) {
          throw createError("Value is empty");
        }
        var isNegativeHex = value.startsWith("-0x");
        if (isNegativeHex) {
          value = value.substring(1);
        }
        var result = BigInt(value);
        if (isNegativeHex) {
          result *= BigInt(-1);
        }
        return result;
      }
      return BigInt(value);
    };
    BigNumberParser2.parseDecimal = function(value, decimals) {
      assertNotEmpty(value);
      var multiplier = getMultiplier(decimals);
      if (typeof value === "number") {
        return BigInt(value) * multiplier;
      }
      if (typeof value === "bigint") {
        return value * multiplier;
      }
      var isNegative = value.startsWith("-");
      if (isNegative) {
        value = value.substring(1);
      }
      var fragments = value.split(".");
      if (fragments.length > 2) {
        throw createError("Value has more than one dot");
      }
      if (fragments.some(function(fragment) {
        return !fragment;
      })) {
        throw createError("Value has empty fragments");
      }
      var result;
      if (fragments.length === 1) {
        result = BigInt(fragments[0]) * multiplier;
      } else {
        var whole = fragments[0];
        var fraction = fragments[1];
        if (fraction.length > decimals) {
          throw createError("Value has too long fractional part: ".concat(fraction.length, ", max: ").concat(decimals));
        }
        if (fraction.length < decimals) {
          fraction = fraction.padEnd(decimals, "0");
        }
        result = BigInt(whole) * multiplier + BigInt(fraction);
      }
      if (isNegative) {
        result *= BigInt(-1);
      }
      return result;
    };
    return BigNumberParser2;
  }()
);
function assertNotEmpty(value) {
  if (value === null) {
    throw createError("Value is null");
  }
  if (value === void 0) {
    throw createError("Value is undefined");
  }
}
function getMultiplier(decimals) {
  if (decimals < 0) {
    throw createError("Invalid decimals");
  }
  var ten = BigInt(10);
  var multiplier = BigInt(1);
  while (decimals-- > 0) {
    multiplier *= ten;
  }
  return multiplier;
}
function createError(message) {
  return new CoreError({
    code: CoreErrorCode.BIG_NUMBER_ERROR,
    message
  });
}
var BigNumber = (
  /** @class */
  function() {
    function BigNumber3(value) {
      this.value = value;
    }
    BigNumber3.create = function(value) {
      if (value instanceof BigNumber3) {
        return value;
      }
      return new BigNumber3(BigNumberParser.parseInt(value));
    };
    BigNumber3.fromJSON = function(json) {
      return BigNumber3.create(json);
    };
    BigNumber3.fromDecimal = function(value, decimals) {
      if (decimals === void 0) {
        decimals = 0;
      }
      return new BigNumber3(BigNumberParser.parseDecimal(value, decimals));
    };
    BigNumber3.prototype.toBigInt = function() {
      return this.value;
    };
    BigNumber3.prototype.add = function(value) {
      return new BigNumber3(this.value + asBigInt(value));
    };
    BigNumber3.prototype.sub = function(value) {
      return new BigNumber3(this.value - asBigInt(value));
    };
    BigNumber3.prototype.mul = function(value) {
      return new BigNumber3(this.value * asBigInt(value));
    };
    BigNumber3.prototype.div = function(value) {
      return new BigNumber3(this.value / asBigInt(value));
    };
    BigNumber3.prototype.equals = function(value) {
      return this.value === value.toBigInt();
    };
    BigNumber3.prototype.toDecimal = function(decimals) {
      return BigNumberFormatter.toDecimal(this.value, decimals);
    };
    BigNumber3.prototype.toString = function() {
      return this.value.toString();
    };
    BigNumber3.prototype.toHex = function() {
      return BigNumberFormatter.toHex(this.value);
    };
    BigNumber3.prototype.toJSON = function() {
      return this.toHex();
    };
    return BigNumber3;
  }()
);
function asBigInt(value) {
  return BigNumber.create(value).toBigInt();
}
var dateInputToDate = function(value) {
  return typeof value === "string" ? new Date(value) : value;
};
var Core = (
  /** @class */
  function() {
    function Core2(modules, config, logger16) {
      var _this = this;
      this.modules = modules;
      this.config = config;
      this.logger = logger16;
      this.name = Core2.moduleName;
      this._isStarted = false;
      this.registerModules = function(modules2) {
        modules2.forEach(_this.registerModule);
      };
      this.registerModule = function(module2) {
        if ("create" in module2) {
          module2 = module2.create(_this);
        }
        _this.modules.register(module2);
        _this.logger.verbose("Module registered", { module: module2.name });
      };
      this.getModule = function(name) {
        return _this.modules.get(name);
      };
      this.start = function(providedConfig) {
        return __awaiter(_this, void 0, void 0, function() {
          var allModules;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (this._isStarted) {
                  throw new MoralisError({
                    message: "Modules are started already. This method should be called only one time.",
                    code: CoreErrorCode.ALREADY_INITIALIZED
                  });
                }
                this._isStarted = true;
                allModules = this.modules.list();
                if (providedConfig) {
                  this.config.merge(providedConfig);
                }
                this.logger.verbose("Starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [4, Promise.all(allModules.map(function(module2) {
                  return module2.start();
                }))];
              case 1:
                _a2.sent();
                this.logger.verbose("Finished starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
    Core2.create = function() {
      var modules = new Modules();
      var config = new Config();
      var logger16 = new LoggerController(Core2.moduleName, config);
      var core2 = new Core2(modules, config, logger16);
      CoreConfigSetup.register(config);
      return core2;
    };
    Object.defineProperty(Core2.prototype, "isStarted", {
      get: function() {
        return this._isStarted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Core2.prototype, "BigNumber", {
      get: function() {
        return BigNumber;
      },
      enumerable: false,
      configurable: true
    });
    Core2.moduleName = "core";
    Core2.libVersion = LIB_VERSION;
    return Core2;
  }()
);
var CoreProvider = (
  /** @class */
  function() {
    function CoreProvider2() {
    }
    CoreProvider2.getDefault = function() {
      if (!this.core) {
        throw new CoreError({
          code: CoreErrorCode.NOT_INITIALIZED,
          message: "Default instance of Core is not set"
        });
      }
      return this.core;
    };
    CoreProvider2.setDefault = function(core2) {
      if (this.core) {
        throw new CoreError({
          code: CoreErrorCode.ALREADY_INITIALIZED,
          message: "Default instance of Core is already set"
        });
      }
      this.core = core2;
    };
    return CoreProvider2;
  }()
);
var Module = (
  /** @class */
  function() {
    function Module2(name, core2, type) {
      if (type === void 0) {
        type = ModuleType.DEFAULT;
      }
      this.name = name;
      this.core = core2;
      this.type = type;
      this.logger = LoggerController.create(this.name, this.core);
    }
    Module2.prototype.cleanUp = function() {
      this.core.modules.remove(this.name);
    };
    return Module2;
  }()
);
var ApiModule = (
  /** @class */
  function(_super) {
    __extends(ApiModule2, _super);
    function ApiModule2(name, core2, baseUrlProvider) {
      var _this = _super.call(this, name, core2, ModuleType.API) || this;
      _this.baseUrlProvider = baseUrlProvider;
      return _this;
    }
    Object.defineProperty(ApiModule2.prototype, "baseUrl", {
      /**
       * @description The base URL of the API.
       */
      get: function() {
        if (!this._baseUrl) {
          this._baseUrl = this.baseUrlProvider();
        }
        return this._baseUrl;
      },
      enumerable: false,
      configurable: true
    });
    return ApiModule2;
  }(Module)
);
var UnreachableError = new CoreError({
  code: CoreErrorCode.GENERIC_CORE_ERROR,
  message: "Incorrect type provided, code should not reach here"
});
var AxiosRetry = (
  /** @class */
  function() {
    function AxiosRetry2() {
    }
    AxiosRetry2.request = function(retryConfig, requestConfig) {
      var _a2;
      return __awaiter(this, void 0, void 0, function() {
        var attempt, response, e_1, axiosError;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              attempt = 1;
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, axios_default.request(requestConfig)];
            case 2:
              response = _b.sent();
              return [2, response];
            case 3:
              e_1 = _b.sent();
              if (attempt >= retryConfig.maxRetries) {
                throw e_1;
              }
              if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {
                throw e_1;
              }
              if (!axios_default.isAxiosError(e_1)) {
                throw e_1;
              }
              axiosError = e_1;
              if (!((_a2 = axiosError.response) === null || _a2 === void 0 ? void 0 : _a2.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {
                throw e_1;
              }
              if (retryConfig.beforeRetry) {
                retryConfig.beforeRetry(attempt, axiosError);
              }
              return [3, 4];
            case 4:
              attempt++;
              return [3, 1];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AxiosRetry2;
  }()
);
var isApiRequestError = function(error) {
  if (!(error instanceof AxiosError)) {
    return false;
  }
  if (error.code !== AxiosError.ERR_BAD_REQUEST && error.code !== AxiosError.ERR_BAD_RESPONSE) {
    return false;
  }
  return true;
};
var getMessageFromApiRequestError = function(error) {
  var _a2 = error.response.data, message = _a2.message, details = _a2.details;
  var result = "Unknown error (no error info returned from API)";
  if (Array.isArray(message)) {
    result = message.join(", ");
  } else if (typeof message === "string") {
    result = message;
  }
  if (details) {
    result += " ".concat(JSON.stringify(details));
  }
  return result;
};
var RequestController = (
  /** @class */
  function() {
    function RequestController2(config, logger16) {
      this.config = config;
      this.logger = logger16;
    }
    RequestController2.create = function(core2) {
      return new RequestController2(core2.config, core2.logger);
    };
    RequestController2.prototype.request = function(config) {
      return __awaiter(this, void 0, void 0, function() {
        var maxRetries, retryConfig, response, e_1, error;
        var _this = this;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.logger.verbose("[RequestController] request started", {
                url: config.url,
                method: config.method,
                body: config.data
              });
              maxRetries = this.config.get(CoreConfig.maxRetries);
              retryConfig = {
                maxRetries,
                allowedMethods: ["GET", "OPTIONS"],
                allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],
                beforeRetry: function(attempt, error2) {
                  _this.logger.verbose("[RequestController] request retry", {
                    url: config.url,
                    method: config.method,
                    body: config.data,
                    error: error2,
                    attempt
                  });
                }
              };
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, AxiosRetry.request(retryConfig, __assign(__assign({}, config), { timeout: 2e4, maxContentLength: Infinity, maxBodyLength: Infinity }))];
            case 2:
              response = _a2.sent();
              return [2, response.data];
            case 3:
              e_1 = _a2.sent();
              error = this.makeError(e_1);
              this.logger.verbose("[RequestController] request error", {
                url: config.url,
                method: config.method,
                body: config.data,
                cause: error.cause,
                name: error.name,
                details: error.details
              });
              throw error;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    RequestController2.prototype.makeError = function(error) {
      if (isApiRequestError(error)) {
        var _a2 = error.response, status_1 = _a2.status, statusText = _a2.statusText;
        var apiMessage = getMessageFromApiRequestError(error);
        return new CoreError({
          code: CoreErrorCode.REQUEST_ERROR,
          message: "Request failed, ".concat(statusText, "(").concat(status_1, "): ").concat(apiMessage),
          cause: error,
          details: {
            status: status_1,
            response: error.response
          }
        });
      }
      var err = error instanceof Error ? error : new Error("".concat(error));
      return new CoreError({
        code: CoreErrorCode.REQUEST_ERROR,
        message: "Request failed: ".concat(err.message),
        cause: err
      });
    };
    RequestController2.prototype.post = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "POST",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.put = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "PUT",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.get = function(url, searchParams, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "GET",
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    RequestController2.prototype.delete = function(url, searchParams, body, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "DELETE",
            data: body,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    return RequestController2;
  }()
);
var OperationRequestValidator = (
  /** @class */
  function() {
    function OperationRequestValidator2(operation) {
      this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], operation.urlPathParamNames || [], true), operation.urlSearchParamNames || [], true), operation.bodyParamNames || [], true);
    }
    OperationRequestValidator2.prototype.validate = function(request) {
      var requestParamNames = Object.keys(request);
      for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {
        var paramName = requestParamNames_1[_i];
        if (!this.allParamNames.includes(paramName)) {
          var allParamsNames = this.allParamNames.join(", ");
          throw new MoralisError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Request contains unknown parameter: ".concat(paramName, ". This operation supports the following parameters: ").concat(allParamsNames)
          });
        }
      }
    };
    return OperationRequestValidator2;
  }()
);
var OperationType;
(function(OperationType2) {
  OperationType2["NON_NULLABLE"] = "nonNullable";
  OperationType2["NULLABLE"] = "nullable";
  OperationType2["PAGINATED"] = "paginated";
})(OperationType || (OperationType = {}));
var NextPaginatedRequestResolver = (
  /** @class */
  function() {
    function NextPaginatedRequestResolver2() {
    }
    NextPaginatedRequestResolver2.resolve = function(firstPageIndex, request, pagination) {
      if (pagination.cursor) {
        return __assign(__assign({}, request), { cursor: pagination.cursor });
      }
      if (typeof pagination.total === "number") {
        var currentPage = firstPageIndex === 1 ? pagination.page : pagination.page + 1;
        var hasNextPage = pagination.total > pagination.pageSize * currentPage;
        if (hasNextPage) {
          var offset = (pagination.page + 1) * (request.limit || 500);
          return __assign(__assign({}, request), { offset });
        }
      }
      return null;
    };
    return NextPaginatedRequestResolver2;
  }()
);
var PaginationReader = (
  /** @class */
  function() {
    function PaginationReader2() {
    }
    PaginationReader2.read = function(jsonResponse) {
      var _a2, _b;
      return {
        page: (_a2 = jsonResponse.page) !== null && _a2 !== void 0 ? _a2 : 0,
        pageSize: (_b = jsonResponse.page_size) !== null && _b !== void 0 ? _b : 0,
        total: jsonResponse.total,
        cursor: jsonResponse.cursor
      };
    };
    return PaginationReader2;
  }()
);
var ResponseAdapter = (
  /** @class */
  function() {
    function ResponseAdapter2(jsonResponse, getResponse) {
      this.jsonResponse = jsonResponse;
      this.getResponse = getResponse;
    }
    Object.defineProperty(ResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResponse();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    ResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return ResponseAdapter2;
  }()
);
var PaginatedResponseAdapter = (
  /** @class */
  function() {
    function PaginatedResponseAdapter2(pagination, jsonResponse, getResult, nextHandler) {
      var _this = this;
      this.pagination = pagination;
      this.jsonResponse = jsonResponse;
      this.getResult = getResult;
      this.nextHandler = nextHandler;
      this.hasNext = function() {
        return !!_this.nextHandler;
      };
      this.next = function() {
        if (!_this.nextHandler) {
          throw new MoralisError({
            code: CoreErrorCode.NO_DATA_FOUND,
            message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
          });
        }
        return _this.nextHandler();
      };
    }
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResult();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return PaginatedResponseAdapter2;
  }()
);
var toCamel = function(value) {
  return value.replace(/([-_][a-z])/gi, function($1) {
    return $1.toUpperCase().replace("-", "").replace("_", "");
  });
};
var isObject = function(o) {
  return o === Object(o) && !Array.isArray(o) && typeof o !== "function";
};
var toCamelCase = function(data) {
  if (isObject(data)) {
    var n_1 = {};
    Object.keys(data).forEach(function(k) {
      n_1[toCamel(k)] = toCamelCase(data[k]);
    });
    return n_1;
  }
  if (Array.isArray(data)) {
    return data.map(function(i) {
      return toCamelCase(i);
    });
  }
  return data;
};
function maybe(value, transform) {
  if (value == null) {
    return void 0;
  }
  if (transform) {
    return transform(value);
  }
  return value;
}

// node_modules/@moralisweb3/api-utils/lib/esm/index.js
var ApiUtilsConfig = {
  apiKey: {
    name: "apiKey",
    defaultValue: null
  }
};
var _a;
var Environment;
(function(Environment2) {
  Environment2["BROWSER"] = "browser";
  Environment2["NODE"] = "node";
})(Environment || (Environment = {}));
var sdkNameForEnvironment = (_a = {}, _a[Environment.BROWSER] = "Javascript SDK", _a[Environment.NODE] = "NodeJS SDK", _a);
var currentEnvironment = getEnvironment();
function detectIsBrowser() {
  try {
    return typeof window !== "undefined" && typeof window.document !== "undefined";
  } catch (error) {
    return false;
  }
}
function getEnvironment() {
  if (detectIsBrowser()) {
    return Environment.BROWSER;
  }
  return Environment.NODE;
}
function getSdkName(environment, product) {
  if (product) {
    return product;
  }
  return sdkNameForEnvironment[environment];
}
var getSdkDetailsHeaders = function(product) {
  var sdkName = getSdkName(currentEnvironment, product);
  return {
    "x-moralis-platform": sdkName,
    "x-moralis-platform-version": Core.libVersion,
    "x-moralis-build-target": currentEnvironment
  };
};
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign2 = function() {
  __assign2 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var OperationRequestBuilder = (
  /** @class */
  function() {
    function OperationRequestBuilder2(operation, core2) {
      this.operation = operation;
      this.core = core2;
    }
    OperationRequestBuilder2.prototype.prepareUrl = function(baseUrl, request) {
      var _this = this;
      var _a2;
      var urlParams = this.operation.getRequestUrlParams(request, this.core);
      var urlPath = this.operation.urlPathPattern;
      for (var _i = 0, _b = (_a2 = this.operation.urlPathParamNames) !== null && _a2 !== void 0 ? _a2 : []; _i < _b.length; _i++) {
        var paramName = _b[_i];
        var paramValue = urlParams[paramName];
        if (paramValue === void 0 || paramValue === null) {
          throw new Error("Param ".concat(paramName, " is required"));
        }
        urlPath = urlPath.replace("{".concat(paramName, "}"), paramValue);
      }
      var url = "".concat(baseUrl).concat(urlPath);
      var urlSearchParams = {};
      Object.keys(urlParams).filter(function(paramName2) {
        var _a3;
        return !((_a3 = _this.operation.urlPathParamNames) === null || _a3 === void 0 ? void 0 : _a3.includes(paramName2));
      }).forEach(function(paramName2) {
        var paramValue2 = urlParams[paramName2];
        if (paramValue2 !== void 0 && paramValue2 !== null) {
          urlSearchParams[paramName2] = paramValue2;
        }
      });
      return { url, urlSearchParams };
    };
    OperationRequestBuilder2.prototype.prepareBody = function(request) {
      if (!this.operation.bodyType && !this.operation.getRequestBody) {
        return void 0;
      }
      if (!this.operation.getRequestBody) {
        throw new Error("getRequestBody is not implemented for operation ".concat(this.operation.name));
      }
      if (!this.operation.bodyParamNames) {
        throw new Error("bodyParamNames are empty for operation ".concat(this.operation.name));
      }
      var body = this.operation.getRequestBody(request, this.core);
      if (this.operation.bodyType === "properties") {
        return body;
      }
      if (this.operation.bodyType === "raw") {
        return body;
      }
      throw new Error("Not supported body type: ".concat(this.operation.bodyType));
    };
    OperationRequestBuilder2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders(product);
      headers["x-api-key"] = apiKey;
      return headers;
    };
    return OperationRequestBuilder2;
  }()
);
var OperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function OperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse;
          var _this2 = this;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                return [2, new ResponseAdapter(jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                })];
            }
          });
        });
      };
      if (operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    return OperationResolver2;
  }()
);
function isNotFoundError(e) {
  var _a2;
  if (isMoralisError(e)) {
    if (((_a2 = e.details) === null || _a2 === void 0 ? void 0 : _a2.status) === 404) {
      return true;
    }
    if (e.code === ApiErrorCode.NOT_FOUND) {
      return true;
    }
  }
  return false;
}
var NullableOperationResolver = (
  /** @class */
  function() {
    function NullableOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var result, e_1;
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                return [4, this._fetch(request)];
              case 2:
                result = _a2.sent();
                if (!result.raw || typeof result.raw === "object" && Object.keys(result.raw).length === 0) {
                  throw new MoralisApiError({
                    code: ApiErrorCode.NOT_FOUND,
                    message: "The resource is not found"
                  });
                }
                return [2, result];
              case 3:
                e_1 = _a2.sent();
                if (isNotFoundError(e_1)) {
                  return [2, null];
                }
                throw e_1;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      if (!operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    NullableOperationResolver2.prototype._fetch = function(request) {
      return __awaiter2(this, void 0, void 0, function() {
        var _a2, url, urlSearchParams, body, jsonResponse;
        var _this = this;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
              body = this.requestBuilder.prepareBody(request);
              return [4, this.requestController.request({
                method: this.operation.method,
                url,
                params: urlSearchParams,
                headers: this.requestBuilder.prepareHeaders(),
                data: body
              })];
            case 1:
              jsonResponse = _b.sent();
              return [2, new ResponseAdapter(jsonResponse, function() {
                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);
              })];
          }
        });
      });
    };
    return NullableOperationResolver2;
  }()
);
var PaginatedOperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function PaginatedOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse, pagination, nextRequest;
          var _this2 = this;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                pagination = PaginationReader.read(jsonResponse);
                nextRequest = NextPaginatedRequestResolver.resolve(this.operation.firstPageIndex, request, pagination);
                return [2, new PaginatedResponseAdapter(pagination, jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                }, nextRequest ? function() {
                  return _this2.fetch(nextRequest);
                } : void 0)];
            }
          });
        });
      };
      if (operation.firstPageIndex !== 0 && operation.firstPageIndex !== 1) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for firstPageIndex property"));
      }
    }
    return PaginatedOperationResolver2;
  }()
);
var OperationV3Resolver = (
  /** @class */
  function() {
    function OperationV3Resolver2(operation, baseUrl, core2) {
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestController = RequestController.create(this.core);
    }
    OperationV3Resolver2.prototype.request = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var urlParamNames, requestJSON, url, searchParams, bodyJSON, responseJson;
        var _this = this;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              urlParamNames = this.operation.parameterNames.filter(function(name) {
                return _this.operation.routePattern.includes("{".concat(name, "}"));
              });
              requestJSON = this.operation.serializeRequest ? this.operation.serializeRequest(request) : {};
              url = urlParamNames.reduce(function(current, name) {
                var value = requestJSON[name];
                current = current.replace("{".concat(name, "}"), String(value));
                return current;
              }, this.operation.routePattern);
              searchParams = this.operation.parameterNames.filter(function(name) {
                return !urlParamNames.includes(name);
              }).reduce(function(current, name) {
                current[name] = requestJSON[name];
                return current;
              }, {});
              bodyJSON = body && this.operation.serializeBody ? this.operation.serializeBody(body) : void 0;
              return [4, this.requestController.request({
                url,
                params: searchParams,
                baseURL: this.resolveBaseUrl(request),
                method: this.operation.httpMethod,
                data: bodyJSON,
                headers: this.prepareHeaders()
              })];
            case 1:
              responseJson = _a2.sent();
              if (!responseJson || !this.operation.parseResponse) {
                if (this.operation.hasResponse) {
                  throw new Error("Expected response, but API has returned empty response");
                }
                return [2, {
                  response: null,
                  responseJson: null
                }];
              }
              return [2, {
                response: this.operation.parseResponse(responseJson),
                responseJson
              }];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolve = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              return [2, _a2.sent().response];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var data;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              data = _a2.sent();
              return [2, new ResponseAdapter(data.responseJson, function() {
                return data.response;
              })];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolveBaseUrl = function(request) {
      return typeof this.baseUrl === "string" ? this.baseUrl : this.baseUrl(request);
    };
    OperationV3Resolver2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders();
      headers["x-api-key"] = "".concat(apiKey);
      headers["Authorization"] = "Bearer ".concat(apiKey);
      if (product) {
        headers["x-moralis-product"] = product;
      }
      return headers;
    };
    return OperationV3Resolver2;
  }()
);
var PaginatedResponseV3Adapter = (
  /** @class */
  function() {
    function PaginatedResponseV3Adapter2(response, json, nextHandler) {
      this.response = response;
      this.json = json;
      this.nextHandler = nextHandler;
    }
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "result", {
      get: function() {
        if (!this.response.result) {
          throw new Error("No result");
        }
        return this.response.result;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "pagination", {
      get: function() {
        return {
          total: this.response.total || 0,
          page: this.response.page || 0,
          pageSize: this.response.pageSize || 0,
          cursor: this.response.cursor
        };
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseV3Adapter2.prototype.hasNext = function() {
      return !!this.nextHandler;
    };
    PaginatedResponseV3Adapter2.prototype.next = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          if (!this.nextHandler) {
            throw new MoralisError({
              code: CoreErrorCode.NO_DATA_FOUND,
              message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
            });
          }
          return [2, this.nextHandler()];
        });
      });
    };
    PaginatedResponseV3Adapter2.prototype.raw = function() {
      return this.json;
    };
    PaginatedResponseV3Adapter2.prototype.toJSON = function() {
      return this.json;
    };
    return PaginatedResponseV3Adapter2;
  }()
);
var PaginatedOperationV3Resolver = (
  /** @class */
  function() {
    function PaginatedOperationV3Resolver2(operation, baseUrl, core2) {
      this.resolver = new OperationV3Resolver(operation, baseUrl, core2);
    }
    PaginatedOperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var data, nextHandler;
        var _this = this;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.resolver.request(request, body)];
            case 1:
              data = _a2.sent();
              nextHandler = null;
              if (data.responseJson.cursor) {
                nextHandler = function() {
                  return __awaiter2(_this, void 0, void 0, function() {
                    var nextRequest;
                    return __generator2(this, function(_a3) {
                      nextRequest = __assign2(__assign2({}, request), { cursor: data.response.cursor });
                      return [2, this.fetch(nextRequest, body)];
                    });
                  });
                };
              }
              return [2, new PaginatedResponseV3Adapter(data.response, data.responseJson, nextHandler)];
          }
        });
      });
    };
    return PaginatedOperationV3Resolver2;
  }()
);
var ApiUtilsConfigSetup = (
  /** @class */
  function() {
    function ApiUtilsConfigSetup2() {
    }
    ApiUtilsConfigSetup2.register = function(config) {
      if (!config.hasKey(ApiUtilsConfig.apiKey)) {
        config.registerKey(ApiUtilsConfig.apiKey);
      }
    };
    return ApiUtilsConfigSetup2;
  }()
);
var ApiUtils = (
  /** @class */
  function(_super) {
    __extends2(ApiUtils2, _super);
    function ApiUtils2(core2) {
      return _super.call(this, ApiUtils2.moduleName, core2) || this;
    }
    ApiUtils2.create = function(core2) {
      return new ApiUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    ApiUtils2.prototype.setup = function() {
      ApiUtilsConfigSetup.register(this.core.config);
    };
    ApiUtils2.prototype.start = function() {
    };
    ApiUtils2.moduleName = "api";
    return ApiUtils2;
  }(Module)
);

// node_modules/@moralisweb3/common-streams-utils/lib/esm/index.js
var import_dist169 = __toESM(require_dist());
var import_dist170 = __toESM(require_dist2());
var import_dist171 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-aptos-utils/lib/esm/index.js
var import_dist7 = __toESM(require_dist());
var import_dist8 = __toESM(require_dist2());
var import_dist9 = __toESM(require_dist3());
var CommonAptosUtilsConfig = {
  defaultAptosNetwork: {
    name: "defaultAptosNetwork",
    defaultValue: "mainnet"
  }
};
var CommonAptosUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonAptosUtilsConfigSetup2() {
    }
    CommonAptosUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonAptosUtilsConfig.defaultAptosNetwork);
    };
    return CommonAptosUtilsConfigSetup2;
  }()
);
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
  if (!(uint8a instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0; i < uint8a.length; i++) {
    hex += hexes[uint8a[i]];
  }
  return hex;
}
function hexToBytes(hex) {
  if (typeof hex !== "string") {
    throw new TypeError("hexToBytes: expected string, got " + typeof hex);
  }
  if (hex.length % 2)
    throw new Error("hexToBytes: received invalid unpadded hex");
  const array = new Uint8Array(hex.length / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
var HexString = (
  /** @class */
  function() {
    function HexString2(hexString) {
      if (hexString.startsWith("0x")) {
        this.hexString = hexString;
      } else {
        this.hexString = "0x".concat(hexString);
      }
    }
    HexString2.fromBuffer = function(buffer) {
      return HexString2.fromUint8Array(buffer);
    };
    HexString2.fromUint8Array = function(arr) {
      return new HexString2(bytesToHex(arr));
    };
    HexString2.ensure = function(hexString) {
      if (typeof hexString === "string") {
        return new HexString2(hexString);
      }
      return hexString;
    };
    HexString2.prototype.hex = function() {
      return this.hexString;
    };
    HexString2.prototype.noPrefix = function() {
      return this.hexString.slice(2);
    };
    HexString2.prototype.toString = function() {
      return this.hex();
    };
    HexString2.prototype.toShortString = function() {
      var trimmed = this.hexString.replace(/^0x0*/, "");
      return "0x".concat(trimmed);
    };
    HexString2.prototype.toUint8Array = function() {
      return Uint8Array.from(hexToBytes(this.noPrefix()));
    };
    return HexString2;
  }()
);
var AccountAddress = (
  /** @class */
  function() {
    function AccountAddress2(address) {
      if (address.length !== AccountAddress2.LENGTH) {
        throw new Error("Expected address of length 32");
      }
      this.address = address;
    }
    AccountAddress2.fromHex = function(addr) {
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      if (addressBytes.length > AccountAddress2.LENGTH) {
        throw new Error("Hex string is too long. Address's length is 32 bytes.");
      } else if (addressBytes.length === AccountAddress2.LENGTH) {
        return new AccountAddress2(addressBytes);
      }
      var res = new Uint8Array(AccountAddress2.LENGTH);
      res.set(addressBytes, AccountAddress2.LENGTH - addressBytes.length);
      return new AccountAddress2(res);
    };
    AccountAddress2.isValid = function(addr) {
      if (addr === "") {
        return false;
      }
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      return addressBytes.length <= AccountAddress2.LENGTH;
    };
    AccountAddress2.LENGTH = 32;
    AccountAddress2.CORE_CODE_ADDRESS = AccountAddress2.fromHex("0x1");
    return AccountAddress2;
  }()
);
var AptosAddress = (
  /** @class */
  function() {
    function AptosAddress2(address) {
      this.address = address;
    }
    AptosAddress2.create = function(address) {
      if (address instanceof AptosAddress2) {
        return address;
      }
      return new AptosAddress2(AptosAddress2.parse(address));
    };
    AptosAddress2.fromJSON = function(json) {
      return AptosAddress2.create(json);
    };
    AptosAddress2.parse = function(address) {
      try {
        if (!AccountAddress.isValid(address)) {
          throw new Error("Address is invalid");
        }
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address),
          cause: e
        });
      }
      if (address.startsWith("0x")) {
        address = address.substring(2);
      }
      var addr = address.padStart(64, "0");
      return "0x".concat(addr);
    };
    AptosAddress2.prototype.format = function() {
      return this.address;
    };
    AptosAddress2.equals = function(addressA, addressB) {
      return AptosAddress2.create(addressA).equals(addressB);
    };
    AptosAddress2.prototype.equals = function(address) {
      return this.address === AptosAddress2.create(address).address;
    };
    AptosAddress2.prototype.toString = function() {
      return this.address;
    };
    AptosAddress2.prototype.toJSON = function() {
      return this.address;
    };
    Object.defineProperty(AptosAddress2.prototype, "short", {
      /**
       * @returns a string representing the address, the leading zeros are removed from the address.
       * @example address.short; // "0x1"
       */
      get: function() {
        var address = this.address.substring(2).replace(/^0+/, "");
        return "0x".concat(address);
      },
      enumerable: false,
      configurable: true
    });
    return AptosAddress2;
  }()
);
var aptosNetworkNames = ["mainnet", "testnet", "devnet"];
var aptosChainIdToNetworkNames = {
  "1": "mainnet",
  "2": "testnet"
};
var AptosNetwork = (
  /** @class */
  function() {
    function AptosNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(AptosNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "TESTNET", {
      /**
       * Returns TESTNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("testnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    AptosNetwork2.create = function(network) {
      return network instanceof AptosNetwork2 ? network : new AptosNetwork2(AptosNetwork2.parse(network));
    };
    AptosNetwork2.parse = function(network) {
      var _a2;
      if (typeof network !== "string") {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      var networkName = (_a2 = aptosChainIdToNetworkNames[network]) !== null && _a2 !== void 0 ? _a2 : network;
      if (!aptosNetworkNames.includes(networkName)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      return networkName;
    };
    AptosNetwork2.prototype.format = function() {
      return this.network;
    };
    AptosNetwork2.prototype.equals = function(network) {
      return this.network === AptosNetwork2.create(network).network;
    };
    AptosNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    AptosNetwork2.prototype.toString = function() {
      return this.network;
    };
    return AptosNetwork2;
  }()
);
var unitToDecimals = {
  aptos: 8,
  octas: 0
};
var AptosNative = (
  /** @class */
  function() {
    function AptosNative2(rawValue) {
      this.rawValue = rawValue;
    }
    AptosNative2.create = function(value, unit) {
      if (value instanceof AptosNative2) {
        return value;
      }
      return new AptosNative2(AptosNative2.parse(value, unit));
    };
    AptosNative2.fromJSON = function(json) {
      return AptosNative2.create(json, "octas");
    };
    AptosNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "aptos";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals[unit] !== void 0) {
        decimal = unitToDecimals[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Aptos unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    AptosNative2.equals = function(valueA, valueB) {
      var aptosNativeA = AptosNative2.create(valueA);
      var aptosNativeB = AptosNative2.create(valueB);
      return aptosNativeA.octas === aptosNativeB.octas;
    };
    AptosNative2.prototype.equals = function(value) {
      return AptosNative2.equals(this, value);
    };
    AptosNative2.prototype.format = function() {
      return this.octas;
    };
    AptosNative2.prototype.toJSON = function() {
      return this.octas;
    };
    AptosNative2.prototype.toString = function() {
      return this.octas;
    };
    Object.defineProperty(AptosNative2.prototype, "value", {
      /**
       * @returns the value of the AptosNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "aptos", {
      /**
       * Converts the AptosNative to an aptos unit.
       * @returns the value of the AptosNative as an aptos string
       * @example `native.aptos`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals["aptos"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "octas", {
      /**
       * Converts the AptosNative to a string.
       * @returns the value of the AptosNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return AptosNative2;
  }()
);
var AptosNetworkResolver = (
  /** @class */
  function() {
    function AptosNetworkResolver2() {
    }
    AptosNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonAptosUtilsConfig.defaultAptosNetwork);
      }
      return AptosNetwork.create(network).network;
    };
    return AptosNetworkResolver2;
  }()
);
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends3(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var CommonAptosUtils = (
  /** @class */
  function(_super) {
    __extends3(CommonAptosUtils2, _super);
    function CommonAptosUtils2(core2) {
      return _super.call(this, CommonAptosUtils2.moduleName, core2) || this;
    }
    CommonAptosUtils2.create = function(core2) {
      return new CommonAptosUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonAptosUtils2.prototype.setup = function() {
      CommonAptosUtilsConfigSetup.register(this.core.config);
    };
    CommonAptosUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosAddress", {
      get: function() {
        return AptosAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNative", {
      get: function() {
        return AptosNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNetwork", {
      get: function() {
        return AptosNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonAptosUtils2.moduleName = "aptosUtils";
    return CommonAptosUtils2;
  }(Module)
);
var AptosNFTTokenResponseDefaultProperties = (
  /** @class */
  function() {
    function AptosNFTTokenResponseDefaultProperties2() {
    }
    AptosNFTTokenResponseDefaultProperties2.create = function(input) {
      return input;
    };
    AptosNFTTokenResponseDefaultProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTTokenResponseDefaultProperties2;
  }()
);
var AptosNFTTokenResponse = (
  /** @class */
  function() {
    function AptosNFTTokenResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.defaultProperties = AptosNFTTokenResponseDefaultProperties.create(input.defaultProperties);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.largestPropertyVersion = input.largestPropertyVersion;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.name = input.name;
      this.payeeAddress = AptosAddress.create(input.payeeAddress);
      this.propertiesMutable = input.propertiesMutable;
      this.royaltyMutable = input.royaltyMutable;
      this.royaltyPointsDenominator = input.royaltyPointsDenominator;
      this.royaltyPointsNumerator = input.royaltyPointsNumerator;
      this.supply = input.supply;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTTokenResponse2.create = function(input) {
      if (input instanceof AptosNFTTokenResponse2) {
        return input;
      }
      return new AptosNFTTokenResponse2(input);
    };
    AptosNFTTokenResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        defaultProperties: AptosNFTTokenResponseDefaultProperties.fromJSON(json.default_properties),
        description: json.description,
        descriptionMutable: json.description_mutable,
        largestPropertyVersion: json.largest_property_version,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        name: json.name,
        payeeAddress: AptosAddress.fromJSON(json.payee_address),
        propertiesMutable: json.properties_mutable,
        royaltyMutable: json.royalty_mutable,
        royaltyPointsDenominator: json.royalty_points_denominator,
        royaltyPointsNumerator: json.royalty_points_numerator,
        supply: json.supply,
        tokenDataIdHash: json.token_data_id_hash,
        uriMutable: json.uri_mutable
      };
      return AptosNFTTokenResponse2.create(input);
    };
    AptosNFTTokenResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        default_properties: this.defaultProperties,
        description: this.description,
        description_mutable: this.descriptionMutable,
        largest_property_version: this.largestPropertyVersion,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        name: this.name,
        payee_address: this.payeeAddress.toJSON(),
        properties_mutable: this.propertiesMutable,
        royalty_mutable: this.royaltyMutable,
        royalty_points_denominator: this.royaltyPointsDenominator,
        royalty_points_numerator: this.royaltyPointsNumerator,
        supply: this.supply,
        token_data_id_hash: this.tokenDataIdHash,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTTokenResponse2;
  }()
);
var GetNFTsByIdsOperation = {
  operationId: "getNFTsByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts",
  parameterNames: ["token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTTokenResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCollectionResponse2) {
        return input;
      }
      return new AptosNFTTokensByCollectionResponse2(input);
    };
    AptosNFTTokensByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCollectionResponse2.create(input);
    };
    AptosNFTTokensByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCollectionResponse2;
  }()
);
var GetNFTsByCollectionOperation = {
  operationId: "getNFTsByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/tokens",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCreatorsResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCreatorsResponse2) {
        return input;
      }
      return new AptosNFTTokensByCreatorsResponse2(input);
    };
    AptosNFTTokensByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCreatorsResponse2.create(input);
    };
    AptosNFTTokensByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCreatorsResponse2;
  }()
);
var GetNFTsByCreatorsOperation = {
  operationId: "getNFTsByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionItemResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionItemResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.supply = input.supply;
      this.tableHandle = input.tableHandle;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTCollectionItemResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionItemResponse2) {
        return input;
      }
      return new AptosNFTCollectionItemResponse2(input);
    };
    AptosNFTCollectionItemResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        description: json.description,
        descriptionMutable: json.description_mutable,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        supply: json.supply,
        tableHandle: json.table_handle,
        uriMutable: json.uri_mutable
      };
      return AptosNFTCollectionItemResponse2.create(input);
    };
    AptosNFTCollectionItemResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        description: this.description,
        description_mutable: this.descriptionMutable,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        supply: this.supply,
        table_handle: this.tableHandle,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTCollectionItemResponse2;
  }()
);
var AptosNFTCollectionsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByNameRangeResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByNameRangeResponse2(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByNameRangeResponse2.create(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByNameRangeResponse2;
  }()
);
var GetNFTCollectionsOperation = {
  operationId: "getNFTCollections",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections",
  parameterNames: ["limit", "offset", "cursor", "fromName", "toName", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      fromName,
      toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetNFTCollectionsByIdsOperation = {
  operationId: "getNFTCollectionsByIds",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/ids",
  parameterNames: ["ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTCollectionItemResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var ids = request.ids;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      ids,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionsByCreatorResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByCreatorResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByCreatorResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByCreatorResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByCreatorResponse2(input);
    };
    AptosNFTCollectionsByCreatorResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByCreatorResponse2.create(input);
    };
    AptosNFTCollectionsByCreatorResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByCreatorResponse2;
  }()
);
var GetNFTCollectionsByCreatorOperation = {
  operationId: "getNFTCollectionsByCreator",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_address", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByCreatorResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddress = AptosAddress.create(request.creatorAddress);
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_address: creatorAddress.toJSON(),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnerResponseTokenProperties = (
  /** @class */
  function() {
    function AptosNFTOwnerResponseTokenProperties2() {
    }
    AptosNFTOwnerResponseTokenProperties2.create = function(input) {
      return input;
    };
    AptosNFTOwnerResponseTokenProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTOwnerResponseTokenProperties2;
  }()
);
var AptosNFTOwnerResponse = (
  /** @class */
  function() {
    function AptosNFTOwnerResponse2(input) {
      this.amount = AptosNative.create(input.amount);
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.name = input.name;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.propertyVersion = input.propertyVersion;
      this.tableType = input.tableType;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.tokenProperties = AptosNFTOwnerResponseTokenProperties.create(input.tokenProperties);
    }
    AptosNFTOwnerResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnerResponse2) {
        return input;
      }
      return new AptosNFTOwnerResponse2(input);
    };
    AptosNFTOwnerResponse2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        name: json.name,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        propertyVersion: json.property_version,
        tableType: json.table_type,
        tokenDataIdHash: json.token_data_id_hash,
        tokenProperties: AptosNFTOwnerResponseTokenProperties.fromJSON(json.token_properties)
      };
      return AptosNFTOwnerResponse2.create(input);
    };
    AptosNFTOwnerResponse2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        name: this.name,
        owner_address: this.ownerAddress.toJSON(),
        property_version: this.propertyVersion,
        table_type: this.tableType,
        token_data_id_hash: this.tokenDataIdHash,
        token_properties: this.tokenProperties
      };
    };
    return AptosNFTOwnerResponse2;
  }()
);
var AptosNFTOwnersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByTokensResponse2) {
        return input;
      }
      return new AptosNFTOwnersByTokensResponse2(input);
    };
    AptosNFTOwnersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByTokensResponse2.create(input);
    };
    AptosNFTOwnersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByTokensResponse2;
  }()
);
var GetNFTOwnersByTokensOperation = {
  operationId: "getNFTOwnersByTokens",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/owners",
  parameterNames: ["limit", "offset", "cursor", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersByCollectionResponse2(input);
    };
    AptosNFTOwnersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByCollectionResponse2.create(input);
    };
    AptosNFTOwnersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByCollectionResponse2;
  }()
);
var GetNFTOwnersByCollectionOperation = {
  operationId: "getNFTOwnersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersOfCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersOfCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result;
    }
    AptosNFTOwnersOfCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersOfCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersOfCollectionResponse2(input);
    };
    AptosNFTOwnersOfCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result
      };
      return AptosNFTOwnersOfCollectionResponse2.create(input);
    };
    AptosNFTOwnersOfCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result
      };
    };
    return AptosNFTOwnersOfCollectionResponse2;
  }()
);
var GetNFTOwnersOfCollectionOperation = {
  operationId: "getNFTOwnersOfCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners/list",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersOfCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransferResponse = (
  /** @class */
  function() {
    function AptosNFTTransferResponse2(input) {
      this.coinAmount = input.coinAmount ? AptosNative.create(input.coinAmount) : void 0;
      this.coinType = input.coinType;
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.fromAddress = input.fromAddress ? AptosAddress.create(input.fromAddress) : void 0;
      this.name = input.name;
      this.propertyVersion = input.propertyVersion;
      this.toAddress = input.toAddress ? AptosAddress.create(input.toAddress) : void 0;
      this.tokenAmount = AptosNative.create(input.tokenAmount);
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.transferType = input.transferType;
    }
    AptosNFTTransferResponse2.create = function(input) {
      if (input instanceof AptosNFTTransferResponse2) {
        return input;
      }
      return new AptosNFTTransferResponse2(input);
    };
    AptosNFTTransferResponse2.fromJSON = function(json) {
      var input = {
        coinAmount: json.coin_amount ? AptosNative.fromJSON(json.coin_amount) : void 0,
        coinType: json.coin_type,
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        fromAddress: json.from_address ? AptosAddress.fromJSON(json.from_address) : void 0,
        name: json.name,
        propertyVersion: json.property_version,
        toAddress: json.to_address ? AptosAddress.fromJSON(json.to_address) : void 0,
        tokenAmount: AptosNative.fromJSON(json.token_amount),
        tokenDataIdHash: json.token_data_id_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        transferType: json.transfer_type
      };
      return AptosNFTTransferResponse2.create(input);
    };
    AptosNFTTransferResponse2.prototype.toJSON = function() {
      return {
        coin_amount: this.coinAmount ? this.coinAmount.toJSON() : void 0,
        coin_type: this.coinType,
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        from_address: this.fromAddress ? this.fromAddress.toJSON() : void 0,
        name: this.name,
        property_version: this.propertyVersion,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        token_amount: this.tokenAmount.toJSON(),
        token_data_id_hash: this.tokenDataIdHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        transfer_type: this.transferType
      };
    };
    return AptosNFTTransferResponse2;
  }()
);
var AptosNFTTransfersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByTokensResponse2) {
        return input;
      }
      return new AptosNFTTransfersByTokensResponse2(input);
    };
    AptosNFTTransfersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByTokensResponse2.create(input);
    };
    AptosNFTTransfersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByTokensResponse2;
  }()
);
var GetNFTTransfersByIdsOperation = {
  operationId: "getNFTTransfersByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCollectionResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCollectionResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCollectionResponse2(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCollectionResponse2.create(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCollectionResponse2;
  }()
);
var GetNFTTransfersByCollectionOperation = {
  operationId: "getNFTTransfersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/collections/{collection_data_id_hash}",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_whitelist", "wallet_blacklist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletWhitelist = request.walletWhitelist;
    var walletBlacklist = request.walletBlacklist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_whitelist: walletWhitelist,
      wallet_blacklist: walletBlacklist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCreatorsResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCreatorsResponse2(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCreatorsResponse2.create(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCreatorsResponse2;
  }()
);
var GetNFTTransfersByCreatorsOperation = {
  operationId: "getNFTTransfersByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransfersByWalletsResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByWalletsResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByWalletsResponse2) {
        return input;
      }
      return new AptosNFTTransfersByWalletsResponse2(input);
    };
    AptosNFTTransfersByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByWalletsResponse2.create(input);
    };
    AptosNFTTransfersByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByWalletsResponse2;
  }()
);
var GetNFTTransfersByWalletsOperation = {
  operationId: "getNFTTransfersByWallets",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinInfoDto = (
  /** @class */
  function() {
    function AptosCoinInfoDto2(input) {
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.decimals = input.decimals;
      this.name = input.name;
      this.supplyAggregatorTableHandle = input.supplyAggregatorTableHandle;
      this.supplyAggregatorTableKey = input.supplyAggregatorTableKey;
      this.symbol = input.symbol;
      this.transactionCreatedTimestamp = input.transactionCreatedTimestamp;
      this.transactionVersionCreated = input.transactionVersionCreated;
    }
    AptosCoinInfoDto2.create = function(input) {
      if (input instanceof AptosCoinInfoDto2) {
        return input;
      }
      return new AptosCoinInfoDto2(input);
    };
    AptosCoinInfoDto2.fromJSON = function(json) {
      var input = {
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        decimals: json.decimals,
        name: json.name,
        supplyAggregatorTableHandle: json.supply_aggregator_table_handle,
        supplyAggregatorTableKey: json.supply_aggregator_table_key,
        symbol: json.symbol,
        transactionCreatedTimestamp: json.transaction_created_timestamp,
        transactionVersionCreated: json.transaction_version_created
      };
      return AptosCoinInfoDto2.create(input);
    };
    AptosCoinInfoDto2.prototype.toJSON = function() {
      return {
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        creator_address: this.creatorAddress.toJSON(),
        decimals: this.decimals,
        name: this.name,
        supply_aggregator_table_handle: this.supplyAggregatorTableHandle,
        supply_aggregator_table_key: this.supplyAggregatorTableKey,
        symbol: this.symbol,
        transaction_created_timestamp: this.transactionCreatedTimestamp,
        transaction_version_created: this.transactionVersionCreated
      };
    };
    return AptosCoinInfoDto2;
  }()
);
var GetCoinInfoByCoinTypeHashesOperation = {
  operationId: "getCoinInfoByCoinTypeHashes",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins",
  parameterNames: ["coin_type_hashes", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosCoinInfoDto.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var coinTypeHashes = request.coinTypeHashes;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hashes: coinTypeHashes,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetLatestCoinsResponse = (
  /** @class */
  function() {
    function AptosGetLatestCoinsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetLatestCoinsResponse2.create = function(input) {
      if (input instanceof AptosGetLatestCoinsResponse2) {
        return input;
      }
      return new AptosGetLatestCoinsResponse2(input);
    };
    AptosGetLatestCoinsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetLatestCoinsResponse2.create(input);
    };
    AptosGetLatestCoinsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetLatestCoinsResponse2;
  }()
);
var GetLatestCoinsOperation = {
  operationId: "getLatestCoins",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/latest",
  parameterNames: ["limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetLatestCoinsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByNameRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsByNameRangeResponse2(input);
    };
    AptosGetCoinsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByNameRangeResponse2.create(input);
    };
    AptosGetCoinsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByNameRangeResponse2;
  }()
);
var GetCoinsByNameRangeOperation = {
  operationId: "getCoinsByNameRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/names",
  parameterNames: ["limit", "offset", "cursor", "from_name", "to_name", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_name: fromName,
      to_name: toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsBySymbolRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsBySymbolRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsBySymbolRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsBySymbolRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsBySymbolRangeResponse2(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsBySymbolRangeResponse2.create(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsBySymbolRangeResponse2;
  }()
);
var GetCoinsBySymbolRangeOperation = {
  operationId: "getCoinsBySymbolRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/symbols",
  parameterNames: ["limit", "offset", "cursor", "from_symbol", "to_symbol", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsBySymbolRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromSymbol = request.fromSymbol;
    var toSymbol = request.toSymbol;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_symbol: fromSymbol,
      to_symbol: toSymbol,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByCreatorsResponse2) {
        return input;
      }
      return new AptosGetCoinsByCreatorsResponse2(input);
    };
    AptosGetCoinsByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByCreatorsResponse2.create(input);
    };
    AptosGetCoinsByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByCreatorsResponse2;
  }()
);
var GetCoinsByCreatorsOperation = {
  operationId: "getCoinsByCreators",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinTransferDto = (
  /** @class */
  function() {
    function AptosCoinTransferDto2(input) {
      this.activityType = input.activityType;
      this.amount = AptosNative.create(input.amount);
      this.blockHeight = input.blockHeight;
      this.coinType = input.coinType;
      this.entryFunctionIdStr = input.entryFunctionIdStr;
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.isGasFee = input.isGasFee;
      this.isTransactionSuccess = input.isTransactionSuccess;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
    }
    AptosCoinTransferDto2.create = function(input) {
      if (input instanceof AptosCoinTransferDto2) {
        return input;
      }
      return new AptosCoinTransferDto2(input);
    };
    AptosCoinTransferDto2.fromJSON = function(json) {
      var input = {
        activityType: json.activity_type,
        amount: AptosNative.fromJSON(json.amount),
        blockHeight: json.block_height,
        coinType: json.coin_type,
        entryFunctionIdStr: json.entry_function_id_str,
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        isGasFee: json.is_gas_fee,
        isTransactionSuccess: json.is_transaction_success,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version
      };
      return AptosCoinTransferDto2.create(input);
    };
    AptosCoinTransferDto2.prototype.toJSON = function() {
      return {
        activity_type: this.activityType,
        amount: this.amount.toJSON(),
        block_height: this.blockHeight,
        coin_type: this.coinType,
        entry_function_id_str: this.entryFunctionIdStr,
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        is_gas_fee: this.isGasFee,
        is_transaction_success: this.isTransactionSuccess,
        owner_address: this.ownerAddress.toJSON(),
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion
      };
    };
    return AptosCoinTransferDto2;
  }()
);
var AptosGetCoinTransfersByOwnerAddressesResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByOwnerAddressesResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByOwnerAddressesResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByOwnerAddressesResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByOwnerAddressesResponse2(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByOwnerAddressesResponse2.create(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByOwnerAddressesResponse2;
  }()
);
var GetCoinTransfersByOwnerAddressesOperation = {
  operationId: "getCoinTransfersByOwnerAddresses",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByBlockHeightsResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByBlockHeightsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByBlockHeightsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByBlockHeightsResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByBlockHeightsResponse2(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByBlockHeightsResponse2.create(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByBlockHeightsResponse2;
  }()
);
var GetCoinTransfersByBlockHeightsOperation = {
  operationId: "getCoinTransfersByBlockHeights",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/blocks",
  parameterNames: ["limit", "offset", "cursor", "block_heights", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByBlockHeightsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var blockHeights = request.blockHeights;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      block_heights: blockHeights,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByCoinTypeResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByCoinTypeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByCoinTypeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByCoinTypeResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByCoinTypeResponse2(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByCoinTypeResponse2.create(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByCoinTypeResponse2;
  }()
);
var GetCoinTransfersByCoinTypeOperation = {
  operationId: "getCoinTransfersByCoinType",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/{coin_type}",
  parameterNames: ["coin_type", "limit", "offset", "cursor", "from_date", "to_date", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByCoinTypeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinType = request.coinType;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type: coinType,
      limit,
      offset,
      cursor,
      from_date: fromDate,
      to_date: toDate,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCurrentCoinBalanceDto = (
  /** @class */
  function() {
    function AptosCurrentCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosCurrentCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosCurrentCoinBalanceDto2) {
        return input;
      }
      return new AptosCurrentCoinBalanceDto2(input);
    };
    AptosCurrentCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosCurrentCoinBalanceDto2.create(input);
    };
    AptosCurrentCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosCurrentCoinBalanceDto2;
  }()
);
var AptosGetTopHoldersByCoinResponse = (
  /** @class */
  function() {
    function AptosGetTopHoldersByCoinResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetTopHoldersByCoinResponse2.create = function(input) {
      if (input instanceof AptosGetTopHoldersByCoinResponse2) {
        return input;
      }
      return new AptosGetTopHoldersByCoinResponse2(input);
    };
    AptosGetTopHoldersByCoinResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetTopHoldersByCoinResponse2.create(input);
    };
    AptosGetTopHoldersByCoinResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetTopHoldersByCoinResponse2;
  }()
);
var GetTopHoldersByCoinOperation = {
  operationId: "getTopHoldersByCoin",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/owners/{coin_type_hash}/top-holders",
  parameterNames: ["coin_type_hash", "limit", "offset", "cursor", "min_amount", "min_version", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTopHoldersByCoinResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinTypeHash = request.coinTypeHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var minAmount = request.minAmount ? AptosNative.create(request.minAmount) : void 0;
    var minVersion = request.minVersion;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hash: coinTypeHash,
      limit,
      offset,
      cursor,
      min_amount: minAmount ? minAmount.toJSON() : void 0,
      min_version: minVersion,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetCoinBalancesByWalletsResponse2(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinBalancesByWalletsResponse2;
  }()
);
var GetCoinBalancesByWalletsOperation = {
  operationId: "getCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosHistoricalCoinBalanceDto = (
  /** @class */
  function() {
    function AptosHistoricalCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosHistoricalCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosHistoricalCoinBalanceDto2) {
        return input;
      }
      return new AptosHistoricalCoinBalanceDto2(input);
    };
    AptosHistoricalCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosHistoricalCoinBalanceDto2.create(input);
    };
    AptosHistoricalCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosHistoricalCoinBalanceDto2;
  }()
);
var AptosGetHistoricalCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetHistoricalCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosHistoricalCoinBalanceDto.create(item);
      });
    }
    AptosGetHistoricalCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetHistoricalCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetHistoricalCoinBalancesByWalletsResponse2(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosHistoricalCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetHistoricalCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetHistoricalCoinBalancesByWalletsResponse2;
  }()
);
var GetHistoricalCoinBalancesByWalletsOperation = {
  operationId: "getHistoricalCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/history",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetHistoricalCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetCoinTransfersByWalletAddressesOperation = {
  operationId: "getCoinTransfersByWalletAddresses",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/transfers",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTsByOwnersResponse = (
  /** @class */
  function() {
    function AptosNFTsByOwnersResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTsByOwnersResponse2.create = function(input) {
      if (input instanceof AptosNFTsByOwnersResponse2) {
        return input;
      }
      return new AptosNFTsByOwnersResponse2(input);
    };
    AptosNFTsByOwnersResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTsByOwnersResponse2.create(input);
    };
    AptosNFTsByOwnersResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTsByOwnersResponse2;
  }()
);
var GetNFTByOwnersOperation = {
  operationId: "getNFTByOwners",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTsByOwnersResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetWalletsNFTTransfersOperation = {
  operationId: "getWalletsNFTTransfers",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResponse = (
  /** @class */
  function() {
    function AptosGetAccountResponse2(input) {
      this.sequenceNumber = input.sequenceNumber;
      this.authenticationKey = input.authenticationKey;
    }
    AptosGetAccountResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResponse2) {
        return input;
      }
      return new AptosGetAccountResponse2(input);
    };
    AptosGetAccountResponse2.fromJSON = function(json) {
      var input = {
        sequenceNumber: json.sequence_number,
        authenticationKey: json.authentication_key
      };
      return AptosGetAccountResponse2.create(input);
    };
    AptosGetAccountResponse2.prototype.toJSON = function() {
      return {
        sequence_number: this.sequenceNumber,
        authentication_key: this.authenticationKey
      };
    };
    return AptosGetAccountResponse2;
  }()
);
var GetAccountOperation = {
  operationId: "getAccount",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}",
  parameterNames: ["address", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResourceResponseData = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponseData2() {
    }
    AptosGetAccountResourceResponseData2.create = function(input) {
      return input;
    };
    AptosGetAccountResourceResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetAccountResourceResponseData2;
  }()
);
var AptosGetAccountResourceResponse = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponse2(input) {
      this.type = input.type;
      this.data = AptosGetAccountResourceResponseData.create(input.data);
    }
    AptosGetAccountResourceResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResourceResponse2) {
        return input;
      }
      return new AptosGetAccountResourceResponse2(input);
    };
    AptosGetAccountResourceResponse2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosGetAccountResourceResponseData.fromJSON(json.data)
      };
      return AptosGetAccountResourceResponse2.create(input);
    };
    AptosGetAccountResourceResponse2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosGetAccountResourceResponse2;
  }()
);
var GetAccountResourcesOperation = {
  operationId: "getAccountResources",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resources",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountResourceResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGenericTypeParam = (
  /** @class */
  function() {
    function AptosGenericTypeParam2(input) {
      this.constraints = input.constraints;
    }
    AptosGenericTypeParam2.create = function(input) {
      if (input instanceof AptosGenericTypeParam2) {
        return input;
      }
      return new AptosGenericTypeParam2(input);
    };
    AptosGenericTypeParam2.fromJSON = function(json) {
      var input = {
        constraints: json.constraints
      };
      return AptosGenericTypeParam2.create(input);
    };
    AptosGenericTypeParam2.prototype.toJSON = function() {
      return {
        constraints: this.constraints
      };
    };
    return AptosGenericTypeParam2;
  }()
);
var AptosModuleExposedFunction = (
  /** @class */
  function() {
    function AptosModuleExposedFunction2(input) {
      this.name = input.name;
      this.visibility = input.visibility;
      this.isEntry = input.isEntry;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.params = input.params;
      this.return = input.return;
    }
    AptosModuleExposedFunction2.create = function(input) {
      if (input instanceof AptosModuleExposedFunction2) {
        return input;
      }
      return new AptosModuleExposedFunction2(input);
    };
    AptosModuleExposedFunction2.fromJSON = function(json) {
      var input = {
        name: json.name,
        visibility: json.visibility,
        isEntry: json.is_entry,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        params: json.params,
        return: json.return
      };
      return AptosModuleExposedFunction2.create(input);
    };
    AptosModuleExposedFunction2.prototype.toJSON = function() {
      return {
        name: this.name,
        visibility: this.visibility,
        is_entry: this.isEntry,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        params: this.params,
        return: this.return
      };
    };
    return AptosModuleExposedFunction2;
  }()
);
var AptosModuleStructField = (
  /** @class */
  function() {
    function AptosModuleStructField2(input) {
      this.name = input.name;
      this.type = input.type;
    }
    AptosModuleStructField2.create = function(input) {
      if (input instanceof AptosModuleStructField2) {
        return input;
      }
      return new AptosModuleStructField2(input);
    };
    AptosModuleStructField2.fromJSON = function(json) {
      var input = {
        name: json.name,
        type: json.type
      };
      return AptosModuleStructField2.create(input);
    };
    AptosModuleStructField2.prototype.toJSON = function() {
      return {
        name: this.name,
        type: this.type
      };
    };
    return AptosModuleStructField2;
  }()
);
var AptosModuleStruct = (
  /** @class */
  function() {
    function AptosModuleStruct2(input) {
      this.name = input.name;
      this.isNative = input.isNative;
      this.abilities = input.abilities;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.fields = input.fields.map(function(item) {
        return AptosModuleStructField.create(item);
      });
    }
    AptosModuleStruct2.create = function(input) {
      if (input instanceof AptosModuleStruct2) {
        return input;
      }
      return new AptosModuleStruct2(input);
    };
    AptosModuleStruct2.fromJSON = function(json) {
      var input = {
        name: json.name,
        isNative: json.is_native,
        abilities: json.abilities,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        fields: json.fields.map(function(item) {
          return AptosModuleStructField.fromJSON(item);
        })
      };
      return AptosModuleStruct2.create(input);
    };
    AptosModuleStruct2.prototype.toJSON = function() {
      return {
        name: this.name,
        is_native: this.isNative,
        abilities: this.abilities,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        fields: this.fields.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosModuleStruct2;
  }()
);
var AptosMoveModuleAbi = (
  /** @class */
  function() {
    function AptosMoveModuleAbi2(input) {
      this.address = AptosAddress.create(input.address);
      this.name = input.name;
      this.friends = input.friends;
      this.exposedFunctions = input.exposedFunctions.map(function(item) {
        return AptosModuleExposedFunction.create(item);
      });
      this.structs = input.structs.map(function(item) {
        return AptosModuleStruct.create(item);
      });
    }
    AptosMoveModuleAbi2.create = function(input) {
      if (input instanceof AptosMoveModuleAbi2) {
        return input;
      }
      return new AptosMoveModuleAbi2(input);
    };
    AptosMoveModuleAbi2.fromJSON = function(json) {
      var input = {
        address: AptosAddress.fromJSON(json.address),
        name: json.name,
        friends: json.friends,
        exposedFunctions: json.exposed_functions.map(function(item) {
          return AptosModuleExposedFunction.fromJSON(item);
        }),
        structs: json.structs.map(function(item) {
          return AptosModuleStruct.fromJSON(item);
        })
      };
      return AptosMoveModuleAbi2.create(input);
    };
    AptosMoveModuleAbi2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        name: this.name,
        friends: this.friends,
        exposed_functions: this.exposedFunctions.map(function(item) {
          return item.toJSON();
        }),
        structs: this.structs.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosMoveModuleAbi2;
  }()
);
var AptosGetAccountModuleResponse = (
  /** @class */
  function() {
    function AptosGetAccountModuleResponse2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosGetAccountModuleResponse2.create = function(input) {
      if (input instanceof AptosGetAccountModuleResponse2) {
        return input;
      }
      return new AptosGetAccountModuleResponse2(input);
    };
    AptosGetAccountModuleResponse2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosGetAccountModuleResponse2.create(input);
    };
    AptosGetAccountModuleResponse2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosGetAccountModuleResponse2;
  }()
);
var GetAccountModulesOperation = {
  operationId: "getAccountModules",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/modules",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountModuleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountResourceOperation = {
  operationId: "getAccountResource",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{resource_type}",
  parameterNames: ["address", "resource_type", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResourceResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var resourceType = request.resourceType;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      resource_type: resourceType,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountModuleOperation = {
  operationId: "getAccountModule",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{module_name}",
  parameterNames: ["address", "module_name", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountModuleResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var moduleName = request.moduleName;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      module_name: moduleName,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosTransactionEventGuid = (
  /** @class */
  function() {
    function AptosTransactionEventGuid2(input) {
      this.creationNumber = input.creationNumber;
      this.accountAddress = AptosAddress.create(input.accountAddress);
    }
    AptosTransactionEventGuid2.create = function(input) {
      if (input instanceof AptosTransactionEventGuid2) {
        return input;
      }
      return new AptosTransactionEventGuid2(input);
    };
    AptosTransactionEventGuid2.fromJSON = function(json) {
      var input = {
        creationNumber: json.creation_number,
        accountAddress: AptosAddress.fromJSON(json.account_address)
      };
      return AptosTransactionEventGuid2.create(input);
    };
    AptosTransactionEventGuid2.prototype.toJSON = function() {
      return {
        creation_number: this.creationNumber,
        account_address: this.accountAddress.toJSON()
      };
    };
    return AptosTransactionEventGuid2;
  }()
);
var AptosGetEventsByCreationNumberResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponseData2() {
    }
    AptosGetEventsByCreationNumberResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByCreationNumberResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByCreationNumberResponseData2;
  }()
);
var AptosGetEventsByCreationNumberResponse = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByCreationNumberResponseData.create(input.data);
    }
    AptosGetEventsByCreationNumberResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByCreationNumberResponse2) {
        return input;
      }
      return new AptosGetEventsByCreationNumberResponse2(input);
    };
    AptosGetEventsByCreationNumberResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByCreationNumberResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByCreationNumberResponse2.create(input);
    };
    AptosGetEventsByCreationNumberResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByCreationNumberResponse2;
  }()
);
var GetEventsByCreationNumberOperation = {
  operationId: "getEventsByCreationNumber",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{creation_number}",
  parameterNames: ["address", "creation_number", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByCreationNumberResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var creationNumber = request.creationNumber;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      creation_number: creationNumber,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetEventsByEventHandleResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponseData2() {
    }
    AptosGetEventsByEventHandleResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByEventHandleResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByEventHandleResponseData2;
  }()
);
var AptosGetEventsByEventHandleResponse = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByEventHandleResponseData.create(input.data);
    }
    AptosGetEventsByEventHandleResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByEventHandleResponse2) {
        return input;
      }
      return new AptosGetEventsByEventHandleResponse2(input);
    };
    AptosGetEventsByEventHandleResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByEventHandleResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByEventHandleResponse2.create(input);
    };
    AptosGetEventsByEventHandleResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByEventHandleResponse2;
  }()
);
var GetEventsByEventHandleOperation = {
  operationId: "getEventsByEventHandle",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{event_handle}/{field_name}",
  parameterNames: ["address", "event_handle", "field_name", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByEventHandleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var eventHandle = request.eventHandle;
    var fieldName = request.fieldName;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      event_handle: eventHandle,
      field_name: fieldName,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosEntryFunctionPayloadRequest = (
  /** @class */
  function() {
    function AptosEntryFunctionPayloadRequest2(input) {
      this.type = input.type;
      this.function = input.function;
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosEntryFunctionPayloadRequest2.create = function(input) {
      if (input instanceof AptosEntryFunctionPayloadRequest2) {
        return input;
      }
      return new AptosEntryFunctionPayloadRequest2(input);
    };
    AptosEntryFunctionPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        function: json.function,
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosEntryFunctionPayloadRequest2.create(input);
    };
    AptosEntryFunctionPayloadRequest2.isInput = function(input) {
      return ["type", "function", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.isJSON = function(json) {
      return ["type", "function", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        function: this.function,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosEntryFunctionPayloadRequest2;
  }()
);
var AptosScriptPayloadRequestCode = (
  /** @class */
  function() {
    function AptosScriptPayloadRequestCode2() {
    }
    AptosScriptPayloadRequestCode2.create = function(input) {
      return input;
    };
    AptosScriptPayloadRequestCode2.fromJSON = function(json) {
      return json;
    };
    return AptosScriptPayloadRequestCode2;
  }()
);
var AptosScriptPayloadRequest = (
  /** @class */
  function() {
    function AptosScriptPayloadRequest2(input) {
      this.type = input.type;
      this.code = AptosScriptPayloadRequestCode.create(input.code);
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosScriptPayloadRequest2.create = function(input) {
      if (input instanceof AptosScriptPayloadRequest2) {
        return input;
      }
      return new AptosScriptPayloadRequest2(input);
    };
    AptosScriptPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        code: AptosScriptPayloadRequestCode.fromJSON(json.code),
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosScriptPayloadRequest2.create(input);
    };
    AptosScriptPayloadRequest2.isInput = function(input) {
      return ["type", "code", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.isJSON = function(json) {
      return ["type", "code", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        code: this.code,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosScriptPayloadRequest2;
  }()
);
var AptosModuleBundlePayloadRequest = (
  /** @class */
  function() {
    function AptosModuleBundlePayloadRequest2(input) {
      this.type = input.type;
      this.modules = input.modules;
    }
    AptosModuleBundlePayloadRequest2.create = function(input) {
      if (input instanceof AptosModuleBundlePayloadRequest2) {
        return input;
      }
      return new AptosModuleBundlePayloadRequest2(input);
    };
    AptosModuleBundlePayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        modules: json.modules
      };
      return AptosModuleBundlePayloadRequest2.create(input);
    };
    AptosModuleBundlePayloadRequest2.isInput = function(input) {
      return ["type", "modules"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.isJSON = function(json) {
      return ["type", "modules"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        modules: this.modules
      };
    };
    return AptosModuleBundlePayloadRequest2;
  }()
);
var AptosPendingTransactionPayload = (
  /** @class */
  function() {
    function AptosPendingTransactionPayload2() {
    }
    AptosPendingTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadInput");
    };
    AptosPendingTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadValue");
    };
    return AptosPendingTransactionPayload2;
  }()
);
var AptosEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.signature = input.signature;
      this.publicKey = input.publicKey;
    }
    AptosEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosEd25519SignatureRequest2) {
        return input;
      }
      return new AptosEd25519SignatureRequest2(input);
    };
    AptosEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        signature: json.signature,
        publicKey: json.public_key
      };
      return AptosEd25519SignatureRequest2.create(input);
    };
    AptosEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "signature", "publicKey"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "signature", "public_key"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        signature: this.signature,
        public_key: this.publicKey
      };
    };
    return AptosEd25519SignatureRequest2;
  }()
);
var AptosMultiEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosMultiEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.publicKeys = input.publicKeys;
      this.signatures = input.signatures;
      this.threshold = input.threshold;
      this.bitmap = input.bitmap;
    }
    AptosMultiEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiEd25519SignatureRequest2) {
        return input;
      }
      return new AptosMultiEd25519SignatureRequest2(input);
    };
    AptosMultiEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        publicKeys: json.public_keys,
        signatures: json.signatures,
        threshold: json.threshold,
        bitmap: json.bitmap
      };
      return AptosMultiEd25519SignatureRequest2.create(input);
    };
    AptosMultiEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "publicKeys", "signatures", "threshold", "bitmap"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "public_keys", "signatures", "threshold", "bitmap"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        public_keys: this.publicKeys,
        signatures: this.signatures,
        threshold: this.threshold,
        bitmap: this.bitmap
      };
    };
    return AptosMultiEd25519SignatureRequest2;
  }()
);
var AptosMultiAgentSignatureRequestSecondarySigners = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSecondarySigners2() {
    }
    AptosMultiAgentSignatureRequestSecondarySigners2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersInput");
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersValue");
    };
    return AptosMultiAgentSignatureRequestSecondarySigners2;
  }()
);
var AptosMultiAgentSignatureRequest = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequest2(input) {
      this.type = input.type;
      this.sender = AptosAddress.create(input.sender);
      this.secondarySignerAddresses = input.secondarySignerAddresses;
      this.secondarySigners = AptosMultiAgentSignatureRequestSecondarySigners.create(input.secondarySigners);
    }
    AptosMultiAgentSignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiAgentSignatureRequest2) {
        return input;
      }
      return new AptosMultiAgentSignatureRequest2(input);
    };
    AptosMultiAgentSignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        sender: AptosAddress.fromJSON(json.sender),
        secondarySignerAddresses: json.secondary_signer_addresses,
        secondarySigners: AptosMultiAgentSignatureRequestSecondarySigners.fromJSON(json.secondary_signers)
      };
      return AptosMultiAgentSignatureRequest2.create(input);
    };
    AptosMultiAgentSignatureRequest2.isInput = function(input) {
      return ["type", "sender", "secondarySignerAddresses", "secondarySigners"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.isJSON = function(json) {
      return ["type", "sender", "secondary_signer_addresses", "secondary_signers"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        sender: this.sender.toJSON(),
        secondary_signer_addresses: this.secondarySignerAddresses,
        secondary_signers: AptosMultiAgentSignatureRequestSecondarySigners.toJSON(this.secondarySigners)
      };
    };
    return AptosMultiAgentSignatureRequest2;
  }()
);
var AptosPendingTransactionSignature = (
  /** @class */
  function() {
    function AptosPendingTransactionSignature2() {
    }
    AptosPendingTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureInput");
    };
    AptosPendingTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureValue");
    };
    return AptosPendingTransactionSignature2;
  }()
);
var AptosPendingTransaction = (
  /** @class */
  function() {
    function AptosPendingTransaction2(input) {
      this.hash = input.hash;
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosPendingTransactionPayload.create(input.payload);
      this.signature = AptosPendingTransactionSignature.create(input.signature);
    }
    AptosPendingTransaction2.create = function(input) {
      if (input instanceof AptosPendingTransaction2) {
        return input;
      }
      return new AptosPendingTransaction2(input);
    };
    AptosPendingTransaction2.fromJSON = function(json) {
      var input = {
        hash: json.hash,
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosPendingTransactionPayload.fromJSON(json.payload),
        signature: AptosPendingTransactionSignature.fromJSON(json.signature)
      };
      return AptosPendingTransaction2.create(input);
    };
    AptosPendingTransaction2.isInput = function(input) {
      return input.type === "pending_transaction";
    };
    AptosPendingTransaction2.isJSON = function(json) {
      return json.type === "pending_transaction";
    };
    AptosPendingTransaction2.prototype.toJSON = function() {
      return {
        hash: this.hash,
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosPendingTransactionPayload.toJSON(this.payload),
        signature: AptosPendingTransactionSignature.toJSON(this.signature)
      };
    };
    return AptosPendingTransaction2;
  }()
);
var AptosDeleteModuleChangeModule = (
  /** @class */
  function() {
    function AptosDeleteModuleChangeModule2() {
    }
    AptosDeleteModuleChangeModule2.create = function(input) {
      return input;
    };
    AptosDeleteModuleChangeModule2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteModuleChangeModule2;
  }()
);
var AptosDeleteModuleChange = (
  /** @class */
  function() {
    function AptosDeleteModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.module = AptosDeleteModuleChangeModule.create(input.module);
    }
    AptosDeleteModuleChange2.create = function(input) {
      if (input instanceof AptosDeleteModuleChange2) {
        return input;
      }
      return new AptosDeleteModuleChange2(input);
    };
    AptosDeleteModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        module: AptosDeleteModuleChangeModule.fromJSON(json.module)
      };
      return AptosDeleteModuleChange2.create(input);
    };
    AptosDeleteModuleChange2.isInput = function(input) {
      return input.type === "delete_module";
    };
    AptosDeleteModuleChange2.isJSON = function(json) {
      return json.type === "delete_module";
    };
    AptosDeleteModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        module: this.module
      };
    };
    return AptosDeleteModuleChange2;
  }()
);
var AptosDeleteResourceChangeResource = (
  /** @class */
  function() {
    function AptosDeleteResourceChangeResource2() {
    }
    AptosDeleteResourceChangeResource2.create = function(input) {
      return input;
    };
    AptosDeleteResourceChangeResource2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteResourceChangeResource2;
  }()
);
var AptosDeleteResourceChange = (
  /** @class */
  function() {
    function AptosDeleteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.resource = AptosDeleteResourceChangeResource.create(input.resource);
    }
    AptosDeleteResourceChange2.create = function(input) {
      if (input instanceof AptosDeleteResourceChange2) {
        return input;
      }
      return new AptosDeleteResourceChange2(input);
    };
    AptosDeleteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        resource: AptosDeleteResourceChangeResource.fromJSON(json.resource)
      };
      return AptosDeleteResourceChange2.create(input);
    };
    AptosDeleteResourceChange2.isInput = function(input) {
      return input.type === "delete_resource";
    };
    AptosDeleteResourceChange2.isJSON = function(json) {
      return json.type === "delete_resource";
    };
    AptosDeleteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        resource: this.resource
      };
    };
    return AptosDeleteResourceChange2;
  }()
);
var AptosDeleteTableItemChangeHandle = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeHandle2() {
    }
    AptosDeleteTableItemChangeHandle2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeHandle2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeHandle2;
  }()
);
var AptosDeleteTableItemChangeKey = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeKey2() {
    }
    AptosDeleteTableItemChangeKey2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeKey2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeKey2;
  }()
);
var AptosDeletedTableData = (
  /** @class */
  function() {
    function AptosDeletedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
    }
    AptosDeletedTableData2.create = function(input) {
      if (input instanceof AptosDeletedTableData2) {
        return input;
      }
      return new AptosDeletedTableData2(input);
    };
    AptosDeletedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type
      };
      return AptosDeletedTableData2.create(input);
    };
    AptosDeletedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType
      };
    };
    return AptosDeletedTableData2;
  }()
);
var AptosDeleteTableItemChange = (
  /** @class */
  function() {
    function AptosDeleteTableItemChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = AptosDeleteTableItemChangeHandle.create(input.handle);
      this.key = AptosDeleteTableItemChangeKey.create(input.key);
      this.data = AptosDeletedTableData.create(input.data);
    }
    AptosDeleteTableItemChange2.create = function(input) {
      if (input instanceof AptosDeleteTableItemChange2) {
        return input;
      }
      return new AptosDeleteTableItemChange2(input);
    };
    AptosDeleteTableItemChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: AptosDeleteTableItemChangeHandle.fromJSON(json.handle),
        key: AptosDeleteTableItemChangeKey.fromJSON(json.key),
        data: AptosDeletedTableData.fromJSON(json.data)
      };
      return AptosDeleteTableItemChange2.create(input);
    };
    AptosDeleteTableItemChange2.isInput = function(input) {
      return input.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.isJSON = function(json) {
      return json.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        data: this.data.toJSON()
      };
    };
    return AptosDeleteTableItemChange2;
  }()
);
var AptosWriteModuleData = (
  /** @class */
  function() {
    function AptosWriteModuleData2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosWriteModuleData2.create = function(input) {
      if (input instanceof AptosWriteModuleData2) {
        return input;
      }
      return new AptosWriteModuleData2(input);
    };
    AptosWriteModuleData2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosWriteModuleData2.create(input);
    };
    AptosWriteModuleData2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosWriteModuleData2;
  }()
);
var AptosWriteOrUpdateModuleChange = (
  /** @class */
  function() {
    function AptosWriteOrUpdateModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteModuleData.create(input.data);
    }
    AptosWriteOrUpdateModuleChange2.create = function(input) {
      if (input instanceof AptosWriteOrUpdateModuleChange2) {
        return input;
      }
      return new AptosWriteOrUpdateModuleChange2(input);
    };
    AptosWriteOrUpdateModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteModuleData.fromJSON(json.data)
      };
      return AptosWriteOrUpdateModuleChange2.create(input);
    };
    AptosWriteOrUpdateModuleChange2.isInput = function(input) {
      return input.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.isJSON = function(json) {
      return json.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteOrUpdateModuleChange2;
  }()
);
var AptosWriteResourceDataData = (
  /** @class */
  function() {
    function AptosWriteResourceDataData2() {
    }
    AptosWriteResourceDataData2.create = function(input) {
      return input;
    };
    AptosWriteResourceDataData2.fromJSON = function(json) {
      return json;
    };
    return AptosWriteResourceDataData2;
  }()
);
var AptosWriteResourceData = (
  /** @class */
  function() {
    function AptosWriteResourceData2(input) {
      this.type = input.type;
      this.data = AptosWriteResourceDataData.create(input.data);
    }
    AptosWriteResourceData2.create = function(input) {
      if (input instanceof AptosWriteResourceData2) {
        return input;
      }
      return new AptosWriteResourceData2(input);
    };
    AptosWriteResourceData2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosWriteResourceDataData.fromJSON(json.data)
      };
      return AptosWriteResourceData2.create(input);
    };
    AptosWriteResourceData2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosWriteResourceData2;
  }()
);
var AptosWriteResourceChange = (
  /** @class */
  function() {
    function AptosWriteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteResourceData.create(input.data);
    }
    AptosWriteResourceChange2.create = function(input) {
      if (input instanceof AptosWriteResourceChange2) {
        return input;
      }
      return new AptosWriteResourceChange2(input);
    };
    AptosWriteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteResourceData.fromJSON(json.data)
      };
      return AptosWriteResourceChange2.create(input);
    };
    AptosWriteResourceChange2.isInput = function(input) {
      return input.type === "write_resource";
    };
    AptosWriteResourceChange2.isJSON = function(json) {
      return json.type === "write_resource";
    };
    AptosWriteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteResourceChange2;
  }()
);
var AptosDecodedTableData = (
  /** @class */
  function() {
    function AptosDecodedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
      this.value = input.value;
      this.valueType = input.valueType;
    }
    AptosDecodedTableData2.create = function(input) {
      if (input instanceof AptosDecodedTableData2) {
        return input;
      }
      return new AptosDecodedTableData2(input);
    };
    AptosDecodedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type,
        value: json.value,
        valueType: json.value_type
      };
      return AptosDecodedTableData2.create(input);
    };
    AptosDecodedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType,
        value: this.value,
        value_type: this.valueType
      };
    };
    return AptosDecodedTableData2;
  }()
);
var AptosWriteTableChangeSetChange = (
  /** @class */
  function() {
    function AptosWriteTableChangeSetChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = input.handle;
      this.key = input.key;
      this.value = input.value;
      this.data = AptosDecodedTableData.create(input.data);
    }
    AptosWriteTableChangeSetChange2.create = function(input) {
      if (input instanceof AptosWriteTableChangeSetChange2) {
        return input;
      }
      return new AptosWriteTableChangeSetChange2(input);
    };
    AptosWriteTableChangeSetChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: json.handle,
        key: json.key,
        value: json.value,
        data: AptosDecodedTableData.fromJSON(json.data)
      };
      return AptosWriteTableChangeSetChange2.create(input);
    };
    AptosWriteTableChangeSetChange2.isInput = function(input) {
      return input.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.isJSON = function(json) {
      return json.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        value: this.value,
        data: this.data.toJSON()
      };
    };
    return AptosWriteTableChangeSetChange2;
  }()
);
var AptosUserTransactionChangesItem = (
  /** @class */
  function() {
    function AptosUserTransactionChangesItem2() {
    }
    AptosUserTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemInput");
    };
    AptosUserTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemValue");
    };
    return AptosUserTransactionChangesItem2;
  }()
);
var AptosUserTransactionPayload = (
  /** @class */
  function() {
    function AptosUserTransactionPayload2() {
    }
    AptosUserTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadInput");
    };
    AptosUserTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadValue");
    };
    return AptosUserTransactionPayload2;
  }()
);
var AptosUserTransactionSignature = (
  /** @class */
  function() {
    function AptosUserTransactionSignature2() {
    }
    AptosUserTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureInput");
    };
    AptosUserTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureValue");
    };
    return AptosUserTransactionSignature2;
  }()
);
var AptosTransactionEventData = (
  /** @class */
  function() {
    function AptosTransactionEventData2() {
    }
    AptosTransactionEventData2.create = function(input) {
      return input;
    };
    AptosTransactionEventData2.fromJSON = function(json) {
      return json;
    };
    return AptosTransactionEventData2;
  }()
);
var AptosTransactionEvent = (
  /** @class */
  function() {
    function AptosTransactionEvent2(input) {
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosTransactionEventData.create(input.data);
    }
    AptosTransactionEvent2.create = function(input) {
      if (input instanceof AptosTransactionEvent2) {
        return input;
      }
      return new AptosTransactionEvent2(input);
    };
    AptosTransactionEvent2.fromJSON = function(json) {
      var input = {
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosTransactionEventData.fromJSON(json.data)
      };
      return AptosTransactionEvent2.create(input);
    };
    AptosTransactionEvent2.prototype.toJSON = function() {
      return {
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosTransactionEvent2;
  }()
);
var AptosUserTransaction = (
  /** @class */
  function() {
    function AptosUserTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosUserTransactionChangesItem.create(item);
      });
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosUserTransactionPayload.create(input.payload);
      this.signature = AptosUserTransactionSignature.create(input.signature);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosUserTransaction2.create = function(input) {
      if (input instanceof AptosUserTransaction2) {
        return input;
      }
      return new AptosUserTransaction2(input);
    };
    AptosUserTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosUserTransactionChangesItem.fromJSON(item);
        }),
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosUserTransactionPayload.fromJSON(json.payload),
        signature: AptosUserTransactionSignature.fromJSON(json.signature),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosUserTransaction2.create(input);
    };
    AptosUserTransaction2.isInput = function(input) {
      return input.type === "user_transaction";
    };
    AptosUserTransaction2.isJSON = function(json) {
      return json.type === "user_transaction";
    };
    AptosUserTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosUserTransactionChangesItem.toJSON(item);
        }),
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosUserTransactionPayload.toJSON(this.payload),
        signature: AptosUserTransactionSignature.toJSON(this.signature),
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        timestamp: this.timestamp
      };
    };
    return AptosUserTransaction2;
  }()
);
var AptosGenesisTransactionChangesItem = (
  /** @class */
  function() {
    function AptosGenesisTransactionChangesItem2() {
    }
    AptosGenesisTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemInput");
    };
    AptosGenesisTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGenesisTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemValue");
    };
    return AptosGenesisTransactionChangesItem2;
  }()
);
var AptosScriptWriteSet = (
  /** @class */
  function() {
    function AptosScriptWriteSet2(input) {
      this.type = input.type;
      this.executeAs = input.executeAs;
      this.script = AptosScriptPayloadRequest.create(input.script);
    }
    AptosScriptWriteSet2.create = function(input) {
      if (input instanceof AptosScriptWriteSet2) {
        return input;
      }
      return new AptosScriptWriteSet2(input);
    };
    AptosScriptWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        executeAs: json.execute_as,
        script: AptosScriptPayloadRequest.fromJSON(json.script)
      };
      return AptosScriptWriteSet2.create(input);
    };
    AptosScriptWriteSet2.isInput = function(input) {
      return input.type === "script_write_set";
    };
    AptosScriptWriteSet2.isJSON = function(json) {
      return json.type === "script_write_set";
    };
    AptosScriptWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        execute_as: this.executeAs,
        script: this.script.toJSON()
      };
    };
    return AptosScriptWriteSet2;
  }()
);
var AptosDirectWriteSet = (
  /** @class */
  function() {
    function AptosDirectWriteSet2(input) {
      this.type = input.type;
      this.changes = input.changes;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosDirectWriteSet2.create = function(input) {
      if (input instanceof AptosDirectWriteSet2) {
        return input;
      }
      return new AptosDirectWriteSet2(input);
    };
    AptosDirectWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        changes: json.changes,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosDirectWriteSet2.create(input);
    };
    AptosDirectWriteSet2.isInput = function(input) {
      return input.type === "direct_write_set";
    };
    AptosDirectWriteSet2.isJSON = function(json) {
      return json.type === "direct_write_set";
    };
    AptosDirectWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        changes: this.changes,
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosDirectWriteSet2;
  }()
);
var AptosWriteSetPayloadWriteSet = (
  /** @class */
  function() {
    function AptosWriteSetPayloadWriteSet2() {
    }
    AptosWriteSetPayloadWriteSet2.create = function(input) {
      if (AptosScriptWriteSet.isInput(input)) {
        return AptosScriptWriteSet.create(input);
      }
      if (AptosDirectWriteSet.isInput(input)) {
        return AptosDirectWriteSet.create(input);
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetInput");
    };
    AptosWriteSetPayloadWriteSet2.fromJSON = function(json) {
      if (AptosScriptWriteSet.isJSON(json)) {
        return AptosScriptWriteSet.fromJSON(json);
      }
      if (AptosDirectWriteSet.isJSON(json)) {
        return AptosDirectWriteSet.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosWriteSetPayloadWriteSet2.toJSON = function(value) {
      if (value instanceof AptosScriptWriteSet) {
        return value.toJSON();
      }
      if (value instanceof AptosDirectWriteSet) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetValue");
    };
    return AptosWriteSetPayloadWriteSet2;
  }()
);
var AptosWriteSetPayload = (
  /** @class */
  function() {
    function AptosWriteSetPayload2(input) {
      this.type = input.type;
      this.writeSet = AptosWriteSetPayloadWriteSet.create(input.writeSet);
    }
    AptosWriteSetPayload2.create = function(input) {
      if (input instanceof AptosWriteSetPayload2) {
        return input;
      }
      return new AptosWriteSetPayload2(input);
    };
    AptosWriteSetPayload2.fromJSON = function(json) {
      var input = {
        type: json.type,
        writeSet: AptosWriteSetPayloadWriteSet.fromJSON(json.write_set)
      };
      return AptosWriteSetPayload2.create(input);
    };
    AptosWriteSetPayload2.prototype.toJSON = function() {
      return {
        type: this.type,
        write_set: AptosWriteSetPayloadWriteSet.toJSON(this.writeSet)
      };
    };
    return AptosWriteSetPayload2;
  }()
);
var AptosGenesisTransaction = (
  /** @class */
  function() {
    function AptosGenesisTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosGenesisTransactionChangesItem.create(item);
      });
      this.payload = AptosWriteSetPayload.create(input.payload);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosGenesisTransaction2.create = function(input) {
      if (input instanceof AptosGenesisTransaction2) {
        return input;
      }
      return new AptosGenesisTransaction2(input);
    };
    AptosGenesisTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.fromJSON(item);
        }),
        payload: AptosWriteSetPayload.fromJSON(json.payload),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosGenesisTransaction2.create(input);
    };
    AptosGenesisTransaction2.isInput = function(input) {
      return input.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.isJSON = function(json) {
      return json.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.toJSON(item);
        }),
        payload: this.payload.toJSON(),
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGenesisTransaction2;
  }()
);
var AptosBlockMetadataTransactionChangesItem = (
  /** @class */
  function() {
    function AptosBlockMetadataTransactionChangesItem2() {
    }
    AptosBlockMetadataTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemInput");
    };
    AptosBlockMetadataTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockMetadataTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemValue");
    };
    return AptosBlockMetadataTransactionChangesItem2;
  }()
);
var AptosBlockMetadataTransaction = (
  /** @class */
  function() {
    function AptosBlockMetadataTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosBlockMetadataTransactionChangesItem.create(item);
      });
      this.id = input.id;
      this.epoch = input.epoch;
      this.round = input.round;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.previousBlockVotesBitvec = input.previousBlockVotesBitvec;
      this.proposer = AptosAddress.create(input.proposer);
      this.failedProposerIndices = input.failedProposerIndices;
      this.timestamp = input.timestamp;
    }
    AptosBlockMetadataTransaction2.create = function(input) {
      if (input instanceof AptosBlockMetadataTransaction2) {
        return input;
      }
      return new AptosBlockMetadataTransaction2(input);
    };
    AptosBlockMetadataTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.fromJSON(item);
        }),
        id: json.id,
        epoch: json.epoch,
        round: json.round,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        previousBlockVotesBitvec: json.previous_block_votes_bitvec,
        proposer: AptosAddress.fromJSON(json.proposer),
        failedProposerIndices: json.failed_proposer_indices,
        timestamp: json.timestamp
      };
      return AptosBlockMetadataTransaction2.create(input);
    };
    AptosBlockMetadataTransaction2.isInput = function(input) {
      return input.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.isJSON = function(json) {
      return json.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.toJSON(item);
        }),
        id: this.id,
        epoch: this.epoch,
        round: this.round,
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        previous_block_votes_bitvec: this.previousBlockVotesBitvec,
        proposer: this.proposer.toJSON(),
        failed_proposer_indices: this.failedProposerIndices,
        timestamp: this.timestamp
      };
    };
    return AptosBlockMetadataTransaction2;
  }()
);
var AptosStateCheckpointTransactionChangesItem = (
  /** @class */
  function() {
    function AptosStateCheckpointTransactionChangesItem2() {
    }
    AptosStateCheckpointTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemInput");
    };
    AptosStateCheckpointTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosStateCheckpointTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemValue");
    };
    return AptosStateCheckpointTransactionChangesItem2;
  }()
);
var AptosStateCheckpointTransaction = (
  /** @class */
  function() {
    function AptosStateCheckpointTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosStateCheckpointTransactionChangesItem.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosStateCheckpointTransaction2.create = function(input) {
      if (input instanceof AptosStateCheckpointTransaction2) {
        return input;
      }
      return new AptosStateCheckpointTransaction2(input);
    };
    AptosStateCheckpointTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosStateCheckpointTransaction2.create(input);
    };
    AptosStateCheckpointTransaction2.isInput = function(input) {
      return input.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.isJSON = function(json) {
      return json.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.toJSON(item);
        }),
        timestamp: this.timestamp
      };
    };
    return AptosStateCheckpointTransaction2;
  }()
);
var AptosGetTransactionsItem = (
  /** @class */
  function() {
    function AptosGetTransactionsItem2() {
    }
    AptosGetTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemInput");
    };
    AptosGetTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemValue");
    };
    return AptosGetTransactionsItem2;
  }()
);
var GetTransactionsOperation = {
  operationId: "getTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions",
  parameterNames: ["limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitTransactionRequestPayload = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestPayload2() {
    }
    AptosSubmitTransactionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadInput");
    };
    AptosSubmitTransactionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadValue");
    };
    return AptosSubmitTransactionRequestPayload2;
  }()
);
var AptosSubmitTransactionRequestSignature = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestSignature2() {
    }
    AptosSubmitTransactionRequestSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureInput");
    };
    AptosSubmitTransactionRequestSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureValue");
    };
    return AptosSubmitTransactionRequestSignature2;
  }()
);
var AptosSubmitTransactionRequest = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosSubmitTransactionRequestPayload.create(input.payload);
      this.signature = AptosSubmitTransactionRequestSignature.create(input.signature);
    }
    AptosSubmitTransactionRequest2.create = function(input) {
      if (input instanceof AptosSubmitTransactionRequest2) {
        return input;
      }
      return new AptosSubmitTransactionRequest2(input);
    };
    AptosSubmitTransactionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosSubmitTransactionRequestPayload.fromJSON(json.payload),
        signature: AptosSubmitTransactionRequestSignature.fromJSON(json.signature)
      };
      return AptosSubmitTransactionRequest2.create(input);
    };
    AptosSubmitTransactionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosSubmitTransactionRequestPayload.toJSON(this.payload),
        signature: AptosSubmitTransactionRequestSignature.toJSON(this.signature)
      };
    };
    return AptosSubmitTransactionRequest2;
  }()
);
var SubmitTransactionOperation = {
  operationId: "submitTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosPendingTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosGetTransactionByHash = (
  /** @class */
  function() {
    function AptosGetTransactionByHash2() {
    }
    AptosGetTransactionByHash2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashInput");
    };
    AptosGetTransactionByHash2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByHashJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByHash2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashValue");
    };
    return AptosGetTransactionByHash2;
  }()
);
var GetTransactionByHashOperation = {
  operationId: "getTransactionByHash",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_hash/{txn_hash}",
  parameterNames: ["txn_hash", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByHash.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnHash = request.txnHash;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_hash: txnHash,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetTransactionByVersion = (
  /** @class */
  function() {
    function AptosGetTransactionByVersion2() {
    }
    AptosGetTransactionByVersion2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionInput");
    };
    AptosGetTransactionByVersion2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByVersion2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionValue");
    };
    return AptosGetTransactionByVersion2;
  }()
);
var GetTransactionByVersionOperation = {
  operationId: "getTransactionByVersion",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_version/{txn_version}",
  parameterNames: ["txn_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByVersion.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnVersion = request.txnVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_version: txnVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountTransactionsItem = (
  /** @class */
  function() {
    function AptosGetAccountTransactionsItem2() {
    }
    AptosGetAccountTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemInput");
    };
    AptosGetAccountTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetAccountTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemValue");
    };
    return AptosGetAccountTransactionsItem2;
  }()
);
var GetAccountTransactionsOperation = {
  operationId: "getAccountTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/accounts/{address}/transactions",
  parameterNames: ["address", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitBatchTransactionResult = (
  /** @class */
  function() {
    function AptosSubmitBatchTransactionResult2(input) {
      this.transactionFailures = input.transactionFailures;
    }
    AptosSubmitBatchTransactionResult2.create = function(input) {
      if (input instanceof AptosSubmitBatchTransactionResult2) {
        return input;
      }
      return new AptosSubmitBatchTransactionResult2(input);
    };
    AptosSubmitBatchTransactionResult2.fromJSON = function(json) {
      var input = {
        transactionFailures: json.transaction_failures
      };
      return AptosSubmitBatchTransactionResult2.create(input);
    };
    AptosSubmitBatchTransactionResult2.prototype.toJSON = function() {
      return {
        transaction_failures: this.transactionFailures
      };
    };
    return AptosSubmitBatchTransactionResult2;
  }()
);
var SubmitBatchTransactionsOperation = {
  operationId: "submitBatchTransactions",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/batch",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSubmitBatchTransactionResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = body.map(function(item) {
      return AptosSubmitTransactionRequest.create(item);
    });
    return value.map(function(item) {
      return item.toJSON();
    });
  }
};
var AptosSimulateTransaction = (
  /** @class */
  function() {
    function AptosSimulateTransaction2() {
    }
    AptosSimulateTransaction2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionInput");
    };
    AptosSimulateTransaction2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSimulateTransactionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSimulateTransaction2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionValue");
    };
    return AptosSimulateTransaction2;
  }()
);
var SimulateTransactionOperation = {
  operationId: "simulateTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/simulate",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSimulateTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEncodeSubmissionRequestPayload = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequestPayload2() {
    }
    AptosEncodeSubmissionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadInput");
    };
    AptosEncodeSubmissionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosEncodeSubmissionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadValue");
    };
    return AptosEncodeSubmissionRequestPayload2;
  }()
);
var AptosEncodeSubmissionRequest = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosEncodeSubmissionRequestPayload.create(input.payload);
      this.secondarySigners = input.secondarySigners;
    }
    AptosEncodeSubmissionRequest2.create = function(input) {
      if (input instanceof AptosEncodeSubmissionRequest2) {
        return input;
      }
      return new AptosEncodeSubmissionRequest2(input);
    };
    AptosEncodeSubmissionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosEncodeSubmissionRequestPayload.fromJSON(json.payload),
        secondarySigners: json.secondary_signers
      };
      return AptosEncodeSubmissionRequest2.create(input);
    };
    AptosEncodeSubmissionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosEncodeSubmissionRequestPayload.toJSON(this.payload),
        secondary_signers: this.secondarySigners
      };
    };
    return AptosEncodeSubmissionRequest2;
  }()
);
var EncodeSubmissionOperation = {
  operationId: "encodeSubmission",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/encode_submission",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json;
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosEncodeSubmissionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEstimateGasPriceResult = (
  /** @class */
  function() {
    function AptosEstimateGasPriceResult2(input) {
      this.deprioritizedGasEstimate = input.deprioritizedGasEstimate;
      this.gasEstimate = input.gasEstimate;
      this.prioritizedGasEstimate = input.prioritizedGasEstimate;
    }
    AptosEstimateGasPriceResult2.create = function(input) {
      if (input instanceof AptosEstimateGasPriceResult2) {
        return input;
      }
      return new AptosEstimateGasPriceResult2(input);
    };
    AptosEstimateGasPriceResult2.fromJSON = function(json) {
      var input = {
        deprioritizedGasEstimate: json.deprioritized_gas_estimate,
        gasEstimate: json.gas_estimate,
        prioritizedGasEstimate: json.prioritized_gas_estimate
      };
      return AptosEstimateGasPriceResult2.create(input);
    };
    AptosEstimateGasPriceResult2.prototype.toJSON = function() {
      return {
        deprioritized_gas_estimate: this.deprioritizedGasEstimate,
        gas_estimate: this.gasEstimate,
        prioritized_gas_estimate: this.prioritizedGasEstimate
      };
    };
    return AptosEstimateGasPriceResult2;
  }()
);
var EstimateGasPriceOperation = {
  operationId: "estimateGasPrice",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/estimate_gas_price",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosEstimateGasPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosBlockTransactionsItem = (
  /** @class */
  function() {
    function AptosBlockTransactionsItem2() {
    }
    AptosBlockTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemInput");
    };
    AptosBlockTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemValue");
    };
    return AptosBlockTransactionsItem2;
  }()
);
var AptosBlock = (
  /** @class */
  function() {
    function AptosBlock2(input) {
      this.blockHeight = input.blockHeight;
      this.blockHash = input.blockHash;
      this.blockTimestamp = input.blockTimestamp;
      this.firstVersion = input.firstVersion;
      this.lastVersion = input.lastVersion;
      this.transactions = input.transactions ? input.transactions.map(function(item) {
        return AptosBlockTransactionsItem.create(item);
      }) : void 0;
    }
    AptosBlock2.create = function(input) {
      if (input instanceof AptosBlock2) {
        return input;
      }
      return new AptosBlock2(input);
    };
    AptosBlock2.fromJSON = function(json) {
      var input = {
        blockHeight: json.block_height,
        blockHash: json.block_hash,
        blockTimestamp: json.block_timestamp,
        firstVersion: json.first_version,
        lastVersion: json.last_version,
        transactions: json.transactions ? json.transactions.map(function(item) {
          return AptosBlockTransactionsItem.fromJSON(item);
        }) : void 0
      };
      return AptosBlock2.create(input);
    };
    AptosBlock2.prototype.toJSON = function() {
      return {
        block_height: this.blockHeight,
        block_hash: this.blockHash,
        block_timestamp: this.blockTimestamp,
        first_version: this.firstVersion,
        last_version: this.lastVersion,
        transactions: this.transactions ? this.transactions.map(function(item) {
          return AptosBlockTransactionsItem.toJSON(item);
        }) : void 0
      };
    };
    return AptosBlock2;
  }()
);
var GetBlockByHeightOperation = {
  operationId: "getBlockByHeight",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/{block_height}",
  parameterNames: ["block_height", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var blockHeight = request.blockHeight;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      block_height: blockHeight,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetBlockByVersionOperation = {
  operationId: "getBlockByVersion",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/by_version/{version}",
  parameterNames: ["version", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var version11 = request.version;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      version: version11,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AbstractClient = (
  /** @class */
  /* @__PURE__ */ function() {
    function AbstractClient2() {
      this.accounts = {
        /**
         * @description Get account
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccount: this.createEndpoint(GetAccountOperation),
        /**
         * @description Get account resources
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountResources: this.createEndpoint(GetAccountResourcesOperation),
        /**
         * @description Get account modules
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountModules: this.createEndpoint(GetAccountModulesOperation),
        /**
         * @description Get account resource
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.resourceType Name of struct to retrieve e.g. 0x1::account::Account
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountResource: this.createEndpoint(GetAccountResourceOperation),
        /**
         * @description Get account module
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.moduleName Name of module to retrieve
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountModule: this.createEndpoint(GetAccountModuleOperation),
        /**
         * @description Get events by creation number
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.creationNumber Creation number corresponding to the event stream originating from the given account.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByCreationNumber: this.createEndpoint(GetEventsByCreationNumberOperation),
        /**
         * @description Get events by event handle
         * @param request Request with parameters.
         * @param {String} request.address Hex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.
         * @param {String} request.eventHandle Name of struct to lookup event handle.
         * @param {String} request.fieldName Name of field to lookup event handle.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByEventHandle: this.createEndpoint(GetEventsByEventHandleOperation)
      };
      this.blocks = {
        /**
         * @description Get block by height
         * @param request Request with parameters.
         * @param {Number} request.blockHeight Block height to lookup. Starts at 0
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByHeight: this.createEndpoint(GetBlockByHeightOperation),
        /**
         * @description Get block by version
         * @param request Request with parameters.
         * @param {Number} request.version Ledger version to lookup block information for.
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByVersion: this.createEndpoint(GetBlockByVersionOperation)
      };
      this.coins = {
        /**
         * @description Get Coin Metadata by Coin Type Hashes
         * @param request Request with parameters.
         * @param {String[]} request.coinTypeHashes The coin type hashes to fetch info about
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getCoinInfoByCoinTypeHashes: this.createEndpoint(GetCoinInfoByCoinTypeHashesOperation),
        /**
         * @description Get latest deployed coins
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getLatestCoins: this.createEndpoint(GetLatestCoinsOperation),
        /**
         * @description Get Coin Metadata by name range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByNameRange: this.createEndpoint(GetCoinsByNameRangeOperation),
        /**
         * @description Get Coin Metadata by symbol range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromSymbol] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toSymbol] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsBySymbolRange: this.createEndpoint(GetCoinsBySymbolRangeOperation),
        /**
         * @description Get Coin Metadata by creator addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByCreators: this.createEndpoint(GetCoinsByCreatorsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByOwnerAddresses: this.createEndpoint(GetCoinTransfersByOwnerAddressesOperation),
        /**
         * @description Get Coin Transfers by block heights
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.blockHeights The coin types to fetch info about
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByBlockHeights: this.createEndpoint(GetCoinTransfersByBlockHeightsOperation),
        /**
         * @description Get Coin Transfers by Coin Type
         * @param request Request with parameters.
         * @param {String} request.coinType The coin type to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByCoinType: this.createEndpoint(GetCoinTransfersByCoinTypeOperation),
        /**
         * @description Get top Holders of Coin
         * @param request Request with parameters.
         * @param {String} request.coinTypeHash The coin type hash to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.minAmount] The minimum amount of coins required for a wallet to be included in the results (optional)
         * @param {Number} [request.minVersion] The minimum version on when the balance was last updated (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTopHoldersByCoin: this.createEndpoint(GetTopHoldersByCoinOperation)
      };
      this.collections = {
        /**
         * @description Get NFT Collections
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the collection to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the collection to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollections: this.createEndpoint(GetNFTCollectionsOperation),
        /**
         * @description Get NFT Collections by ids
         * @param request Request with parameters.
         * @param {String[]} request.ids The identifiers of the collections to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTCollectionsByIds: this.createEndpoint(GetNFTCollectionsByIdsOperation),
        /**
         * @description Get NFT Collections by creator
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object} request.creatorAddress The address of the creator
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollectionsByCreator: this.createEndpoint(GetNFTCollectionsByCreatorOperation)
      };
      this.nfts = {
        /**
         * @description Get NFTs by ids
         * @param request Request with parameters.
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTsByIds: this.createEndpoint(GetNFTsByIdsOperation),
        /**
         * @description Get NFTs by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the collection
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCollection: this.createEndpoint(GetNFTsByCollectionOperation),
        /**
         * @description Get NFTs by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCreators: this.createEndpoint(GetNFTsByCreatorsOperation),
        /**
         * @description Get NFT Owners by tokens
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get owners for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByTokens: this.createEndpoint(GetNFTOwnersByTokensOperation),
        /**
         * @description Get NFT Owners by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByCollection: this.createEndpoint(GetNFTOwnersByCollectionOperation),
        /**
         * @description Get NFT Owners of Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersOfCollection: this.createEndpoint(GetNFTOwnersOfCollectionOperation),
        /**
         * @description Get NFT Transfers by Token ids
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByIds: this.createEndpoint(GetNFTTransfersByIdsOperation),
        /**
         * @description Get NFT Transfers by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCollection: this.createEndpoint(GetNFTTransfersByCollectionOperation),
        /**
         * @description Get NFT Transfers by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCreators: this.createEndpoint(GetNFTTransfersByCreatorsOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByWallets: this.createEndpoint(GetNFTTransfersByWalletsOperation)
      };
      this.transactions = {
        /**
         * @description Get transactions
         * @param request Request with parameters.
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getTransactions: this.createEndpoint(GetTransactionsOperation),
        /**
         * @description Submit transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitTransaction: this.createEndpointWithBody(SubmitTransactionOperation),
        /**
         * @description Get transaction by hash
         * @param request Request with parameters.
         * @param {String} request.txnHash Hash of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByHash: this.createEndpoint(GetTransactionByHashOperation),
        /**
         * @description Get transaction by version
         * @param request Request with parameters.
         * @param {String} request.txnVersion Version of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByVersion: this.createEndpoint(GetTransactionByVersionOperation),
        /**
         * @description Get account transactions
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountTransactions: this.createEndpoint(GetAccountTransactionsOperation),
        /**
         * @description Submit batch transactions
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitBatchTransactions: this.createEndpointWithBody(SubmitBatchTransactionsOperation),
        /**
         * @description Simulate transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        simulateTransaction: this.createEndpointWithBody(SimulateTransactionOperation),
        /**
         * @description Encode submission
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {String[]} body.secondarySigners Secondary signer accounts of the request for Multi-agent
         * @returns {String} Response for the request.
         */
        encodeSubmission: this.createEndpointWithBody(EncodeSubmissionOperation),
        /**
         * @description Estimate gas price
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        estimateGasPrice: this.createEndpoint(EstimateGasPriceOperation)
      };
      this.wallets = {
        /**
         * @description Get Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get coin balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hashes of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hashes of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinBalancesByWallets: this.createEndpoint(GetCoinBalancesByWalletsOperation),
        /**
         * @description Get Historical Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owner addresses to get historical balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hash of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hash of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getHistoricalCoinBalancesByWallets: this.createEndpoint(GetHistoricalCoinBalancesByWalletsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByWalletAddresses: this.createEndpoint(GetCoinTransfersByWalletAddressesOperation),
        /**
         * @description Get NFTs by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The collection data id hashes of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The collection data id hashes of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTByOwners: this.createEndpoint(GetNFTByOwnersOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getWalletsNFTTransfers: this.createEndpoint(GetWalletsNFTTransfersOperation)
      };
    }
    return AbstractClient2;
  }()
);
var AptosMultiAgentSignatureRequestSender = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSender2() {
    }
    AptosMultiAgentSignatureRequestSender2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderInput");
    };
    AptosMultiAgentSignatureRequestSender2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSender2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderValue");
    };
    return AptosMultiAgentSignatureRequestSender2;
  }()
);

// node_modules/@moralisweb3/common-evm-utils/lib/esm/index.js
var import_dist49 = __toESM(require_dist());
var import_dist50 = __toESM(require_dist2());
var import_dist51 = __toESM(require_dist3());

// node_modules/@ethersproject/address/lib.esm/index.js
var import_dist46 = __toESM(require_dist());
var import_dist47 = __toESM(require_dist2());
var import_dist48 = __toESM(require_dist3());

// node_modules/@ethersproject/bytes/lib.esm/index.js
var import_dist19 = __toESM(require_dist());
var import_dist20 = __toESM(require_dist2());
var import_dist21 = __toESM(require_dist3());

// node_modules/@ethersproject/logger/lib.esm/index.js
var import_dist13 = __toESM(require_dist());
var import_dist14 = __toESM(require_dist2());
var import_dist15 = __toESM(require_dist3());

// node_modules/@ethersproject/logger/lib.esm/_version.js
var import_dist10 = __toESM(require_dist());
var import_dist11 = __toESM(require_dist2());
var import_dist12 = __toESM(require_dist3());
var version = "logger/5.8.0";

// node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = class _Logger {
  constructor(version11) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version11,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(_Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(_Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(_Logger.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = _Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX[value[i] >> 4];
            hex += HEX[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name, value) {
    return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new _Logger(version);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      _Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version11) {
    return new _Logger(version11);
  }
};
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var import_dist16 = __toESM(require_dist());
var import_dist17 = __toESM(require_dist2());
var import_dist18 = __toESM(require_dist3());
var version2 = "bytes/5.8.0";

// node_modules/@ethersproject/bytes/lib.esm/index.js
var logger = new Logger(version2);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature)) {
    let bytes = arrayify(signature);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature.r;
    result.s = signature.s;
    result.v = signature.v;
    result.recoveryParam = signature.recoveryParam;
    result._vs = signature._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
      }
      vs2[0] &= 127;
      const s = hexlify(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature) {
  signature = splitSignature(signature);
  return hexlify(concat([
    signature.r,
    signature.s,
    signature.recoveryParam ? "0x1c" : "0x1b"
  ]));
}

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var import_dist31 = __toESM(require_dist());
var import_dist32 = __toESM(require_dist2());
var import_dist33 = __toESM(require_dist3());

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_dist25 = __toESM(require_dist());
var import_dist26 = __toESM(require_dist2());
var import_dist27 = __toESM(require_dist3());
var import_bn = __toESM(require_bn());

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var import_dist22 = __toESM(require_dist());
var import_dist23 = __toESM(require_dist2());
var import_dist24 = __toESM(require_dist3());
var version3 = "bignumber/5.8.0";

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN = import_bn.default.BN;
var logger2 = new Logger(version3);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber2.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
var _warnedToStringRadix = false;
var BigNumber2 = class _BigNumber {
  constructor(constructorGuard, hex) {
    if (constructorGuard !== _constructorGuard) {
      logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return _BigNumber.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o = _BigNumber.from(other);
    if (o.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof _BigNumber) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new _BigNumber(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new _BigNumber(_constructorGuard, toHex(new BN(value)));
      }
      return logger2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return _BigNumber.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return _BigNumber.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return _BigNumber.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return _BigNumber.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
            return _BigNumber.from(hex);
          }
        }
      }
    }
    return logger2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber2.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber2.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var import_dist28 = __toESM(require_dist());
var import_dist29 = __toESM(require_dist2());
var import_dist30 = __toESM(require_dist3());
var logger3 = new Logger(version3);
var _constructorGuard2 = {};
var Zero = BigNumber2.from(0);
var NegativeOne = BigNumber2.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier2(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber2.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  value = BigNumber2.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber2.from(whole);
  const fractionValue = BigNumber2.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class _FixedFormat {
  constructor(constructorGuard, signed2, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed2;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier2(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof _FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger3.throwArgumentError("invalid fixed format", "format", value);
        }
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type) {
          logger3.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
  }
};
var FixedNumber = class _FixedNumber {
  constructor(constructorGuard, hex, value, format) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  // @TODO: Support other rounding algorithms
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber2.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return _FixedNumber.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber2.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return _FixedNumber.fromString(value, format);
    }
    if (isBytes(value)) {
      return _FixedNumber.fromBytes(value, format);
    }
    try {
      return _FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_dist34 = __toESM(require_dist());
var import_dist35 = __toESM(require_dist2());
var import_dist36 = __toESM(require_dist3());
var import_js_sha3 = __toESM(require_sha3());
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}

// node_modules/@ethersproject/rlp/lib.esm/index.js
var import_dist40 = __toESM(require_dist());
var import_dist41 = __toESM(require_dist2());
var import_dist42 = __toESM(require_dist3());

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var import_dist37 = __toESM(require_dist());
var import_dist38 = __toESM(require_dist2());
var import_dist39 = __toESM(require_dist3());
var version4 = "rlp/5.8.0";

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger4 = new Logger(version4);

// node_modules/@ethersproject/address/lib.esm/_version.js
var import_dist43 = __toESM(require_dist());
var import_dist44 = __toESM(require_dist2());
var import_dist45 = __toESM(require_dist3());
var version5 = "address/5.8.0";

// node_modules/@ethersproject/address/lib.esm/index.js
var logger5 = new Logger(version5);
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger5.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger5.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}

// node_modules/@moralisweb3/common-evm-utils/lib/esm/index.js
var EvmNftTradesChainList = (
  /** @class */
  function() {
    function EvmNftTradesChainList2() {
    }
    EvmNftTradesChainList2.create = function(input) {
      return input;
    };
    EvmNftTradesChainList2.fromJSON = function(json) {
      return json;
    };
    return EvmNftTradesChainList2;
  }()
);
var EvmGetNFTTradesMarketplaceEnum = (
  /** @class */
  function() {
    function EvmGetNFTTradesMarketplaceEnum2() {
    }
    EvmGetNFTTradesMarketplaceEnum2.create = function(input) {
      return input;
    };
    EvmGetNFTTradesMarketplaceEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetNFTTradesMarketplaceEnum2;
  }()
);
var EvmChainList = (
  /** @class */
  function() {
    function EvmChainList2() {
    }
    EvmChainList2.create = function(input) {
      return input;
    };
    EvmChainList2.fromJSON = function(json) {
      return json;
    };
    return EvmChainList2;
  }()
);
var EvmGetMultipleTokenPricesIncludeEnum = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesIncludeEnum2() {
    }
    EvmGetMultipleTokenPricesIncludeEnum2.create = function(input) {
      return input;
    };
    EvmGetMultipleTokenPricesIncludeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetMultipleTokenPricesIncludeEnum2;
  }()
);
var EvmOrderList = (
  /** @class */
  function() {
    function EvmOrderList2() {
    }
    EvmOrderList2.create = function(input) {
      return input;
    };
    EvmOrderList2.fromJSON = function(json) {
      return json;
    };
    return EvmOrderList2;
  }()
);
var EvmResolveAddressToDomainCurrencyEnum = (
  /** @class */
  function() {
    function EvmResolveAddressToDomainCurrencyEnum2() {
    }
    EvmResolveAddressToDomainCurrencyEnum2.create = function(input) {
      return input;
    };
    EvmResolveAddressToDomainCurrencyEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmResolveAddressToDomainCurrencyEnum2;
  }()
);
var EvmDefiProtocolList = (
  /** @class */
  function() {
    function EvmDefiProtocolList2() {
    }
    EvmDefiProtocolList2.create = function(input) {
      return input;
    };
    EvmDefiProtocolList2.fromJSON = function(json) {
      return json;
    };
    return EvmDefiProtocolList2;
  }()
);
var EvmDiscoveryApiChainsList = (
  /** @class */
  function() {
    function EvmDiscoveryApiChainsList2() {
    }
    EvmDiscoveryApiChainsList2.create = function(input) {
      return input;
    };
    EvmDiscoveryApiChainsList2.fromJSON = function(json) {
      return json;
    };
    return EvmDiscoveryApiChainsList2;
  }()
);
var EvmETransactionCategory = (
  /** @class */
  function() {
    function EvmETransactionCategory2() {
    }
    EvmETransactionCategory2.create = function(input) {
      return input;
    };
    EvmETransactionCategory2.fromJSON = function(json) {
      return json;
    };
    return EvmETransactionCategory2;
  }()
);
var EvmErc20MetadataLinks = (
  /** @class */
  function() {
    function EvmErc20MetadataLinks2() {
    }
    EvmErc20MetadataLinks2.create = function(input) {
      return input;
    };
    EvmErc20MetadataLinks2.fromJSON = function(json) {
      return json;
    };
    return EvmErc20MetadataLinks2;
  }()
);
var EvmContractsReviewItemReportTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemReportTypeEnum2() {
    }
    EvmContractsReviewItemReportTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemReportTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemReportTypeEnum2;
  }()
);
var EvmContractsReviewItemContractTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemContractTypeEnum2() {
    }
    EvmContractsReviewItemContractTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemContractTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemContractTypeEnum2;
  }()
);
var EvmDefiPositionDetailsNftMetadata = (
  /** @class */
  function() {
    function EvmDefiPositionDetailsNftMetadata2() {
    }
    EvmDefiPositionDetailsNftMetadata2.create = function(input) {
      return input;
    };
    EvmDefiPositionDetailsNftMetadata2.fromJSON = function(json) {
      return json;
    };
    return EvmDefiPositionDetailsNftMetadata2;
  }()
);
var EvmNormalizedMetadataAttributeValue = (
  /** @class */
  function() {
    function EvmNormalizedMetadataAttributeValue2() {
    }
    EvmNormalizedMetadataAttributeValue2.create = function(input) {
      return input;
    };
    EvmNormalizedMetadataAttributeValue2.fromJSON = function(json) {
      return json;
    };
    return EvmNormalizedMetadataAttributeValue2;
  }()
);
var extendStatics4 = function(d, b) {
  extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics4(d, b);
};
function __extends4(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics4(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign3 = function() {
  __assign3 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __spreadArray2(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var EvmAddress = (
  /** @class */
  function() {
    function EvmAddress2(address) {
      this._value = EvmAddress2.parse(address);
    }
    Object.defineProperty(EvmAddress2, "ZERO_ADDRESS", {
      /**
       * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
       * @example `EvmAddress.ZERO_ADDRESS`
       */
      get: function() {
        return EvmAddress2.create("0x0000000000000000000000000000000000000000");
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.create = function(address) {
      if (address instanceof EvmAddress2) {
        return address;
      }
      return new EvmAddress2(address);
    };
    EvmAddress2.fromJSON = function(address) {
      return new EvmAddress2(address);
    };
    EvmAddress2.parse = function(address) {
      if (!isAddress(address)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address)
        });
      }
      return getAddress(address);
    };
    EvmAddress2.equals = function(addressA, addressB) {
      return EvmAddress2.create(addressA)._value === EvmAddress2.create(addressB)._value;
    };
    EvmAddress2.prototype.equals = function(address) {
      return EvmAddress2.equals(this, address);
    };
    Object.defineProperty(EvmAddress2.prototype, "checksum", {
      /**
       * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
       * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmAddress2.prototype, "lowercase", {
      /**
       * @returns the address value in lowercase format
       * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
       */
      get: function() {
        return this._value.toLowerCase();
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.prototype.toJSON = function() {
      return this.lowercase;
    };
    return EvmAddress2;
  }()
);
var chainList = [
  {
    name: "Ethereum Mainnet",
    chain: "ETH",
    icon: "ethereum",
    rpc: [
      "https://mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}",
      "https://api.mycryptoapi.com/eth",
      "https://cloudflare-eth.com",
      "https://ethereum-rpc.publicnode.com",
      "wss://ethereum-rpc.publicnode.com",
      "https://mainnet.gateway.tenderly.co",
      "wss://mainnet.gateway.tenderly.co",
      "https://rpc.blocknative.com/boost",
      "https://rpc.flashbots.net",
      "https://rpc.flashbots.net/fast",
      "https://rpc.mevblocker.io",
      "https://rpc.mevblocker.io/fast",
      "https://rpc.mevblocker.io/noreverts",
      "https://rpc.mevblocker.io/fullprivacy",
      "https://eth.drpc.org",
      "wss://eth.drpc.org"
    ],
    features: [
      {
        name: "EIP155"
      },
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://ethereum.org",
    shortName: "eth",
    chainId: 1,
    networkId: 1,
    slip44: 60,
    ens: {
      registry: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    },
    explorers: [
      {
        name: "etherscan",
        url: "https://etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://eth.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://ethereum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Goerli",
    title: "Ethereum Testnet Goerli",
    chain: "ETH",
    rpc: [
      "https://goerli.infura.io/v3/${INFURA_API_KEY}",
      "wss://goerli.infura.io/v3/${INFURA_API_KEY}",
      "https://rpc.goerli.mudit.blog/",
      "https://ethereum-goerli-rpc.publicnode.com",
      "wss://ethereum-goerli-rpc.publicnode.com",
      "https://goerli.gateway.tenderly.co",
      "wss://goerli.gateway.tenderly.co"
    ],
    faucets: [
      "http://fauceth.komputing.org?chain=5&address=${ADDRESS}",
      "https://goerli-faucet.slock.it?address=${ADDRESS}",
      "https://faucet.goerli.mudit.blog"
    ],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://goerli.net/#about",
    shortName: "gor",
    chainId: 5,
    networkId: 5,
    slip44: 1,
    ens: {
      registry: "0x112234455c3a32fd11230c42e7bccd4a84e02010"
    },
    explorers: [
      {
        name: "etherscan-goerli",
        url: "https://goerli.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout-goerli",
        url: "https://eth-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "OP Mainnet",
    chain: "ETH",
    rpc: [
      "https://mainnet.optimism.io",
      "https://optimism-rpc.publicnode.com",
      "wss://optimism-rpc.publicnode.com",
      "https://optimism.gateway.tenderly.co",
      "wss://optimism.gateway.tenderly.co",
      "https://optimism.drpc.org",
      "wss://optimism.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://optimism.io",
    shortName: "oeth",
    chainId: 10,
    networkId: 10,
    explorers: [
      {
        name: "etherscan",
        url: "https://optimistic.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://optimism.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://optimism.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Cronos Mainnet",
    chain: "CRO",
    rpc: [
      "https://evm.cronos.org",
      "https://cronos-evm-rpc.publicnode.com",
      "wss://cronos-evm-rpc.publicnode.com",
      "https://cronos.drpc.org",
      "wss://cronos.drpc.org"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Cronos",
      symbol: "CRO",
      decimals: 18
    },
    infoURL: "https://cronos.org/",
    shortName: "cro",
    chainId: 25,
    networkId: 25,
    explorers: [
      {
        name: "Cronos Explorer",
        url: "https://explorer.cronos.org",
        standard: "none"
      }
    ]
  },
  {
    name: "BNB Smart Chain Mainnet",
    chain: "BSC",
    rpc: [
      "https://bsc-dataseed1.bnbchain.org",
      "https://bsc-dataseed2.bnbchain.org",
      "https://bsc-dataseed3.bnbchain.org",
      "https://bsc-dataseed4.bnbchain.org",
      "https://bsc-dataseed1.defibit.io",
      "https://bsc-dataseed2.defibit.io",
      "https://bsc-dataseed3.defibit.io",
      "https://bsc-dataseed4.defibit.io",
      "https://bsc-dataseed1.ninicoin.io",
      "https://bsc-dataseed2.ninicoin.io",
      "https://bsc-dataseed3.ninicoin.io",
      "https://bsc-dataseed4.ninicoin.io",
      "https://bsc-rpc.publicnode.com",
      "wss://bsc-rpc.publicnode.com",
      "wss://bsc-ws-node.nariox.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "BNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnb",
    chainId: 56,
    networkId: 56,
    slip44: 714,
    explorers: [
      {
        name: "bscscan",
        url: "https://bscscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://bnb.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "BNB Smart Chain Testnet",
    chain: "BSC",
    rpc: [
      "https://data-seed-prebsc-1-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s3.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s3.bnbchain.org:8545",
      "https://bsc-testnet-rpc.publicnode.com",
      "wss://bsc-testnet-rpc.publicnode.com"
    ],
    faucets: ["https://testnet.bnbchain.org/faucet-smart"],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "tBNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnbt",
    chainId: 97,
    networkId: 97,
    slip44: 1,
    explorers: [
      {
        name: "bscscan-testnet",
        url: "https://testnet.bscscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Gnosis",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.gnosischain.com",
      "https://rpc.gnosis.gateway.fm",
      "https://rpc.ankr.com/gnosis",
      "https://gnosischain-rpc.gateway.pokt.network",
      "https://gnosis-mainnet.public.blastapi.io",
      "https://gnosis.api.onfinality.io/public",
      "https://gnosis.blockpi.network/v1/rpc/public",
      "https://web3endpoints.com/gnosischain-mainnet",
      "https://gnosis.oat.farm",
      "wss://rpc.gnosischain.com/wss",
      "https://gnosis-rpc.publicnode.com",
      "wss://gnosis-rpc.publicnode.com"
    ],
    faucets: [
      "https://gnosisfaucet.com",
      "https://stakely.io/faucet/gnosis-chain-xdai",
      "https://faucet.prussia.dev/xdai"
    ],
    nativeCurrency: {
      name: "xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "gno",
    chainId: 100,
    networkId: 100,
    slip44: 700,
    explorers: [
      {
        name: "gnosisscan",
        url: "https://gnosisscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://gnosis.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Polygon Mainnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://polygon-rpc.com/",
      "https://rpc-mainnet.matic.network",
      "https://matic-mainnet.chainstacklabs.com",
      "https://rpc-mainnet.maticvigil.com",
      "https://rpc-mainnet.matic.quiknode.pro",
      "https://matic-mainnet-full-rpc.bwarelabs.com",
      "https://polygon-bor-rpc.publicnode.com",
      "wss://polygon-bor-rpc.publicnode.com",
      "https://polygon.gateway.tenderly.co",
      "wss://polygon.gateway.tenderly.co",
      "https://polygon.drpc.org",
      "wss://polygon.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "matic",
    chainId: 137,
    networkId: 137,
    slip44: 966,
    explorers: [
      {
        name: "polygonscan",
        url: "https://polygonscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://polygon.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Fantom Opera",
    chain: "FTM",
    rpc: [
      "https://rpc.ftm.tools",
      "https://fantom-rpc.publicnode.com",
      "wss://fantom-rpc.publicnode.com",
      "https://fantom.drpc.org",
      "wss://fantom.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://fantom.foundation",
    shortName: "ftm",
    chainId: 250,
    networkId: 250,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://fantom.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Moonbeam",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonbeam.network",
      "wss://wss.api.moonbeam.network",
      "https://moonbeam-rpc.publicnode.com",
      "wss://moonbeam-rpc.publicnode.com",
      "https://moonbeam.drpc.org",
      "wss://moonbeam.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Glimmer",
      symbol: "GLMR",
      decimals: 18
    },
    infoURL: "https://moonbeam.network/networks/moonbeam/",
    shortName: "mbeam",
    chainId: 1284,
    networkId: 1284,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonbeam.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Moonriver",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonriver.moonbeam.network",
      "wss://wss.api.moonriver.moonbeam.network",
      "https://moonriver-rpc.publicnode.com",
      "wss://moonriver-rpc.publicnode.com",
      "https://moonriver.drpc.org",
      "wss://moonriver.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Moonriver",
      symbol: "MOVR",
      decimals: 18
    },
    infoURL: "https://moonbeam.network/networks/moonriver/",
    shortName: "mriver",
    chainId: 1285,
    networkId: 1285,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonriver.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Moonbase Alpha",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonbase.moonbeam.network",
      "wss://wss.api.moonbase.moonbeam.network",
      "https://moonbase-alpha.drpc.org",
      "wss://moonbase-alpha.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Dev",
      symbol: "DEV",
      decimals: 18
    },
    infoURL: "https://docs.moonbeam.network/networks/testnet/",
    shortName: "mbase",
    chainId: 1287,
    networkId: 1287,
    slip44: 1,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonbase.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Fantom Testnet",
    chain: "FTM",
    rpc: [
      "https://rpc.testnet.fantom.network",
      "https://fantom-testnet-rpc.publicnode.com",
      "wss://fantom-testnet-rpc.publicnode.com",
      "https://fantom-testnet.drpc.org",
      "wss://fantom-testnet.drpc.org"
    ],
    faucets: ["https://faucet.fantom.network"],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet",
    shortName: "tftm",
    chainId: 4002,
    networkId: 4002,
    slip44: 1,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://testnet.ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base",
    chain: "ETH",
    rpc: [
      "https://mainnet.base.org/",
      "https://developer-access-mainnet.base.org/",
      "https://base.gateway.tenderly.co",
      "wss://base.gateway.tenderly.co",
      "https://base-rpc.publicnode.com",
      "wss://base-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "base",
    chainId: 8453,
    networkId: 8453,
    icon: "base",
    explorers: [
      {
        name: "basescan",
        url: "https://basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    status: "active"
  },
  {
    name: "Gnosis Chiado Testnet",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.chiadochain.net",
      "https://rpc.chiado.gnosis.gateway.fm",
      "wss://rpc.chiadochain.net/wss",
      "https://gnosis-chiado-rpc.publicnode.com",
      "wss://gnosis-chiado-rpc.publicnode.com",
      "https://gnosis-chiado.drpc.org",
      "wss://gnosis-chiado.drpc.org"
    ],
    faucets: ["https://gnosisfaucet.com"],
    nativeCurrency: {
      name: "Chiado xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "chi",
    chainId: 10200,
    networkId: 10200,
    slip44: 1,
    explorers: [
      {
        name: "blockscout-chiadochain",
        url: "https://blockscout.chiadochain.net",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis-chiado.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Holesky",
    title: "Ethereum Testnet Holesky",
    chain: "ETH",
    rpc: [
      "https://rpc.holesky.ethpandaops.io",
      "https://ethereum-holesky-rpc.publicnode.com",
      "wss://ethereum-holesky-rpc.publicnode.com",
      "https://holesky.drpc.org",
      "wss://holesky.drpc.org"
    ],
    faucets: ["https://faucet.holesky.ethpandaops.io", "https://holesky-faucet.pk910.de"],
    nativeCurrency: {
      name: "Testnet ETH",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://holesky.ethpandaops.io",
    shortName: "holesky",
    chainId: 17e3,
    networkId: 17e3,
    slip44: 1,
    icon: "ethereum",
    status: "incubating",
    explorers: [
      {
        name: "Holesky Explorer",
        url: "https://holesky.beaconcha.in",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "otterscan-holesky",
        url: "https://holesky.otterscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "Holesky Etherscan",
        url: "https://holesky.etherscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum One",
    chainId: 42161,
    shortName: "arb1",
    chain: "ETH",
    networkId: 42161,
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    rpc: [
      "https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
      "https://arb1.arbitrum.io/rpc",
      "https://arbitrum-one.publicnode.com",
      "wss://arbitrum-one.publicnode.com"
    ],
    faucets: [],
    explorers: [
      {
        name: "Arbiscan",
        url: "https://arbiscan.io",
        standard: "EIP3091"
      },
      {
        name: "Arbitrum Explorer",
        url: "https://explorer.arbitrum.io",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://arbitrum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    infoURL: "https://arbitrum.io",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.arbitrum.io"
        }
      ]
    }
  },
  {
    name: "Avalanche Fuji Testnet",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax-test.network/ext/bc/C/rpc",
      "https://avalanche-fuji-c-chain-rpc.publicnode.com",
      "wss://avalanche-fuji-c-chain-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.avax-test.network/"],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://cchain.explorer.avax-test.network",
    shortName: "Fuji",
    chainId: 43113,
    networkId: 1,
    slip44: 1,
    explorers: [
      {
        name: "snowtrace",
        url: "https://testnet.snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Avalanche C-Chain",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax.network/ext/bc/C/rpc",
      "https://avalanche-c-chain-rpc.publicnode.com",
      "wss://avalanche-c-chain-rpc.publicnode.com"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://www.avax.network/",
    shortName: "avax",
    chainId: 43114,
    networkId: 43114,
    slip44: 9005,
    explorers: [
      {
        name: "snowtrace",
        url: "https://snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Linea Sepolia",
    title: "Linea Sepolia Testnet",
    chain: "ETH",
    rpc: [
      "https://rpc.sepolia.linea.build",
      "wss://rpc.sepolia.linea.build",
      "https://linea-sepolia.infura.io/v3/${INFURA_API_KEY}",
      "wss://linea-sepolia.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Linea Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://linea.build",
    shortName: "linea-sepolia",
    chainId: 59141,
    networkId: 59141,
    slip44: 1,
    icon: "linea",
    parent: {
      type: "L2",
      chain: "eip155-5",
      bridges: [
        {
          url: "https://bridge.linea.build/"
        }
      ]
    },
    explorers: [
      {
        name: "Etherscan",
        url: "https://sepolia.lineascan.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "Blockscout",
        url: "https://explorer.sepolia.linea.build",
        standard: "EIP3091",
        icon: "linea"
      }
    ],
    status: "active"
  },
  {
    name: "Linea",
    title: "Linea Mainnet",
    chain: "ETH",
    rpc: [
      "https://rpc.linea.build",
      "wss://rpc.linea.build",
      "https://linea-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://linea-mainnet.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Linea Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://linea.build",
    shortName: "linea",
    chainId: 59144,
    networkId: 59144,
    icon: "linea",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.linea.build"
        }
      ]
    },
    explorers: [
      {
        name: "Etherscan",
        url: "https://lineascan.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "Blockscout",
        url: "https://explorer.linea.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "L2scan",
        url: "https://linea.l2scan.co",
        standard: "EIP3091",
        icon: "linea"
      }
    ],
    status: "active"
  },
  {
    name: "Mumbai",
    title: "Polygon Testnet Mumbai",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://rpc-mumbai.maticvigil.com",
      "https://polygon-mumbai-bor-rpc.publicnode.com",
      "wss://polygon-mumbai-bor-rpc.publicnode.com",
      "https://polygon-mumbai.gateway.tenderly.co",
      "wss://polygon-mumbai.gateway.tenderly.co"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "maticmum",
    chainId: 80001,
    networkId: 80001,
    slip44: 1,
    explorers: [
      {
        name: "polygonscan",
        url: "https://mumbai.polygonscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Amoy",
    title: "Polygon Amoy Testnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://rpc-amoy.polygon.technology",
      "https://polygon-amoy-bor-rpc.publicnode.com",
      "wss://polygon-amoy-bor-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "polygonamoy",
    chainId: 80002,
    networkId: 80002,
    slip44: 1,
    explorers: [
      {
        name: "polygonamoy",
        url: "https://www.oklink.com/amoy",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Goerli Testnet",
    chain: "ETH",
    rpc: [
      "https://goerli.base.org",
      "https://base-goerli.gateway.tenderly.co",
      "wss://base-goerli.gateway.tenderly.co",
      "https://base-goerli-rpc.publicnode.com",
      "wss://base-goerli-rpc.publicnode.com"
    ],
    faucets: ["https://www.coinbase.com/faucets/base-ethereum-goerli-faucet"],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basegor",
    chainId: 84531,
    networkId: 84531,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescan",
        url: "https://goerli.basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base-goerli.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Sepolia Testnet",
    chain: "ETH",
    rpc: [
      "https://sepolia.base.org",
      "https://base-sepolia-rpc.publicnode.com",
      "wss://base-sepolia-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basesep",
    chainId: 84532,
    networkId: 84532,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescout",
        url: "https://base-sepolia.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "IVAR Chain Mainnet",
    chain: "IVAR",
    icon: "ivar",
    rpc: ["https://mainnet-rpc.ivarex.com"],
    faucets: ["https://faucet.ivarex.com/"],
    nativeCurrency: {
      name: "Ivar",
      symbol: "IVAR",
      decimals: 18
    },
    infoURL: "https://ivarex.com",
    shortName: "ivar",
    chainId: 88888,
    networkId: 88888,
    explorers: [
      {
        name: "ivarscan",
        url: "https://ivarscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum Goerli",
    title: "Arbitrum Goerli Rollup Testnet",
    chainId: 421613,
    shortName: "arb-goerli",
    chain: "ETH",
    networkId: 421613,
    slip44: 1,
    nativeCurrency: {
      name: "Arbitrum Goerli Ether",
      symbol: "AGOR",
      decimals: 18
    },
    rpc: [
      "https://goerli-rollup.arbitrum.io/rpc",
      "https://arbitrum-goerli.publicnode.com",
      "wss://arbitrum-goerli.publicnode.com"
    ],
    faucets: [],
    infoURL: "https://arbitrum.io/",
    explorers: [
      {
        name: "Arbitrum Goerli Arbiscan",
        url: "https://goerli.arbiscan.io",
        standard: "EIP3091"
      }
    ],
    parent: {
      type: "L2",
      chain: "eip155-5",
      bridges: [
        {
          url: "https://bridge.arbitrum.io/"
        }
      ]
    }
  },
  {
    name: "Sepolia",
    title: "Ethereum Testnet Sepolia",
    chain: "ETH",
    rpc: [
      "https://rpc.sepolia.org",
      "https://rpc2.sepolia.org",
      "https://rpc-sepolia.rockx.com",
      "https://rpc.sepolia.ethpandaops.io",
      "https://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "wss://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "https://sepolia.gateway.tenderly.co",
      "wss://sepolia.gateway.tenderly.co",
      "https://ethereum-sepolia-rpc.publicnode.com",
      "wss://ethereum-sepolia-rpc.publicnode.com",
      "https://sepolia.drpc.org",
      "wss://sepolia.drpc.org"
    ],
    faucets: ["http://fauceth.komputing.org?chain=11155111&address=${ADDRESS}"],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://sepolia.otterscan.io",
    shortName: "sep",
    chainId: 11155111,
    networkId: 11155111,
    slip44: 1,
    explorers: [
      {
        name: "etherscan-sepolia",
        url: "https://sepolia.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "otterscan-sepolia",
        url: "https://sepolia.otterscan.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Palm",
    chain: "Palm",
    icon: "palm",
    rpc: ["https://palm-mainnet.infura.io/v3/${INFURA_API_KEY}", "https://palm-mainnet.public.blastapi.io"],
    faucets: [],
    nativeCurrency: {
      name: "PALM",
      symbol: "PALM",
      decimals: 18
    },
    infoURL: "https://palm.network",
    shortName: "palm",
    chainId: 11297108109,
    networkId: 11297108109,
    explorers: [
      {
        name: "Chainlens",
        url: "https://palm.chainlens.com",
        standard: "EIP3091"
      },
      {
        name: "Dora",
        url: "https://www.ondora.xyz/network/palm",
        standard: "none"
      }
    ]
  }
];
var INVALID_VALUES = ["0x", "0x0", "0", 0];
var EvmChainParser = (
  /** @class */
  function() {
    function EvmChainParser2() {
    }
    EvmChainParser2.parse = function(chain) {
      if (INVALID_VALUES.includes(chain)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      if (typeof chain === "string") {
        if (chain.startsWith("0x")) {
          return chain;
        }
        try {
          var parsed = parseInt(chain, 10);
          if (Number.isNaN(parsed)) {
            throw new Error("Cannot parse the provided string value to a valid chain number");
          }
          return "0x".concat(parsed.toString(16));
        } catch (error) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
          });
        }
      }
      if (chain <= 0) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      return "0x".concat(chain.toString(16));
    };
    return EvmChainParser2;
  }()
);
var EvmChain = (
  /** @class */
  function() {
    function EvmChain2(value) {
      var _this = this;
      var _a2;
      this._value = EvmChainParser.parse(value);
      this._chainlistData = (_a2 = chainList.find(function(chainData) {
        return chainData.chainId === _this.decimal;
      })) !== null && _a2 !== void 0 ? _a2 : null;
    }
    Object.defineProperty(EvmChain2, "ETHEREUM", {
      /**
       * Returns ETHEREUM chain
       *
       * @example EvmChain.ETHEREUM
       */
      get: function() {
        return EvmChain2.create(1);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GOERLI", {
      /**
       * Returns GOERLI chain
       *
       * @example EvmChain.GOERLI
       */
      get: function() {
        return EvmChain2.create(5);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "SEPOLIA", {
      /**
       * Returns SEPOLIA chain
       *
       * @example EvmChain.SEPOLIA
       */
      get: function() {
        return EvmChain2.create(11155111);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON", {
      /**
       * Returns POLYGON chain
       *
       * @example EvmChain.POLYGON
       */
      get: function() {
        return EvmChain2.create(137);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MUMBAI", {
      /**
       * Returns MUMBAI chain
       *
       * @example EvmChain.MUMBAI
       */
      get: function() {
        return EvmChain2.create(80001);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC", {
      /**
       * Returns BSC chain
       *
       * @example EvmChain.BSC
       */
      get: function() {
        return EvmChain2.create(56);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC_TESTNET", {
      /**
       * Returns BSC_TESTNET chain
       *
       * @example EvmChain.BSC_TESTNET
       */
      get: function() {
        return EvmChain2.create(97);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE", {
      /**
       * Returns AVALANCHE chain
       *
       * @example EvmChain.AVALANCHE
       */
      get: function() {
        return EvmChain2.create(43114);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE_TESTNET", {
      /**
       * Returns AVALANCHE_TESTNET chain
       *
       * @example EvmChain.AVALANCHE_TESTNET
       */
      get: function() {
        return EvmChain2.create(43113);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM", {
      /**
       * Returns FANTOM chain
       *
       * @example EvmChain.FANTOM
       */
      get: function() {
        return EvmChain2.create(250);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM_TESTNET", {
      /**
       * Returns FANTOM_TESTNET chain
       *
       * @example EvmChain.FANTOM_TESTNET
       */
      get: function() {
        return EvmChain2.create(4002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CRONOS", {
      /**
       * Returns CRONOS chain
       *
       * @example EvmChain.CRONOS
       */
      get: function() {
        return EvmChain2.create(25);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "PALM", {
      /**
       * Returns PALM chain
       *
       * @example EvmChain.PALM
       */
      get: function() {
        return EvmChain2.create(11297108109);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM", {
      /**
       * Returns ARBITRUM chain
       *
       * @example EvmChain.ARBITRUM
       */
      get: function() {
        return EvmChain2.create(42161);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM_TESTNET", {
      /**
       * Returns ARBITRUM_TESTNET chain
       *
       * @example EvmChain.ARBITRUM_TESTNET
       */
      get: function() {
        return EvmChain2.create(421613);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "RONIN", {
      /**
       * Returns RONIN chain
       *
       * @example EvmChain.RONIN
       */
      get: function() {
        return EvmChain2.create(2020);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "OPTIMISM", {
      /**
       * Returns OPTIMISM chain
       *
       * @example EvmChain.OPTIMISM
       */
      get: function() {
        return EvmChain2.create(10);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ", {
      /**
       * Returns CHILIZ chain
       *
       * @example EvmChain.CHILIZ
       */
      get: function() {
        return EvmChain2.create(88888);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ_TESTNET", {
      /**
       * Returns CHILIZ_TESTNET chain
       *
       * @example EvmChain.CHILIZ_TESTNET
       */
      get: function() {
        return EvmChain2.create(88882);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS", {
      /**
       * Returns GNOSIS chain
       *
       * @example EvmChain.GNOSIS
       */
      get: function() {
        return EvmChain2.create(100);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS_TESTNET", {
      /**
       * Returns GNOSIS_TESTNET chain
       *
       * @example EvmChain.GNOSIS_TESTNET
       */
      get: function() {
        return EvmChain2.create(10200);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE", {
      /**
       * Returns BASE chain
       *
       * @example EvmChain.BASE
       */
      get: function() {
        return EvmChain2.create(8453);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_TESTNET", {
      /**
       * Returns BASE_TESTNET chain
       *
       * @example EvmChain.BASE_TESTNET
       */
      get: function() {
        return EvmChain2.create(84531);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_SEPOLIA", {
      /**
       * Returns BASE_SEPOLIA chain
       *
       * @example EvmChain.BASE_SEPOLIA
       */
      get: function() {
        return EvmChain2.create(84532);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "HOLESKY", {
      /**
       * Returns HOLESKY chain
       *
       * @example EvmChain.HOLESKY
       */
      get: function() {
        return EvmChain2.create(17e3);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON_AMOY", {
      /**
       * Returns POLYGON_AMOY chain
       *
       * @example EvmChain.POLYGON_AMOY
       */
      get: function() {
        return EvmChain2.create(80002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "LINEA", {
      /**
       * Returns LINEA chain
       *
       * @example EvmChain.LINEA
       */
      get: function() {
        return EvmChain2.create(59144);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONRIVER", {
      /**
       * Returns MOONRIVER chain
       *
       * @example EvmChain.MOONRIVER
       */
      get: function() {
        return EvmChain2.create(1285);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONBEAM", {
      /**
       * Returns MOONBEAM chain
       *
       * @example EvmChain.MOONBEAM
       */
      get: function() {
        return EvmChain2.create(1284);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONBASE", {
      /**
       * Returns MOONBASE chain
       *
       * @example EvmChain.MOONBASE
       */
      get: function() {
        return EvmChain2.create(1287);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "LINEA_SEPOLIA", {
      /**
       * Returns LINEA SEPOLIA chain
       *
       * @example EvmChain.LINEA_SEPOLIA
       */
      get: function() {
        return EvmChain2.create(59141);
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.create = function(chain) {
      if (chain instanceof EvmChain2) {
        return chain;
      }
      return new EvmChain2(chain);
    };
    EvmChain2.prototype._getChainlistData = function() {
      if (!this._chainlistData) {
        return null;
      }
      return this._chainlistData;
    };
    EvmChain2.equals = function(chainA, chainB) {
      return EvmChain2.create(chainA)._value === EvmChain2.create(chainB)._value;
    };
    EvmChain2.values = function() {
      return [
        EvmChain2.ETHEREUM,
        EvmChain2.GOERLI,
        EvmChain2.SEPOLIA,
        EvmChain2.POLYGON,
        EvmChain2.MUMBAI,
        EvmChain2.BSC,
        EvmChain2.BSC_TESTNET,
        EvmChain2.AVALANCHE,
        EvmChain2.AVALANCHE_TESTNET,
        EvmChain2.FANTOM,
        EvmChain2.FANTOM_TESTNET,
        EvmChain2.CRONOS,
        EvmChain2.PALM,
        EvmChain2.ARBITRUM,
        EvmChain2.ARBITRUM_TESTNET,
        EvmChain2.RONIN,
        EvmChain2.OPTIMISM,
        EvmChain2.CHILIZ,
        EvmChain2.CHILIZ_TESTNET,
        EvmChain2.GNOSIS,
        EvmChain2.GNOSIS_TESTNET,
        EvmChain2.BASE,
        EvmChain2.BASE_TESTNET,
        EvmChain2.BASE_SEPOLIA,
        EvmChain2.HOLESKY,
        EvmChain2.POLYGON_AMOY,
        EvmChain2.LINEA,
        EvmChain2.MOONBEAM,
        EvmChain2.MOONRIVER,
        EvmChain2.MOONBASE,
        EvmChain2.LINEA_SEPOLIA
      ];
    };
    EvmChain2.prototype.equals = function(chain) {
      return EvmChain2.equals(this, chain);
    };
    EvmChain2.prototype.display = function() {
      return this.name ? "".concat(this.name, " (").concat(this.hex, ")") : this.hex;
    };
    EvmChain2.prototype.getExplorerPath = function(value) {
      var explorer = this.explorer;
      if (!explorer || explorer.standard !== "EIP3091") {
        return null;
      }
      var url = explorer.url;
      if ("block" in value) {
        return "".concat(url, "/block/").concat(value.block);
      }
      if ("transaction" in value) {
        return "".concat(url, "/tx/").concat(value.transaction);
      }
      if ("account" in value) {
        return "".concat(url, "/address/").concat(value.account);
      }
      if ("erc20" in value) {
        return "".concat(url, "/token/").concat(value.erc20);
      }
      return null;
    };
    Object.defineProperty(EvmChain2.prototype, "decimal", {
      /**
       * Returns the decimal representation of the chain
       * @example chain.decimal // 1
       */
      get: function() {
        return parseInt(this._value, 16);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "hex", {
      /**
       * Returns the hex-string representation of the chain
       * @example chain.hex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "apiHex", {
      /**
       * Validate and cast to api compatible hex
       *
       * @example chain.apiHex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "name", {
      /**
       * Returns the name of the chain
       * @example chain.name // "Ethereum"
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "currency", {
      /**
       * Returns the currency of the chain
       * @returns The cuurrency of the chain or undefined if not found
       *
       * @example chain.currency // EvmNativeCurrency
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.nativeCurrency;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "rpcUrls", {
      /**
       * Returns the rpc Urls of the chain
       *
       * @example chain.rpcUrls // ["https://mainnet.infura.io/v3/<infura-key>"]
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.rpc;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "explorer", {
      /**
       * Returns the explorer Urls of the chain
       *
       * @example chain.explorerUrls // ["https://etherscan.io/"]
       */
      get: function() {
        var _a2;
        var explorers = (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.explorers;
        if (!explorers || explorers.length === 0) {
          return null;
        }
        return explorers[0];
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.prototype.toJSON = function() {
      return this.hex;
    };
    return EvmChain2;
  }()
);
var Erc20Token = (
  /** @class */
  function() {
    function Erc20Token2(value) {
      this._value = Erc20Token2.parse(value);
    }
    Erc20Token2.create = function(value) {
      if (value instanceof Erc20Token2) {
        return value;
      }
      return new Erc20Token2(value);
    };
    Erc20Token2.equals = function(valueA, valueB) {
      var erc20A = Erc20Token2.create(valueA);
      var erc20B = Erc20Token2.create(valueB);
      if (!erc20A._value.chain.equals(erc20B._value.chain)) {
        return false;
      }
      if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {
        return false;
      }
      return true;
    };
    Erc20Token2.prototype.equals = function(value) {
      return Erc20Token2.equals(this, value);
    };
    Erc20Token2.prototype.toJSON = function() {
      var value = this._value;
      return __assign3(__assign3({}, value), { contractAddress: value.contractAddress.toJSON(), chain: value.chain.toJSON() });
    };
    Erc20Token2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Token2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the Erc20Token value
       * @example
       * ```ts
       * token.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "decimals", {
      /**
       * @returns the decimals of the token.
       *
       * @example
       * ```ts
       * token.decimals;
       * ```
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "name", {
      /**
       * @returns The name of the token.
       *
       * @example
       * ```ts
       * token.name;
       * ```
       */
      get: function() {
        return this._value.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "symbol", {
      /**
       * @returns The symbol of the token.
       *
       * @example
       * ```ts
       * token.symbol;
       * ```
       */
      get: function() {
        return this._value.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "contractAddress", {
      /**
       * @returns The contract address of the token.
       *
       * @example
       * ```ts
       * token.contractAddress;
       * ```
       */
      get: function() {
        return this._value.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "chain", {
      /**
       * @returns The chain of the token.
       *
       * @example
       * ```ts
       * token.chain;
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logo", {
      /**
       * @returns The logo of the token.
       *
       * @example
       * ```ts
       * token.logo;
       * ```
       */
      get: function() {
        return this._value.logo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logoHash", {
      /**
       * @returns The logo hash of the token.
       *
       * @example
       * ```ts
       * token.logoHash;
       * ```
       */
      get: function() {
        return this._value.logoHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "thumbnail", {
      /**
       * @returns The thumbnail of the token.
       *
       * @example
       * ```ts
       * token.thumbnail;
       * ```
       */
      get: function() {
        return this._value.thumbnail;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._value.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Token2.parse = function(value) {
      return {
        decimals: +value.decimals,
        name: value.name,
        symbol: value.symbol,
        contractAddress: EvmAddress.create(value.contractAddress),
        logo: maybe(value.logo),
        logoHash: maybe(value.logoHash),
        thumbnail: maybe(value.thumbnail),
        chain: EvmChain.create(value.chain),
        possibleSpam: value.possibleSpam
      };
    };
    return Erc20Token2;
  }()
);
var Erc20Approval = (
  /** @class */
  function() {
    function Erc20Approval2(data) {
      this._data = Erc20Approval2.parse(data);
    }
    Erc20Approval2.create = function(data) {
      if (data instanceof Erc20Approval2) {
        return data;
      }
      return new Erc20Approval2(data);
    };
    Erc20Approval2.equals = function(dataA, dataB) {
      var approvalA = Erc20Approval2.create(dataA);
      var approvalB = Erc20Approval2.create(dataB);
      return JSON.stringify(approvalA.toJSON()) === JSON.stringify(approvalB.toJSON());
    };
    Erc20Approval2.prototype.equals = function(data) {
      return Erc20Approval2.equals(this, data);
    };
    Erc20Approval2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Approval2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example approval.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the approval
       * @example approval.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the approval
       * @example approval.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the approval
       * @example approval.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockHash", {
      /**
       * @returns the block hash of the approval
       * @example approval.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockNumber", {
      /**
       * @returns the block number of the approval
       * @example approval.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the approval
       * @example approval.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "chain", {
      /**
       * @returns the chain of the approval
       * @example approval.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the approval
       * @example approval.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "value", {
      /**
       * @returns the value of the approval
       * @example approval.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the approval
       * @example approval.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the approval
       * @example approval.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Approval2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Approval2;
  }()
);
var Erc20Burn = (
  /** @class */
  function() {
    function Erc20Burn2(data) {
      this._data = Erc20Burn2.parse(data);
    }
    Erc20Burn2.create = function(data) {
      if (data instanceof Erc20Burn2) {
        return data;
      }
      return new Erc20Burn2(data);
    };
    Erc20Burn2.equals = function(dataA, dataB) {
      var burnA = Erc20Burn2.create(dataA);
      var burnB = Erc20Burn2.create(dataB);
      return JSON.stringify(burnA.toJSON()) === JSON.stringify(burnB.toJSON());
    };
    Erc20Burn2.prototype.equals = function(data) {
      return Erc20Burn2.equals(this, data);
    };
    Erc20Burn2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Burn2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Burn2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example burn.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the burn
       * @example burn.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the burn
       * @example burn.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockHash", {
      /**
       * @returns the block hash of the burn
       * @example burn.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockNumber", {
      /**
       * @returns the block number of the burn
       * @example burn.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the burn
       * @example burn.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "chain", {
      /**
       * @returns the chain of the burn
       * @example burn.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the burn
       * @example burn.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "value", {
      /**
       * @returns the value of the burn
       * @example burn.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the burn
       * @example burn.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the burn
       * @example burn.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Burn2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Burn2;
  }()
);
var Erc20Mint = (
  /** @class */
  function() {
    function Erc20Mint2(data) {
      this._data = Erc20Mint2.parse(data);
    }
    Erc20Mint2.create = function(data) {
      if (data instanceof Erc20Mint2) {
        return data;
      }
      return new Erc20Mint2(data);
    };
    Erc20Mint2.equals = function(dataA, dataB) {
      var mintA = Erc20Mint2.create(dataA);
      var mintB = Erc20Mint2.create(dataB);
      return JSON.stringify(mintA.toJSON()) === JSON.stringify(mintB.toJSON());
    };
    Erc20Mint2.prototype.equals = function(data) {
      return Erc20Mint2.equals(this, data);
    };
    Erc20Mint2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Mint2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Mint2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example mint.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the mint
       * @example mint.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the mint
       * @example mint.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockHash", {
      /**
       * @returns the block hash of the mint
       * @example mint.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockNumber", {
      /**
       * @returns the block number of the mint
       * @example mint.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the mint
       * @example mint.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "chain", {
      /**
       * @returns the chain of the mint
       * @example mint.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the mint
       * @example mint.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "value", {
      /**
       * @returns the value of the mint
       * @example mint.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the mint
       * @example mint.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the mint
       * @example mint.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Mint2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Mint2;
  }()
);
var Erc20Transaction = (
  /** @class */
  function() {
    function Erc20Transaction2(data) {
      this._data = Erc20Transaction2.parse(data);
    }
    Erc20Transaction2.create = function(data) {
      if (data instanceof Erc20Transaction2) {
        return data;
      }
      return new Erc20Transaction2(data);
    };
    Erc20Transaction2.equals = function(dataA, dataB) {
      var tokenA = Erc20Transaction2.create(dataA);
      var tokenB = Erc20Transaction2.create(dataB);
      return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());
    };
    Erc20Transaction2.prototype.equals = function(data) {
      return Erc20Transaction2.equals(this, data);
    };
    Erc20Transaction2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.toJSON(), fromAddress: data.fromAddress.toJSON(), value: data.value.toString() });
    };
    Erc20Transaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Transaction2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "address", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "contractAddress", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.contractAddress // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer
       * @example transfer.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "chain", {
      /**
       * @returns the chain of the transfer
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromWallet", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toWallet", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer
       * @example transfer.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "value", {
      /**
       * @returns the value of the transfer
       * @example transfer.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the transfer
       * @example transfer.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the transfer
       * @example transfer.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Transaction2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), toAddress: EvmAddress.create(data.toAddress), fromAddress: EvmAddress.create(data.fromAddress), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex) });
    };
    return Erc20Transaction2;
  }()
);
var EVM_ERC20_DEFAULT_DECIMALS = 18;
var Erc20Value = (
  /** @class */
  function() {
    function Erc20Value2(amount, options) {
      var _this = this;
      var _a2, _b, _c;
      this.display = function() {
        if (!_this._token) {
          return "".concat(_this.value);
        }
        return "".concat(_this.value, " ").concat(_this._token.symbol);
      };
      this._value = Erc20Value2.parse({
        amount,
        decimals: (_c = (_a2 = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a2 !== void 0 ? _a2 : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,
        token: options === null || options === void 0 ? void 0 : options.token
      });
      if (options === null || options === void 0 ? void 0 : options.token) {
        this._token = Erc20Token.create(options.token);
      }
    }
    Erc20Value2.create = function(value, options) {
      if (value instanceof Erc20Value2) {
        return value;
      }
      return new Erc20Value2(value, options);
    };
    Erc20Value2.equals = function(valueA, valueB) {
      var erc20ValueA = Erc20Value2.create(valueA);
      var erc20ValueB = Erc20Value2.create(valueB);
      return erc20ValueA.value === erc20ValueB.value;
    };
    Erc20Value2.prototype.equals = function(value) {
      return Erc20Value2.equals(this, value);
    };
    Erc20Value2.prototype.toNumber = function() {
      return +this.value;
    };
    Erc20Value2.prototype.toString = function() {
      return this.value;
    };
    Erc20Value2.prototype.format = function() {
      return this.toString();
    };
    Erc20Value2.prototype.toJSON = function() {
      if (this.token) {
        return { value: this.value, token: this.token.toJSON() };
      }
      return { value: this.value };
    };
    Object.defineProperty(Erc20Value2.prototype, "decimals", {
      /**
       * @returns the token decimals
       * @example value.decimals; // 15
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "amount", {
      /**
       * @returns the token amount
       * @example value.amount; // BigNumber
       */
      get: function() {
        return this._value.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "value", {
      /**
       * @returns the token value
       * @example value.value; // "1000"
       */
      get: function() {
        return this._value.amount.toDecimal(this.decimals);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "token", {
      /**
       * @returns the token
       * @example value.token; // Erc20Token
       */
      get: function() {
        var _a2;
        return (_a2 = this._token) !== null && _a2 !== void 0 ? _a2 : null;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Value2.parse = function(_a2) {
      var amount = _a2.amount, decimals = _a2.decimals, token = _a2.token;
      if (token && token.decimals && +token.decimals !== +decimals) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_DATA,
          message: "Decimals do not match"
        });
      }
      return {
        amount: BigNumber.create(amount),
        decimals: +decimals
      };
    };
    return Erc20Value2;
  }()
);
var unitToDecimals2 = {
  ether: 18,
  finney: 15,
  szabo: 12,
  gwei: 9,
  mwei: 6,
  kwei: 3,
  wei: 0
};
var EvmNative = (
  /** @class */
  function() {
    function EvmNative2(native, unit) {
      if (unit === void 0) {
        unit = "ether";
      }
      this.rawValue = EvmNative2.parse(native, unit);
    }
    Object.defineProperty(EvmNative2, "ONE_ETH", {
      /**
       * Returns value of one ether.
       *
       * @example EvmNative.ONE_ETH
       */
      get: function() {
        return EvmNative2.create(1, "ether");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_GWEI", {
      /**
       * Returns value of one gwei.
       *
       * @example EvmNative.ONE_GWEI
       */
      get: function() {
        return EvmNative2.create(1, "gwei");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_WEI", {
      /**
       * Returns value of one wei.
       *
       * @example EvmNative.ONE_WEI
       */
      get: function() {
        return EvmNative2.create(1, "wei");
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.create = function(native, unit) {
      if (native instanceof EvmNative2) {
        return native;
      }
      return new EvmNative2(native, unit);
    };
    EvmNative2.fromJSON = function(json) {
      return EvmNative2.create(json, "wei");
    };
    EvmNative2.parse = function(native, unit) {
      var decimals;
      if (typeof unit === "number") {
        decimals = unit;
      } else {
        if (unitToDecimals2[unit] == null) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Unit should be a decimal number or valid EvmNativeUnit string"
          });
        }
        decimals = unitToDecimals2[unit];
      }
      return BigNumber.fromDecimal(native.toString(), decimals);
    };
    EvmNative2.equals = function(valueA, valueB) {
      var evmNativeA = EvmNative2.create(valueA);
      var evmNativeB = EvmNative2.create(valueB);
      return evmNativeA.rawValue.equals(evmNativeB.rawValue);
    };
    EvmNative2.prototype.equals = function(value) {
      return EvmNative2.equals(this, value);
    };
    EvmNative2.prototype.toString = function() {
      return this.wei;
    };
    EvmNative2.prototype.format = function() {
      return this.toString();
    };
    Object.defineProperty(EvmNative2.prototype, "value", {
      /**
       * @returns the value of the EvmNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "wei", {
      /**
       * Converts the EvmNative to a string representation of the value in wei.
       * @returns the value of the EvmNative as a string
       * @example `native.wei`
       */
      get: function() {
        return this.value.toString();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "gwei", {
      /**
       * Converts the EvmNative to a string representation of the value in gwei.
       * @returns the value of the EvmNative as a string
       * @example `native.gwei`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals2["gwei"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "ether", {
      /**
       * Converts the EvmNative to a string representation of the value in ether.
       * @returns the value of the EvmNative as a string
       * @example `native.ether`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals2["ether"]);
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.prototype.toJSON = function() {
      return this.toString();
    };
    return EvmNative2;
  }()
);
var EvmTransactionLog = (
  /** @class */
  function() {
    function EvmTransactionLog2(value) {
      this._value = EvmTransactionLog2.parse(value);
    }
    EvmTransactionLog2.create = function(value) {
      if (value instanceof EvmTransactionLog2) {
        return value;
      }
      return new EvmTransactionLog2(value);
    };
    EvmTransactionLog2.parse = function(value) {
      return {
        chain: EvmChain.create(value.chain),
        logIndex: maybe(value.logIndex, function(index) {
          return +index;
        }),
        transactionHash: value.transactionHash,
        transactionIndex: maybe(value.transactionIndex),
        data: value.data,
        topics: value.topics,
        blockHash: value.blockHash,
        blockNumber: value.blockNumber,
        blockTimestamp: value.blockTimestamp,
        address: EvmAddress.create(value.address)
      };
    };
    EvmTransactionLog2.prototype.equals = function(value) {
      return value._value.transactionHash === this._value.transactionHash && value._value.address.equals(this._value.address) && value._value.logIndex === this._value.logIndex && value._value.chain.equals(this._value.chain);
    };
    EvmTransactionLog2.prototype.toJSON = function() {
      var value = this._value;
      return __assign3(__assign3({}, value), { address: value.address.toJSON(), chain: value.chain.toJSON() });
    };
    EvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransactionLog2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the EvmTransactionLog value
       * @example
       * ```ts
       * log.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the log.
       *
       * @example
       * ```ts
       * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
       * ```
       */
      get: function() {
        return this._value.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "address", {
      /**
       * Returns the address of the log.
       *
       * @example
       * ```ts
       * log.address; // EvmAddress
       * ```
       */
      get: function() {
        return this._value.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "chain", {
      /**
       * Returns the chain of the log.
       *
       * @example
       * ```ts
       * log.chain; // EvmChain
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "logIndex", {
      /**
       * @returns the log index of the log.
       *
       * @example
       * ```ts
       * log.logIndex; // 273
       * ```
       */
      get: function() {
        return this._value.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "data", {
      /**
       * @returns the data of the log.
       *
       * @example
       * ```ts
       * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
       * ```
       */
      get: function() {
        return this._value.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "topics", {
      /**
       * @returns the topics of the log.
       *
       * @example
       * ```ts
       * log.topic0; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
       * ```
       */
      get: function() {
        return this._value.topics;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockHash", {
      /**
       * @returns the block hash of the log.
       *
       * @example
       * ```ts
       * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       * ```
       */
      get: function() {
        return this._value.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockNumber", {
      /**
       * @returns the block number of the log.
       *
       * @example
       * ```ts
       * log.blockNumber; // 12386788
       * ```
       */
      get: function() {
        return this._value.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the log.
       *
       * @example
       * ```ts
       * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
       * ```
       */
      get: function() {
        return this._value.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLog2;
  }()
);
var EvmSignature = (
  /** @class */
  function() {
    function EvmSignature2(data) {
      this._data = EvmSignature2.parse(data);
    }
    EvmSignature2.create = function(data) {
      if (data instanceof EvmSignature2) {
        return data;
      }
      return new EvmSignature2(data);
    };
    EvmSignature2.equals = function(dataA, dataB) {
      var signatureA = EvmSignature2.create(dataA);
      var signatureB = EvmSignature2.create(dataB);
      return signatureA.serialized === signatureB.serialized;
    };
    EvmSignature2.prototype.equals = function(data) {
      return EvmSignature2.equals(this, data);
    };
    Object.defineProperty(EvmSignature2.prototype, "r", {
      get: function() {
        return this._data.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "s", {
      get: function() {
        return this._data.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "v", {
      get: function() {
        return this._data.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "serialized", {
      get: function() {
        return joinSignature(this._data);
      },
      enumerable: false,
      configurable: true
    });
    EvmSignature2.prototype.toJSON = function() {
      return {
        r: this.r,
        s: this.s,
        v: this.v.toString()
      };
    };
    EvmSignature2.prototype.format = function() {
      return this.serialized;
    };
    EvmSignature2.parse = function(data) {
      if (typeof data === "string") {
        return splitSignature(data);
      }
      return splitSignature({
        r: hexlify(BigNumber.create(data.r).toBigInt()),
        s: hexlify(BigNumber.create(data.s).toBigInt()),
        v: +data.v
      });
    };
    return EvmSignature2;
  }()
);
var EvmInternalTransaction = (
  /** @class */
  function() {
    function EvmInternalTransaction2(data) {
      this._data = EvmInternalTransaction2.parse(data);
    }
    EvmInternalTransaction2.create = function(data) {
      if (data instanceof EvmInternalTransaction2) {
        return data;
      }
      return new EvmInternalTransaction2(data);
    };
    EvmInternalTransaction2.fromJSON = function(json) {
      return new EvmInternalTransaction2({
        blockHash: json.block_hash,
        blockNumber: json.block_number,
        from: json.from,
        gas: json.gas,
        gasUsed: json.gas_used,
        input: json.input,
        output: json.output,
        to: json.to,
        transactionHash: json.transaction_hash,
        type: json.type,
        value: json.value
      });
    };
    EvmInternalTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmInternalTransaction2.create(dataA);
      var transactionB = EvmInternalTransaction2.create(dataB);
      if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
        return false;
      }
      return true;
    };
    EvmInternalTransaction2.prototype.equals = function(data) {
      return EvmInternalTransaction2.equals(this, data);
    };
    EvmInternalTransaction2.prototype.toJSON = function() {
      var data = this._data;
      return {
        block_hash: data.blockHash,
        input: data.input,
        output: data.output,
        transaction_hash: data.transactionHash,
        type: data.type,
        to: data.to.toJSON(),
        from: data.from.toJSON(),
        gas: data.gas.toString(),
        gas_used: data.gasUsed.toString(),
        value: data.value.toString(),
        block_number: data.blockNumber.toString()
      };
    };
    EvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmInternalTransaction2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockNumber", {
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockHash", {
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gasUsed", {
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "output", {
      get: function() {
        return this._data.output;
      },
      enumerable: false,
      configurable: true
    });
    EvmInternalTransaction2.parse = function(data) {
      return {
        from: EvmAddress.create(data.from),
        to: EvmAddress.create(data.to),
        transactionHash: data.transactionHash,
        gas: BigNumber.create(data.gas),
        gasUsed: BigNumber.create(data.gasUsed),
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        input: data.input,
        output: data.output,
        value: BigNumber.create(data.value),
        type: data.type
      };
    };
    return EvmInternalTransaction2;
  }()
);
var EvmTransaction = (
  /** @class */
  function() {
    function EvmTransaction2(data) {
      this._data = EvmTransaction2.parse(data);
    }
    EvmTransaction2.create = function(data) {
      if (data instanceof EvmTransaction2) {
        return data;
      }
      return new EvmTransaction2(data);
    };
    EvmTransaction2.parse = function(data) {
      var _a2, _b;
      return {
        from: EvmAddress.create(data.from),
        to: maybe(data.to, function(to) {
          return EvmAddress.create(to);
        }),
        nonce: maybe(data.nonce, BigNumber.create),
        data: maybe(data.data),
        value: maybe(data.value, function(val) {
          return EvmNative.create(val, "wei");
        }),
        hash: data.hash,
        chain: EvmChain.create(data.chain),
        gas: maybe(data.gas, BigNumber.create),
        gasPrice: BigNumber.create(data.gasPrice),
        index: +data.index,
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        blockTimestamp: dateInputToDate(data.blockTimestamp),
        cumulativeGasUsed: BigNumber.create(data.cumulativeGasUsed),
        gasUsed: BigNumber.create(data.gasUsed),
        contractAddress: maybe(data.contractAddress, function(address) {
          return EvmAddress.create(address);
        }),
        receiptRoot: maybe(data.receiptRoot),
        receiptStatus: maybe(data.receiptStatus, function(status) {
          return +status;
        }),
        logs: ((_a2 = data.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
          return EvmTransactionLog.create(log);
        }),
        internalTransactions: ((_b = data.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(transaction) {
          return EvmInternalTransaction.create(transaction);
        }),
        signature: maybe(data.signature, EvmSignature.create)
      };
    };
    EvmTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmTransaction2.create(dataA);
      var transactionB = EvmTransaction2.create(dataB);
      if (!transactionA._data.chain.equals(transactionB._data.chain)) {
        return false;
      }
      if (transactionA._data.hash !== transactionB._data.hash) {
        return false;
      }
      return true;
    };
    EvmTransaction2.prototype.equals = function(data) {
      return EvmTransaction2.equals(this, data);
    };
    EvmTransaction2.prototype.toJSON = function() {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      var data = this._data;
      return __assign3(__assign3({}, data), { to: (_a2 = data.to) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), value: (_h = data.value) === null || _h === void 0 ? void 0 : _h.toString(), chain: (_j = data.chain) === null || _j === void 0 ? void 0 : _j.toJSON(), contractAddress: (_k = data.contractAddress) === null || _k === void 0 ? void 0 : _k.toJSON(), logs: data.logs.map(function(log) {
        return log.toJSON();
      }), internalTransactions: data.internalTransactions.map(function(transaction) {
        return transaction.toJSON();
      }), signature: (_l = data.signature) === null || _l === void 0 ? void 0 : _l.toJSON(), blockNumber: (_m = data.blockNumber) === null || _m === void 0 ? void 0 : _m.toString(), blockTimestamp: data.blockTimestamp.toString() });
    };
    EvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransaction2.prototype, "result", {
      /**
       * @returns the transaction
       * @example
       * ```
       * transaction.result
       * ```
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "to", {
      /**
       * @returns the transaction to address
       * @example
       * ```
       * transaction.to // EvmAddress
       * ```
       */
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "from", {
      /**
       * @returns the transaction from address
       * @example
       * ```
       * transaction.address // EvmAddress
       * ```
       */
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "nonce", {
      /**
       * @returns the transaction nonce
       * @example
       * ```
       * transaction.nonce // 326595425
       * ```
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gas", {
      /**
       * @returns the transaction gas
       * @example
       * ```
       * transaction.gas // 6721975
       * ```
       */
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasPrice", {
      /**
       * @returns the transaction gas price
       * @example
       * ```
       * transaction.gasPrice // 20000000000
       * ```
       */
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasUsed", {
      /**
       * @returns the transaction gas used
       * @example
       * ```
       * transaction.gasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "cumulativeGasUsed", {
      /**
       * @returns the transaction cumulative gas used
       * @example
       * ```
       * transaction.cumulativeGasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.cumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockNumber", {
      /**
       * @returns the transaction block number
       * @example
       * ```
       * transaction.blockNumber // 12526958
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "value", {
      /**
       * @returns the transaction value
       * @example
       * ```
       * transaction.value // EvmNative
       * ```
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "chain", {
      /**
       * @returns the transaction chain
       * @example
       * ```
       * transaction.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "contractAddress", {
      /**
       * @returns the transaction contract address
       * @example
       * ```
       * transaction.contractAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "internalTransactions", {
      /**
       * @returns the internal transactions
       * @example
       * ```
       * transaction.logs // EvmInternalTransaction[]
       * ```
       */
      get: function() {
        return this._data.internalTransactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "logs", {
      /**
       * @returns the transaction logs
       * @example
       * ```
       * transaction.logs // EvmTransactionLog[]
       * ```
       */
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptRoot", {
      /**
       * @returns the transaction receipt root
       * @example
       * ```
       * transaction.receiptRoot // string
       * ```
       */
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptStatus", {
      /**
       * @returns the transaction receipt status
       * @example
       * ```
       * transaction.receiptStatus // 1
       * ```
       */
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "data", {
      /**
       * @returns the transaction data
       * @example
       * ```
       * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
       * ```
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "hash", {
      /**
       * @returns the transaction hash
       * @example
       * ```
       * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
       * ```
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockHash", {
      /**
       * @returns the transaction black hash
       * @example
       * ```
       * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
       * ```
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockTimestamp", {
      /**
       * @returns the transaction block timestamp
       * @example
       * ```
       * transaction.blockTimestamp // Date
       * ```
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "signature", {
      /**
       * @returns the signature (if available)
       * @example
       * ```
       * transaction.signature // EvmSignature
       * ```
       */
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "index", {
      /**
       * @returns the index
       * @example
       * ```
       * transaction.index // 1
       * ```
       */
      get: function() {
        return this._data.index;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "v", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "r", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "s", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.s;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransaction2;
  }()
);
var EvmSimpleBlock = (
  /** @class */
  function() {
    function EvmSimpleBlock2(data) {
      this._data = EvmSimpleBlock2.parse(data);
    }
    EvmSimpleBlock2.create = function(data) {
      if (data instanceof EvmSimpleBlock2) {
        return data;
      }
      return new EvmSimpleBlock2(data);
    };
    EvmSimpleBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock2.create(dataA);
      var blockB = EvmSimpleBlock2.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      if (!blockA.number.equals(blockB.number)) {
        return false;
      }
      return true;
    };
    EvmSimpleBlock2.prototype.equals = function(data) {
      return EvmSimpleBlock2.equals(this, data);
    };
    EvmSimpleBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { number: data.number.toString(), chain: data.chain.toJSON() });
    };
    EvmSimpleBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmSimpleBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    EvmSimpleBlock2.parse = function(data) {
      return {
        timestamp: dateInputToDate(data.timestamp),
        number: BigNumber.create(data.number),
        chain: EvmChain.create(data.chain),
        hash: data.hash
      };
    };
    return EvmSimpleBlock2;
  }()
);
var EvmBlock = (
  /** @class */
  function() {
    function EvmBlock2(data) {
      this._data = EvmBlock2.parse(data);
    }
    EvmBlock2.create = function(data) {
      if (data instanceof EvmBlock2) {
        return data;
      }
      return new EvmBlock2(data);
    };
    EvmBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock.create(dataA);
      var blockB = EvmSimpleBlock.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      return true;
    };
    EvmBlock2.prototype.equals = function(data) {
      return EvmBlock2.equals(this, data);
    };
    EvmBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.toJSON(), miner: data.miner.toJSON(), transactions: data.transactions.map(function(transaction) {
        return transaction.toJSON();
      }) });
    };
    EvmBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "miner", {
      /**
       * @returns the block miner.
       * @example block.miner // EvmAddress
       */
      get: function() {
        return this._data.miner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "difficulty", {
      /**
       * @returns the block difficulty.
       * @example block.difficulty // BigNumber
       */
      get: function() {
        return this._data.difficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "totalDifficulty", {
      /**
       * @returns the block total difficulty.
       * @example block.totalDifficulty // BigNumber
       */
      get: function() {
        return this._data.totalDifficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "size", {
      /**
       * @returns the block size.
       * @example block.size // BigNumber
       */
      get: function() {
        return this._data.size;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasLimit", {
      /**
       * @returns the block gas limit.
       * @example block.gasLimit // BigNumber
       */
      get: function() {
        return this._data.gasLimit;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasUsed", {
      /**
       * @returns the block gas used.
       * @example block.gasUsed // BigNumber
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactions", {
      /**
       * @returns the block transactions.
       * @example block.transactions // EvmTransaction[]
       */
      get: function() {
        return this._data.transactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionCount", {
      /**
       * @returns the block transaction count.
       * @example block.transactionCount // 252
       */
      get: function() {
        return this._data.transactionCount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionsRoot", {
      /**
       * @returns the block transactions root.
       * @example block.transactionsRoot // "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
       */
      get: function() {
        return this._data.transactionsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "stateRoot", {
      /**
       * @returns the block state root.
       * @example block.stateRoot // "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
       */
      get: function() {
        return this._data.stateRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "receiptsRoot", {
      /**
       * @returns the block receipts root.
       * @example block.receiptsRoot // "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
       */
      get: function() {
        return this._data.receiptsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "logsBloom", {
      /**
       * @returns the block logs bloom.
       * @example block.logsBloom // "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
       */
      get: function() {
        return this._data.logsBloom;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "extraData", {
      /**
       * @returns the block extra data.
       * @example block.extraData // "0x65746865726d696e652d6575726f70652d7765737433"
       */
      get: function() {
        return this._data.extraData;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "parentHash", {
      /**
       * @returns the block parent hash.
       * @example block.parentHash // "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
       */
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "sha3Uncles", {
      /**
       * @returns the block sha3Uncles.
       * @example block.sha3Uncles // "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
       */
      get: function() {
        return this._data.sha3Uncles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "nonce", {
      /**
       * @returns the block nonce.
       * @example block.nonce // "0xedeb2d8fd2b2bdec"
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    EvmBlock2.parse = function(data) {
      return __assign3(__assign3({}, data), { miner: EvmAddress.create(data.miner), timestamp: dateInputToDate(data.timestamp), number: BigNumber.create(data.number), difficulty: BigNumber.create(data.difficulty), totalDifficulty: BigNumber.create(data.totalDifficulty), size: BigNumber.create(data.size), gasLimit: BigNumber.create(data.gasLimit), gasUsed: BigNumber.create(data.gasUsed), transactions: data.transactions.map(function(transaction) {
        return EvmTransaction.create(transaction);
      }), chain: EvmChain.create(data.chain), transactionCount: +data.transactionCount });
    };
    return EvmBlock2;
  }()
);
var EvmBlockDate = (
  /** @class */
  function() {
    function EvmBlockDate2(data) {
      this.data = data;
    }
    EvmBlockDate2.create = function(data) {
      if (data instanceof EvmBlockDate2) {
        return data;
      }
      return new EvmBlockDate2(EvmBlockDate2.parse(data));
    };
    EvmBlockDate2.parse = function(input) {
      return {
        block: input.block,
        date: new Date(input.date),
        timestamp: input.timestamp,
        // TODO: the swagger currently has wrong type for `block_timestamp`, should be `string`.
        blockTimestamp: String(input.block_timestamp),
        hash: input.hash,
        parentHash: input.parent_hash
      };
    };
    Object.defineProperty(EvmBlockDate2.prototype, "block", {
      /**
       * @description The block number.
       * @example `9193266`
       */
      get: function() {
        return this.data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "date", {
      /**
       * @description The date of the block.
       * @example `2020-01-01T00:00:00+00:00`
       */
      get: function() {
        return this.data.date;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "timestamp", {
      /**
       * @description The timestamp of the block
       * @example `1577836811`
       */
      get: function() {
        return this.data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "blockTimestamp", {
      /**
       * @description The timestamp of the block
       * @example `2022-01-03T22:59:39.000Z`
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_timestamp", {
      /**
       * @deprecated Use `blockTimestamp` instead.
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "hash", {
      /**
       * @description The block hash.
       * @example `0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171`
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_hash", {
      /**
       * @deprecated Use `hash` instead.
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parentHash", {
      /**
       * @description The block hash of the parent block.
       * @example `0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045`
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parent_hash", {
      /**
       * @deprecated Use `parentHash` instead.
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    return EvmBlockDate2;
  }()
);
var EvmEvent = (
  /** @class */
  function() {
    function EvmEvent2(_data) {
      this._data = _data;
    }
    EvmEvent2.create = function(data) {
      if (data instanceof EvmEvent2) {
        return data;
      }
      return new EvmEvent2(EvmEvent2.parse(data));
    };
    EvmEvent2.equals = function(dataA, dataB) {
      var eventA = EvmEvent2.create(dataA);
      var eventB = EvmEvent2.create(dataB);
      if (!eventA._data.chain.equals(eventB._data.chain)) {
        return false;
      }
      if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {
        return false;
      }
      if (!eventA._data.address.equals(eventB._data.address)) {
        return false;
      }
      if (eventA._data.data !== eventB._data.data) {
        return false;
      }
      return true;
    };
    EvmEvent2.prototype.equals = function(data) {
      return EvmEvent2.equals(this, data);
    };
    EvmEvent2.prototype.toJSON = function() {
      var _a2, _b, _c;
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), data: {
        from: (_a2 = data.data.from) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
        to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.toJSON(),
        value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format()
      } });
    };
    EvmEvent2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmEvent2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example event.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "chain", {
      /**
       * @returns the event chain
       * @example event.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "address", {
      /**
       * @returns the event address
       * @example event.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockNumber", {
      /**
       * @returns the event block number
       * @example event.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockTimestamp", {
      /**
       * @returns the event block timestamp
       * @example event.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "data", {
      /**
       * @returns the event data with from address, to address and value
       * @example event.data
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "transactionHash", {
      /**
       * @returns the event block trannsaciton hash
       * @example event.transactionHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockHash", {
      /**
       * @returns the event block hash
       * @example event.blockHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    EvmEvent2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), data: {
        from: maybe(data.data.from, function(from) {
          return EvmAddress.create(from);
        }),
        to: maybe(data.data.to, function(to) {
          return EvmAddress.create(to);
        }),
        value: maybe(data.data.value, EvmNative.create)
      } });
    };
    return EvmEvent2;
  }()
);
var EvmNftMedia = (
  /** @class */
  function() {
    function EvmNftMedia2(data) {
      this._data = EvmNftMedia2.parse(data);
    }
    EvmNftMedia2.create = function(data) {
      if (data instanceof EvmNftMedia2) {
        return data;
      }
      return new EvmNftMedia2(data);
    };
    EvmNftMedia2.equals = function(dataA, dataB) {
      var mediaA = EvmNftMedia2.create(dataA);
      var mediaB = EvmNftMedia2.create(dataB);
      if (!mediaA.chain.equals(mediaB.chain)) {
        return false;
      }
      if (mediaA.originalMediaUrl !== mediaB.originalMediaUrl) {
        return false;
      }
      return true;
    };
    EvmNftMedia2.prototype.equals = function(data) {
      return EvmNftMedia2.equals(this, data);
    };
    EvmNftMedia2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON() });
    };
    EvmNftMedia2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMedia2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example media.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "updatedAt", {
      get: function() {
        return this._data.updatedAt;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "originalMediaUrl", {
      get: function() {
        return this._data.originalMediaUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "category", {
      get: function() {
        return this._data.category;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mimetype", {
      get: function() {
        return this._data.mimetype;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "parentHash", {
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mediaCollection", {
      get: function() {
        return this._data.mediaCollection;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMedia2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), updatedAt: maybe(data.updatedAt, function(date) {
        return dateInputToDate(date);
      }) });
    };
    return EvmNftMedia2;
  }()
);
var EvmNft = (
  /** @class */
  function() {
    function EvmNft2(data) {
      this._data = EvmNft2.parse(data);
    }
    EvmNft2.create = function(data) {
      if (data instanceof EvmNft2) {
        return data;
      }
      return new EvmNft2(data);
    };
    EvmNft2.equals = function(valueA, valueB) {
      var nftA = EvmNft2.create(valueA);
      var nftB = EvmNft2.create(valueB);
      if (!nftA._data.chain.equals(nftB._data.chain)) {
        return false;
      }
      if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {
        return false;
      }
      if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {
        return false;
      }
      if (nftA._data.ownerOf && !nftB._data.ownerOf || !nftA._data.ownerOf && nftB._data.ownerOf) {
        return false;
      }
      return true;
    };
    EvmNft2.prototype.equals = function(value) {
      return EvmNft2.equals(this, value);
    };
    EvmNft2.prototype.toJSON = function() {
      var _b, _c, _d, _e;
      var data = this._data;
      return __assign3(__assign3({}, data), { tokenAddress: data.tokenAddress.toJSON(), chain: data.chain.toJSON(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.toJSON(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString(), media: (_e = data.media) === null || _e === void 0 ? void 0 : _e.format() });
    };
    EvmNft2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNft2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "chain", {
      /**
       * @returns the NFT chain
       * @example
       * ```
       * nft.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "contractType", {
      /**
       * @returns the NFT contract type
       * @example
       * ```
       * nft.contractType // "ERC721" | "ERC1155"
       * ```
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenAddress", {
      /**
       * @returns the NFT token address
       * @example
       * ```
       * nft.tokenAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "metadata", {
      /**
       * @returns the NFT metadata
       * @example
       * ```ts
       * nft.metadata
       * // {
       * // name: 'Pancake',
       * // description: 'The dessert series 1',
       * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',
       * // }
       * ```
       */
      get: function() {
        return this._data.metadata;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenUri", {
      /**
       * @returns the NFT token URI
       * @example
       * ```
       * nft.tokenUri // "https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json"
       * ```
       */
      get: function() {
        return this._data.tokenUri;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenHash", {
      /**
       * @returns the NFT token hash
       * @example
       * ```
       * nft.tokenHash // "QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC"
       * ```
       */
      get: function() {
        return this._data.tokenHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "name", {
      /**
       * @returns the NFT name
       * @example
       * ```
       * nft.name // "Tether USD"
       * ```
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "symbol", {
      /**
       * @returns the NFT symbol
       * @example
       * ```
       * nft.symbol // "USDT"
       * ```
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "ownerOf", {
      /**
       * @returns the NFT owner of address
       * @example
       * ```
       * nft.ownerOf // EvmAddress
       * ```
       */
      get: function() {
        return this._data.ownerOf;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumberMinted", {
      /**
       * @returns the NFT block number minted from
       * @example
       * ```
       * nft.blockNumberMinted // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumberMinted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumber", {
      /**
       * @returns the NFT block number
       * @example
       * ```
       * nft.blockNumber // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastMetadataSync", {
      /**
       * @returns the NFT latest metadata sync date
       * @example
       * ```
       * nft.latestMetadataSync // Date
       * ```
       */
      get: function() {
        return this._data.lastMetadataSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastTokenUriSync", {
      /**
       * @returns the NFT latest token URI sync date
       * @example
       * ```
       * nft.latestTokenUriSync // Date
       * ```
       */
      get: function() {
        return this._data.lastTokenUriSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "amount", {
      /**
       * @returns the NFT amount
       * @example
       * ```
       * nft.amount // 2
       * ```
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenId", {
      /**
       * @returns the token id
       * @example
       * ```
       * nft.tokenId // '1234'
       * ```
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "media", {
      /**
       * @returns the processed media of the NFT
       * @example
       * ```
       * nft.media // EvmNftMedia
       * ```
       */
      get: function() {
        return this._data.media;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    var _a2;
    _a2 = EvmNft2;
    EvmNft2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractType: maybe(data.contractType), tokenAddress: EvmAddress.create(data.tokenAddress), metadata: maybe(data.metadata, _a2.validateMetadata), tokenUri: maybe(data.tokenUri), tokenHash: maybe(data.tokenHash), name: maybe(data.name), symbol: maybe(data.symbol), ownerOf: maybe(data.ownerOf, function(ownerOf) {
        return EvmAddress.create(ownerOf);
      }), blockNumberMinted: maybe(data.blockNumberMinted, BigNumber.create), blockNumber: maybe(data.blockNumber, BigNumber.create), lastMetadataSync: maybe(data.lastMetadataSync, dateInputToDate), lastTokenUriSync: maybe(data.lastTokenUriSync, dateInputToDate), amount: maybe(data.amount, function(value) {
        return +value;
      }), media: maybe(data.media, function(value) {
        return EvmNftMedia.create(value);
      }) });
    };
    EvmNft2.validateMetadata = function(value) {
      try {
        return JSON.parse(value);
      } catch (error) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid metadata provided, cannot parse the value to JSON"
        });
      }
    };
    return EvmNft2;
  }()
);
var EvmNftCollection = (
  /** @class */
  function() {
    function EvmNftCollection2(data) {
      this._data = EvmNftCollection2.parse(data);
    }
    EvmNftCollection2.create = function(data) {
      if (data instanceof EvmNftCollection2) {
        return data;
      }
      return new EvmNftCollection2(data);
    };
    EvmNftCollection2.equals = function(dataA, dataB) {
      var collectionA = EvmNftCollection2.create(dataA);
      var collectionB = EvmNftCollection2.create(dataB);
      if (!collectionA.chain.equals(collectionB.chain)) {
        return false;
      }
      if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftCollection2.prototype.equals = function(data) {
      return EvmNftCollection2.equals(this, data);
    };
    EvmNftCollection2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftCollection2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftCollection2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example collection.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "chain", {
      /**
       * @returns the chain where the collection is deployed.
       * @example collection.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "tokenAddress", {
      /**
       * @returns the token address of collection.
       * @example collection.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "contractType", {
      /**
       * @returns the token type of collection.
       * @example collection.tokenAddress // 'ERC721'
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "name", {
      /**
       * @returns the token name of collection.
       * @example collection.tokenAddress // 'Test NFT'
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "symbol", {
      /**
       * @returns the token symbol of collection.
       * @example collection.symbol // 'TEST'
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftCollection2.parse = function(data) {
      return __assign3(__assign3({}, data), { tokenAddress: EvmAddress.create(data.tokenAddress), chain: EvmChain.create(data.chain), contractType: maybe(data.contractType) });
    };
    return EvmNftCollection2;
  }()
);
var EvmNftMetadata = (
  /** @class */
  function() {
    function EvmNftMetadata2(data) {
      this._data = EvmNftMetadata2.parse(data);
    }
    EvmNftMetadata2.create = function(data) {
      if (data instanceof EvmNftMetadata2) {
        return data;
      }
      return new EvmNftMetadata2(data);
    };
    EvmNftMetadata2.equals = function(dataA, dataB) {
      var metadataA = EvmNftMetadata2.create(dataA);
      var metadataB = EvmNftMetadata2.create(dataB);
      if (!metadataA._data.chain.equals(metadataB._data.chain)) {
        return false;
      }
      if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftMetadata2.prototype.equals = function(data) {
      return EvmNftMetadata2.equals(this, data);
    };
    EvmNftMetadata2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftMetadata2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMetadata2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example metadata.result;
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "name", {
      /**
       * @returns the name in the metadata.
       * @example metadata.name; // "Baby Ape Mutant Club"
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "symbol", {
      /**
       * @returns the symbol in the metadata.
       * @example metadata.symbol; // "BAMC"
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "contractType", {
      /**
       * @returns the contract type of the NFT.
       * @example metadata.contractType; // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "chain", {
      /**
       * @returns the chain in the metadata.
       * @example metadata.chain; // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "tokenAddress", {
      /**
       * @returns the token address in the metadata.
       * @example metadata.tokenAddress; // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "syncedAt", {
      /**
       * @returns the date the metadata was synced.
       * @example metadata.syncedAt; // Date
       */
      get: function() {
        return this._data.syncedAt;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMetadata2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), tokenAddress: EvmAddress.create(data.tokenAddress), syncedAt: maybe(data.syncedAt, dateInputToDate) });
    };
    return EvmNftMetadata2;
  }()
);
var EvmNftTransfer = (
  /** @class */
  function() {
    function EvmNftTransfer2(data) {
      this._data = EvmNftTransfer2.parse(data);
    }
    EvmNftTransfer2.create = function(data) {
      if (data instanceof EvmNftTransfer2) {
        return data;
      }
      return new EvmNftTransfer2(data);
    };
    EvmNftTransfer2.equals = function(dataA, dataB) {
      var transferA = EvmNftTransfer2.create(dataA);
      var transferB = EvmNftTransfer2.create(dataB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.blockHash !== transferB.blockHash) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      return true;
    };
    EvmNftTransfer2.prototype.equals = function(data) {
      return EvmNftTransfer2.equals(this, data);
    };
    EvmNftTransfer2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), fromAddress: data.fromAddress ? data.fromAddress.toJSON() : void 0, toAddress: data.toAddress.toJSON(), tokenAddress: data.tokenAddress.toJSON(), value: data.value ? data.value.format() : void 0, operator: data.operator ? data.operator.toJSON() : void 0, blockNumber: data.blockNumber.toString() });
    };
    EvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftTransfer2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "chain", {
      /**
       * @returns the chain of the transfer.
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer.
       * @example transfer.blockHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer.
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer.
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer.
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer.
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenAddress", {
      /**
       * @returns the token address of the transfer.
       * @example transfer.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenId", {
      /**
       * @returns the token id of the transfer.
       * @example transfer.tokenId // "15"
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "amount", {
      /**
       * @returns the amount of the transfer.
       * @example transfer.amount // 1
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "value", {
      /**
       * @returns the value of the transfer.
       * @example transfer.value // EvmNative
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "logIndex", {
      /**
       * @returns the log index of the transfer.
       * @example transfer.logIndex // 0
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer.
       * @example transfer.transactionHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionIndex", {
      /**
       * @returns the transaction index of the transfer.
       * @example transfer.transactionIndex // 123
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionType", {
      /**
       * @returns the transaction type of the transfer.
       * @example transfer.transactionType // "1"
       */
      get: function() {
        return this._data.transactionType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "operator", {
      /**
       * @returns the operator of the transfer.
       * @example transfer.operator // EvmAddress
       */
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "contractType", {
      /**
       * @returns the contract type of the transfer.
       * @example transfer.contractType // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftTransfer2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), amount: maybe(data.amount, function(amount) {
        return +amount;
      }), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), transactionIndex: maybe(data.transactionIndex, function(index) {
        return +index;
      }), transactionType: maybe(data.transactionType), fromAddress: maybe(data.fromAddress, function(address) {
        return EvmAddress.create(address);
      }), toAddress: EvmAddress.create(data.toAddress), tokenAddress: EvmAddress.create(data.tokenAddress), value: maybe(data.value, EvmNative.create), operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), logIndex: +data.logIndex });
    };
    return EvmNftTransfer2;
  }()
);
var EvmTransactionLogDecoded = (
  /** @class */
  function(_super) {
    __extends4(EvmTransactionLogDecoded2, _super);
    function EvmTransactionLogDecoded2(value) {
      var _this = _super.call(this, value) || this;
      _this._value = EvmTransactionLogDecoded2.parse(value);
      return _this;
    }
    EvmTransactionLogDecoded2.create = function(value) {
      if (value instanceof EvmTransactionLogDecoded2) {
        return value;
      }
      return new EvmTransactionLogDecoded2(value);
    };
    EvmTransactionLogDecoded2.parse = function(value) {
      var data = _super.parse.call(this, value);
      return __assign3(__assign3({}, data), { decodedEvent: value.decodedEvent });
    };
    Object.defineProperty(EvmTransactionLogDecoded2.prototype, "decodedEvent", {
      get: function() {
        return this._value.decodedEvent;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLogDecoded2;
  }(EvmTransactionLog)
);
var EvmTransactionVerbose = (
  /** @class */
  function(_super) {
    __extends4(EvmTransactionVerbose2, _super);
    function EvmTransactionVerbose2(data) {
      var _this = _super.call(this, data) || this;
      _this._data = EvmTransactionVerbose2.parse(data);
      return _this;
    }
    EvmTransactionVerbose2.create = function(data) {
      if (data instanceof EvmTransactionVerbose2) {
        return data;
      }
      return new EvmTransactionVerbose2(data);
    };
    Object.defineProperty(EvmTransactionVerbose2.prototype, "decodedCall", {
      get: function() {
        return this._data.decodedCall;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionVerbose2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    var _a2;
    _a2 = EvmTransactionVerbose2;
    EvmTransactionVerbose2.parse = function(data) {
      var parsed = _super.parse.call(_a2, data);
      return __assign3(__assign3({}, parsed), { logs: data.logs.map(function(log) {
        return EvmTransactionLogDecoded.create(log);
      }), decodedCall: data.decodedCall });
    };
    return EvmTransactionVerbose2;
  }(EvmTransaction)
);
var EvmTrade = (
  /** @class */
  function() {
    function EvmTrade2(input) {
      this.transactionHash = input.transactionHash;
      this.transactionIndex = input.transactionIndex;
      this.tokenIds = input.tokenIds;
      this.sellerAddress = EvmAddress.create(input.sellerAddress);
      this.buyerAddress = EvmAddress.create(input.buyerAddress);
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.marketplaceAddress = EvmAddress.create(input.marketplaceAddress);
      this.priceTokenAddress = input.priceTokenAddress ? EvmAddress.create(input.priceTokenAddress) : void 0;
      this.price = EvmNative.create(input.price);
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
    }
    EvmTrade2.create = function(input) {
      if (input instanceof EvmTrade2) {
        return input;
      }
      return new EvmTrade2(input);
    };
    EvmTrade2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        transactionIndex: Number(json.transaction_index),
        tokenIds: json.token_ids,
        sellerAddress: EvmAddress.fromJSON(json.seller_address),
        buyerAddress: EvmAddress.fromJSON(json.buyer_address),
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        marketplaceAddress: EvmAddress.fromJSON(json.marketplace_address),
        priceTokenAddress: json.price_token_address ? EvmAddress.fromJSON(json.price_token_address) : void 0,
        price: EvmNative.fromJSON(json.price),
        blockTimestamp: new Date(json.block_timestamp),
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash
      };
      return EvmTrade2.create(input);
    };
    EvmTrade2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        transaction_index: String(this.transactionIndex),
        token_ids: this.tokenIds,
        seller_address: this.sellerAddress.toJSON(),
        buyer_address: this.buyerAddress.toJSON(),
        token_address: this.tokenAddress.toJSON(),
        marketplace_address: this.marketplaceAddress.toJSON(),
        price_token_address: this.priceTokenAddress ? this.priceTokenAddress.toJSON() : void 0,
        price: this.price.toJSON(),
        block_timestamp: this.blockTimestamp.toISOString(),
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash
      };
    };
    return EvmTrade2;
  }()
);
var EvmTradeCollection = (
  /** @class */
  function() {
    function EvmTradeCollection2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmTrade.create(item);
      });
    }
    EvmTradeCollection2.create = function(input) {
      if (input instanceof EvmTradeCollection2) {
        return input;
      }
      return new EvmTradeCollection2(input);
    };
    EvmTradeCollection2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmTrade.fromJSON(item);
        })
      };
      return EvmTradeCollection2.create(input);
    };
    EvmTradeCollection2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmTradeCollection2;
  }()
);
var EvmSoldPriceLastSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceLastSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceLastSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceLastSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceLastSalePaymentToken2(input);
    };
    EvmSoldPriceLastSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceLastSalePaymentToken2.create(input);
    };
    EvmSoldPriceLastSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceLastSalePaymentToken2;
  }()
);
var EvmSoldPriceLastSale = (
  /** @class */
  function() {
    function EvmSoldPriceLastSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = EvmAddress.create(input.buyerAddress);
      this.sellerAddress = EvmAddress.create(input.sellerAddress);
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceLastSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceLastSale2.create = function(input) {
      if (input instanceof EvmSoldPriceLastSale2) {
        return input;
      }
      return new EvmSoldPriceLastSale2(input);
    };
    EvmSoldPriceLastSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: EvmAddress.fromJSON(json.buyer_address),
        sellerAddress: EvmAddress.fromJSON(json.seller_address),
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceLastSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceLastSale2.create(input);
    };
    EvmSoldPriceLastSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress.toJSON(),
        seller_address: this.sellerAddress.toJSON(),
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceLastSale2;
  }()
);
var EvmSoldPriceLowestSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceLowestSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceLowestSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceLowestSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceLowestSalePaymentToken2(input);
    };
    EvmSoldPriceLowestSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceLowestSalePaymentToken2.create(input);
    };
    EvmSoldPriceLowestSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceLowestSalePaymentToken2;
  }()
);
var EvmSoldPriceLowestSale = (
  /** @class */
  function() {
    function EvmSoldPriceLowestSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = input.buyerAddress ? EvmAddress.create(input.buyerAddress) : void 0;
      this.sellerAddress = input.sellerAddress ? EvmAddress.create(input.sellerAddress) : void 0;
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceLowestSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceLowestSale2.create = function(input) {
      if (input instanceof EvmSoldPriceLowestSale2) {
        return input;
      }
      return new EvmSoldPriceLowestSale2(input);
    };
    EvmSoldPriceLowestSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: json.buyer_address ? EvmAddress.fromJSON(json.buyer_address) : void 0,
        sellerAddress: json.seller_address ? EvmAddress.fromJSON(json.seller_address) : void 0,
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceLowestSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceLowestSale2.create(input);
    };
    EvmSoldPriceLowestSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress ? this.buyerAddress.toJSON() : void 0,
        seller_address: this.sellerAddress ? this.sellerAddress.toJSON() : void 0,
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceLowestSale2;
  }()
);
var EvmSoldPriceHighestSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceHighestSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceHighestSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceHighestSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceHighestSalePaymentToken2(input);
    };
    EvmSoldPriceHighestSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceHighestSalePaymentToken2.create(input);
    };
    EvmSoldPriceHighestSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceHighestSalePaymentToken2;
  }()
);
var EvmSoldPriceHighestSale = (
  /** @class */
  function() {
    function EvmSoldPriceHighestSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = input.buyerAddress ? EvmAddress.create(input.buyerAddress) : void 0;
      this.sellerAddress = input.sellerAddress ? EvmAddress.create(input.sellerAddress) : void 0;
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceHighestSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceHighestSale2.create = function(input) {
      if (input instanceof EvmSoldPriceHighestSale2) {
        return input;
      }
      return new EvmSoldPriceHighestSale2(input);
    };
    EvmSoldPriceHighestSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: json.buyer_address ? EvmAddress.fromJSON(json.buyer_address) : void 0,
        sellerAddress: json.seller_address ? EvmAddress.fromJSON(json.seller_address) : void 0,
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceHighestSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceHighestSale2.create(input);
    };
    EvmSoldPriceHighestSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress ? this.buyerAddress.toJSON() : void 0,
        seller_address: this.sellerAddress ? this.sellerAddress.toJSON() : void 0,
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceHighestSale2;
  }()
);
var EvmSoldPriceAverageSale = (
  /** @class */
  function() {
    function EvmSoldPriceAverageSale2(input) {
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.currentUsdValue = input.currentUsdValue;
    }
    EvmSoldPriceAverageSale2.create = function(input) {
      if (input instanceof EvmSoldPriceAverageSale2) {
        return input;
      }
      return new EvmSoldPriceAverageSale2(input);
    };
    EvmSoldPriceAverageSale2.fromJSON = function(json) {
      var input = {
        price: json.price,
        priceFormatted: json.price_formatted,
        currentUsdValue: json.current_usd_value
      };
      return EvmSoldPriceAverageSale2.create(input);
    };
    EvmSoldPriceAverageSale2.prototype.toJSON = function() {
      return {
        price: this.price,
        price_formatted: this.priceFormatted,
        current_usd_value: this.currentUsdValue
      };
    };
    return EvmSoldPriceAverageSale2;
  }()
);
var EvmSoldPrice = (
  /** @class */
  function() {
    function EvmSoldPrice2(input) {
      this.lastSale = EvmSoldPriceLastSale.create(input.lastSale);
      this.lowestSale = EvmSoldPriceLowestSale.create(input.lowestSale);
      this.highestSale = EvmSoldPriceHighestSale.create(input.highestSale);
      this.averageSale = EvmSoldPriceAverageSale.create(input.averageSale);
      this.totalTrades = input.totalTrades;
      this.message = input.message;
    }
    EvmSoldPrice2.create = function(input) {
      if (input instanceof EvmSoldPrice2) {
        return input;
      }
      return new EvmSoldPrice2(input);
    };
    EvmSoldPrice2.fromJSON = function(json) {
      var input = {
        lastSale: EvmSoldPriceLastSale.fromJSON(json.last_sale),
        lowestSale: EvmSoldPriceLowestSale.fromJSON(json.lowest_sale),
        highestSale: EvmSoldPriceHighestSale.fromJSON(json.highest_sale),
        averageSale: EvmSoldPriceAverageSale.fromJSON(json.average_sale),
        totalTrades: json.total_trades,
        message: json.message
      };
      return EvmSoldPrice2.create(input);
    };
    EvmSoldPrice2.prototype.toJSON = function() {
      return {
        last_sale: this.lastSale.toJSON(),
        lowest_sale: this.lowestSale.toJSON(),
        highest_sale: this.highestSale.toJSON(),
        average_sale: this.averageSale.toJSON(),
        total_trades: this.totalTrades,
        message: this.message
      };
    };
    return EvmSoldPrice2;
  }()
);
var EvmNativeErc20Price = (
  /** @class */
  function() {
    function EvmNativeErc20Price2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
      this.address = EvmAddress.create(input.address);
    }
    EvmNativeErc20Price2.create = function(input) {
      if (input instanceof EvmNativeErc20Price2) {
        return input;
      }
      return new EvmNativeErc20Price2(input);
    };
    EvmNativeErc20Price2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol,
        address: EvmAddress.fromJSON(json.address)
      };
      return EvmNativeErc20Price2.create(input);
    };
    EvmNativeErc20Price2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol,
        address: this.address.toJSON()
      };
    };
    return EvmNativeErc20Price2;
  }()
);
var EvmErc20Price = (
  /** @class */
  function() {
    function EvmErc20Price2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.nativePrice = input.nativePrice ? EvmNativeErc20Price.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.usdPriceFormatted = input.usdPriceFormatted;
      this["24hrPercentChange"] = input["24hrPercentChange"];
      this.exchangeAddress = input.exchangeAddress;
      this.exchangeName = input.exchangeName;
      this.tokenAddress = input.tokenAddress;
      this.toBlock = input.toBlock;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.pairAddress = input.pairAddress;
      this.pairTotalLiquidityUsd = input.pairTotalLiquidityUsd;
    }
    EvmErc20Price2.create = function(input) {
      if (input instanceof EvmErc20Price2) {
        return input;
      }
      return new EvmErc20Price2(input);
    };
    EvmErc20Price2.fromJSON = function(json) {
      var input = {
        tokenName: json.tokenName,
        tokenSymbol: json.tokenSymbol,
        tokenLogo: json.tokenLogo,
        tokenDecimals: json.tokenDecimals,
        nativePrice: json.nativePrice ? EvmNativeErc20Price.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        usdPriceFormatted: json.usdPriceFormatted,
        "24hrPercentChange": json["24hrPercentChange"],
        exchangeAddress: json.exchangeAddress,
        exchangeName: json.exchangeName,
        tokenAddress: json.tokenAddress,
        toBlock: json.toBlock,
        possibleSpam: json.possibleSpam,
        verifiedContract: json.verifiedContract,
        pairAddress: json.pairAddress,
        pairTotalLiquidityUsd: json.pairTotalLiquidityUsd
      };
      return EvmErc20Price2.create(input);
    };
    EvmErc20Price2.prototype.toJSON = function() {
      return {
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol,
        tokenLogo: this.tokenLogo,
        tokenDecimals: this.tokenDecimals,
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        usdPriceFormatted: this.usdPriceFormatted,
        "24hrPercentChange": this["24hrPercentChange"],
        exchangeAddress: this.exchangeAddress,
        exchangeName: this.exchangeName,
        tokenAddress: this.tokenAddress,
        toBlock: this.toBlock,
        possibleSpam: this.possibleSpam,
        verifiedContract: this.verifiedContract,
        pairAddress: this.pairAddress,
        pairTotalLiquidityUsd: this.pairTotalLiquidityUsd
      };
    };
    return EvmErc20Price2;
  }()
);
var EvmTokenPriceItem = (
  /** @class */
  function() {
    function EvmTokenPriceItem2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.exchange = input.exchange;
      this.toBlock = input.toBlock;
    }
    EvmTokenPriceItem2.create = function(input) {
      if (input instanceof EvmTokenPriceItem2) {
        return input;
      }
      return new EvmTokenPriceItem2(input);
    };
    EvmTokenPriceItem2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        exchange: json.exchange,
        toBlock: json.to_block
      };
      return EvmTokenPriceItem2.create(input);
    };
    EvmTokenPriceItem2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        exchange: this.exchange,
        to_block: this.toBlock
      };
    };
    return EvmTokenPriceItem2;
  }()
);
var EvmGetMultipleTokenPricesDto = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesDto2(input) {
      this.tokens = input.tokens.map(function(item) {
        return EvmTokenPriceItem.create(item);
      });
    }
    EvmGetMultipleTokenPricesDto2.create = function(input) {
      if (input instanceof EvmGetMultipleTokenPricesDto2) {
        return input;
      }
      return new EvmGetMultipleTokenPricesDto2(input);
    };
    EvmGetMultipleTokenPricesDto2.fromJSON = function(json) {
      var input = {
        tokens: json.tokens.map(function(item) {
          return EvmTokenPriceItem.fromJSON(item);
        })
      };
      return EvmGetMultipleTokenPricesDto2.create(input);
    };
    EvmGetMultipleTokenPricesDto2.prototype.toJSON = function() {
      return {
        tokens: this.tokens.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmGetMultipleTokenPricesDto2;
  }()
);
var EvmErc20TokenOwner = (
  /** @class */
  function() {
    function EvmErc20TokenOwner2(input) {
      this.ownerAddress = input.ownerAddress;
      this.ownerAddressLabel = input.ownerAddressLabel;
      this.balance = input.balance;
      this.balanceFormatted = input.balanceFormatted;
      this.usdValue = input.usdValue;
      this.isContract = input.isContract;
      this.percentageRelativeToTotalSupply = input.percentageRelativeToTotalSupply;
    }
    EvmErc20TokenOwner2.create = function(input) {
      if (input instanceof EvmErc20TokenOwner2) {
        return input;
      }
      return new EvmErc20TokenOwner2(input);
    };
    EvmErc20TokenOwner2.fromJSON = function(json) {
      var input = {
        ownerAddress: json.owner_address,
        ownerAddressLabel: json.owner_address_label,
        balance: json.balance,
        balanceFormatted: json.balance_formatted,
        usdValue: json.usd_value,
        isContract: json.is_contract,
        percentageRelativeToTotalSupply: json.percentage_relative_to_total_supply
      };
      return EvmErc20TokenOwner2.create(input);
    };
    EvmErc20TokenOwner2.prototype.toJSON = function() {
      return {
        owner_address: this.ownerAddress,
        owner_address_label: this.ownerAddressLabel,
        balance: this.balance,
        balance_formatted: this.balanceFormatted,
        usd_value: this.usdValue,
        is_contract: this.isContract,
        percentage_relative_to_total_supply: this.percentageRelativeToTotalSupply
      };
    };
    return EvmErc20TokenOwner2;
  }()
);
var EvmErc20TokenOwnerCollection = (
  /** @class */
  function() {
    function EvmErc20TokenOwnerCollection2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmErc20TokenOwner.create(item);
      });
    }
    EvmErc20TokenOwnerCollection2.create = function(input) {
      if (input instanceof EvmErc20TokenOwnerCollection2) {
        return input;
      }
      return new EvmErc20TokenOwnerCollection2(input);
    };
    EvmErc20TokenOwnerCollection2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmErc20TokenOwner.fromJSON(item);
        })
      };
      return EvmErc20TokenOwnerCollection2.create(input);
    };
    EvmErc20TokenOwnerCollection2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmErc20TokenOwnerCollection2;
  }()
);
var EvmContractTokenDetails = (
  /** @class */
  function() {
    function EvmContractTokenDetails2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.tokenName = input.tokenName;
      this.tokenLogo = input.tokenLogo;
      this.tokenSymbol = input.tokenSymbol;
    }
    EvmContractTokenDetails2.create = function(input) {
      if (input instanceof EvmContractTokenDetails2) {
        return input;
      }
      return new EvmContractTokenDetails2(input);
    };
    EvmContractTokenDetails2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        tokenName: json.token_name,
        tokenLogo: json.token_logo,
        tokenSymbol: json.token_symbol
      };
      return EvmContractTokenDetails2.create(input);
    };
    EvmContractTokenDetails2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        token_name: this.tokenName,
        token_logo: this.tokenLogo,
        token_symbol: this.tokenSymbol
      };
    };
    return EvmContractTokenDetails2;
  }()
);
var EvmContractSpenderDetails = (
  /** @class */
  function() {
    function EvmContractSpenderDetails2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.name = input.name;
      this.symbol = input.symbol;
      this.logo = input.logo;
    }
    EvmContractSpenderDetails2.create = function(input) {
      if (input instanceof EvmContractSpenderDetails2) {
        return input;
      }
      return new EvmContractSpenderDetails2(input);
    };
    EvmContractSpenderDetails2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        name: json.name,
        symbol: json.symbol,
        logo: json.logo
      };
      return EvmContractSpenderDetails2.create(input);
    };
    EvmContractSpenderDetails2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        name: this.name,
        symbol: this.symbol,
        logo: this.logo
      };
    };
    return EvmContractSpenderDetails2;
  }()
);
var EvmCommonContractData = (
  /** @class */
  function() {
    function EvmCommonContractData2(input) {
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.token = EvmContractTokenDetails.create(input.token);
      this.spender = EvmContractSpenderDetails.create(input.spender);
    }
    EvmCommonContractData2.create = function(input) {
      if (input instanceof EvmCommonContractData2) {
        return input;
      }
      return new EvmCommonContractData2(input);
    };
    EvmCommonContractData2.fromJSON = function(json) {
      var input = {
        value: json.value,
        valueFormatted: json.value_formatted,
        token: EvmContractTokenDetails.fromJSON(json.token),
        spender: EvmContractSpenderDetails.fromJSON(json.spender)
      };
      return EvmCommonContractData2.create(input);
    };
    EvmCommonContractData2.prototype.toJSON = function() {
      return {
        value: this.value,
        value_formatted: this.valueFormatted,
        token: this.token.toJSON(),
        spender: this.spender.toJSON()
      };
    };
    return EvmCommonContractData2;
  }()
);
var EvmResolveContractInteractionResponse = (
  /** @class */
  function() {
    function EvmResolveContractInteractionResponse2(input) {
      this.approvals = input.approvals ? input.approvals.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.revokes = input.revokes ? input.revokes.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.approvalsAll = input.approvalsAll ? input.approvalsAll.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.revokesAll = input.revokesAll ? input.revokesAll.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
    }
    EvmResolveContractInteractionResponse2.create = function(input) {
      if (input instanceof EvmResolveContractInteractionResponse2) {
        return input;
      }
      return new EvmResolveContractInteractionResponse2(input);
    };
    EvmResolveContractInteractionResponse2.fromJSON = function(json) {
      var input = {
        approvals: json.approvals ? json.approvals.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        revokes: json.revokes ? json.revokes.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        approvalsAll: json.approvalsAll ? json.approvalsAll.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        revokesAll: json.revokesAll ? json.revokesAll.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0
      };
      return EvmResolveContractInteractionResponse2.create(input);
    };
    EvmResolveContractInteractionResponse2.prototype.toJSON = function() {
      return {
        approvals: this.approvals ? this.approvals.map(function(item) {
          return item.toJSON();
        }) : void 0,
        revokes: this.revokes ? this.revokes.map(function(item) {
          return item.toJSON();
        }) : void 0,
        approvalsAll: this.approvalsAll ? this.approvalsAll.map(function(item) {
          return item.toJSON();
        }) : void 0,
        revokesAll: this.revokesAll ? this.revokesAll.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmResolveContractInteractionResponse2;
  }()
);
var EvmNormalizedMetadataAttribute = (
  /** @class */
  function() {
    function EvmNormalizedMetadataAttribute2(input) {
      this.traitType = input.traitType;
      this.value = input.value ? EvmNormalizedMetadataAttributeValue.create(input.value) : void 0;
      this.displayType = input.displayType;
      this.maxValue = input.maxValue;
      this.traitCount = input.traitCount;
      this.order = input.order;
    }
    EvmNormalizedMetadataAttribute2.create = function(input) {
      if (input instanceof EvmNormalizedMetadataAttribute2) {
        return input;
      }
      return new EvmNormalizedMetadataAttribute2(input);
    };
    EvmNormalizedMetadataAttribute2.fromJSON = function(json) {
      var input = {
        traitType: json.trait_type,
        value: json.value ? EvmNormalizedMetadataAttributeValue.fromJSON(json.value) : void 0,
        displayType: json.display_type,
        maxValue: json.max_value,
        traitCount: json.trait_count,
        order: json.order
      };
      return EvmNormalizedMetadataAttribute2.create(input);
    };
    EvmNormalizedMetadataAttribute2.prototype.toJSON = function() {
      return {
        trait_type: this.traitType,
        value: this.value ? this.value : void 0,
        display_type: this.displayType,
        max_value: this.maxValue,
        trait_count: this.traitCount,
        order: this.order
      };
    };
    return EvmNormalizedMetadataAttribute2;
  }()
);
var EvmNormalizedMetadata = (
  /** @class */
  function() {
    function EvmNormalizedMetadata2(input) {
      this.name = input.name;
      this.description = input.description;
      this.image = input.image;
      this.externalLink = input.externalLink;
      this.animationUrl = input.animationUrl;
      this.attributes = input.attributes ? input.attributes.map(function(item) {
        return EvmNormalizedMetadataAttribute.create(item);
      }) : void 0;
    }
    EvmNormalizedMetadata2.create = function(input) {
      if (input instanceof EvmNormalizedMetadata2) {
        return input;
      }
      return new EvmNormalizedMetadata2(input);
    };
    EvmNormalizedMetadata2.fromJSON = function(json) {
      var input = {
        name: json.name,
        description: json.description,
        image: json.image,
        externalLink: json.external_link,
        animationUrl: json.animation_url,
        attributes: json.attributes ? json.attributes.map(function(item) {
          return EvmNormalizedMetadataAttribute.fromJSON(item);
        }) : void 0
      };
      return EvmNormalizedMetadata2.create(input);
    };
    EvmNormalizedMetadata2.prototype.toJSON = function() {
      return {
        name: this.name,
        description: this.description,
        image: this.image,
        external_link: this.externalLink,
        animation_url: this.animationUrl,
        attributes: this.attributes ? this.attributes.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmNormalizedMetadata2;
  }()
);
var EvmWalletHistoryNftTransfer = (
  /** @class */
  function() {
    function EvmWalletHistoryNftTransfer2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.tokenId = input.tokenId;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.amount = input.amount;
      this.contractType = input.contractType;
      this.transactionType = input.transactionType;
      this.logIndex = input.logIndex;
      this.operator = input.operator;
      this.possibleSpam = input.possibleSpam;
      this.verifiedCollection = input.verifiedCollection;
      this.direction = input.direction;
      this.collectionLogo = input.collectionLogo;
      this.collectionBannerImage = input.collectionBannerImage;
      this.normalizedMetadata = input.normalizedMetadata ? EvmNormalizedMetadata.create(input.normalizedMetadata) : void 0;
    }
    EvmWalletHistoryNftTransfer2.create = function(input) {
      if (input instanceof EvmWalletHistoryNftTransfer2) {
        return input;
      }
      return new EvmWalletHistoryNftTransfer2(input);
    };
    EvmWalletHistoryNftTransfer2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        tokenId: json.token_id,
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        amount: json.amount,
        contractType: json.contract_type,
        transactionType: json.transaction_type,
        logIndex: json.log_index,
        operator: json.operator,
        possibleSpam: json.possible_spam,
        verifiedCollection: json.verified_collection,
        direction: json.direction,
        collectionLogo: json.collection_logo,
        collectionBannerImage: json.collection_banner_image,
        normalizedMetadata: json.normalized_metadata ? EvmNormalizedMetadata.fromJSON(json.normalized_metadata) : void 0
      };
      return EvmWalletHistoryNftTransfer2.create(input);
    };
    EvmWalletHistoryNftTransfer2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        token_id: this.tokenId,
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        amount: this.amount,
        contract_type: this.contractType,
        transaction_type: this.transactionType,
        log_index: this.logIndex,
        operator: this.operator,
        possible_spam: this.possibleSpam,
        verified_collection: this.verifiedCollection,
        direction: this.direction,
        collection_logo: this.collectionLogo,
        collection_banner_image: this.collectionBannerImage,
        normalized_metadata: this.normalizedMetadata ? this.normalizedMetadata.toJSON() : void 0
      };
    };
    return EvmWalletHistoryNftTransfer2;
  }()
);
var EvmWalletHistoryErc20Transfer = (
  /** @class */
  function() {
    function EvmWalletHistoryErc20Transfer2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.address = EvmAddress.create(input.address);
      this.blockTimestamp = input.blockTimestamp;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.logIndex = input.logIndex;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
    }
    EvmWalletHistoryErc20Transfer2.create = function(input) {
      if (input instanceof EvmWalletHistoryErc20Transfer2) {
        return input;
      }
      return new EvmWalletHistoryErc20Transfer2(input);
    };
    EvmWalletHistoryErc20Transfer2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        address: EvmAddress.fromJSON(json.address),
        blockTimestamp: json.block_timestamp,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        value: json.value,
        valueFormatted: json.value_formatted,
        logIndex: json.log_index,
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract
      };
      return EvmWalletHistoryErc20Transfer2.create(input);
    };
    EvmWalletHistoryErc20Transfer2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        address: this.address.toJSON(),
        block_timestamp: this.blockTimestamp,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        value: this.value,
        value_formatted: this.valueFormatted,
        log_index: this.logIndex,
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract
      };
    };
    return EvmWalletHistoryErc20Transfer2;
  }()
);
var EvmNativeTransfer = (
  /** @class */
  function() {
    function EvmNativeTransfer2(input) {
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.direction = input.direction;
      this.internalTransaction = input.internalTransaction;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
    }
    EvmNativeTransfer2.create = function(input) {
      if (input instanceof EvmNativeTransfer2) {
        return input;
      }
      return new EvmNativeTransfer2(input);
    };
    EvmNativeTransfer2.fromJSON = function(json) {
      var input = {
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        valueFormatted: json.value_formatted,
        direction: json.direction,
        internalTransaction: json.internal_transaction,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo
      };
      return EvmNativeTransfer2.create(input);
    };
    EvmNativeTransfer2.prototype.toJSON = function() {
      return {
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        value_formatted: this.valueFormatted,
        direction: this.direction,
        internal_transaction: this.internalTransaction,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo
      };
    };
    return EvmNativeTransfer2;
  }()
);
var EvmDecodedEventParamsItem = (
  /** @class */
  function() {
    function EvmDecodedEventParamsItem2(input) {
      this.name = input.name;
      this.value = input.value;
      this.type = input.type;
    }
    EvmDecodedEventParamsItem2.create = function(input) {
      if (input instanceof EvmDecodedEventParamsItem2) {
        return input;
      }
      return new EvmDecodedEventParamsItem2(input);
    };
    EvmDecodedEventParamsItem2.fromJSON = function(json) {
      var input = {
        name: json.name,
        value: json.value,
        type: json.type
      };
      return EvmDecodedEventParamsItem2.create(input);
    };
    EvmDecodedEventParamsItem2.prototype.toJSON = function() {
      return {
        name: this.name,
        value: this.value,
        type: this.type
      };
    };
    return EvmDecodedEventParamsItem2;
  }()
);
var EvmDecodedEvent = (
  /** @class */
  function() {
    function EvmDecodedEvent2(input) {
      this.signature = input.signature;
      this.label = input.label;
      this.type = input.type;
      this.params = input.params ? input.params.map(function(item) {
        return EvmDecodedEventParamsItem.create(item);
      }) : void 0;
    }
    EvmDecodedEvent2.create = function(input) {
      if (input instanceof EvmDecodedEvent2) {
        return input;
      }
      return new EvmDecodedEvent2(input);
    };
    EvmDecodedEvent2.fromJSON = function(json) {
      var input = {
        signature: json.signature,
        label: json.label,
        type: json.type,
        params: json.params ? json.params.map(function(item) {
          return EvmDecodedEventParamsItem.fromJSON(item);
        }) : void 0
      };
      return EvmDecodedEvent2.create(input);
    };
    EvmDecodedEvent2.prototype.toJSON = function() {
      return {
        signature: this.signature,
        label: this.label,
        type: this.type,
        params: this.params ? this.params.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmDecodedEvent2;
  }()
);
var EvmLogVerbose = (
  /** @class */
  function() {
    function EvmLogVerbose2(input) {
      this.logIndex = input.logIndex;
      this.transactionHash = input.transactionHash;
      this.transactionIndex = input.transactionIndex;
      this.address = EvmAddress.create(input.address);
      this.data = input.data;
      this.topic0 = input.topic0;
      this.topic1 = input.topic1;
      this.topic2 = input.topic2;
      this.topic3 = input.topic3;
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
      this.decodedEvent = EvmDecodedEvent.create(input.decodedEvent);
    }
    EvmLogVerbose2.create = function(input) {
      if (input instanceof EvmLogVerbose2) {
        return input;
      }
      return new EvmLogVerbose2(input);
    };
    EvmLogVerbose2.fromJSON = function(json) {
      var input = {
        logIndex: Number(json.log_index),
        transactionHash: json.transaction_hash,
        transactionIndex: Number(json.transaction_index),
        address: EvmAddress.fromJSON(json.address),
        data: json.data,
        topic0: json.topic0,
        topic1: json.topic1,
        topic2: json.topic2,
        topic3: json.topic3,
        blockTimestamp: json.block_timestamp,
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash,
        decodedEvent: EvmDecodedEvent.fromJSON(json.decoded_event)
      };
      return EvmLogVerbose2.create(input);
    };
    EvmLogVerbose2.prototype.toJSON = function() {
      return {
        log_index: String(this.logIndex),
        transaction_hash: this.transactionHash,
        transaction_index: String(this.transactionIndex),
        address: this.address.toJSON(),
        data: this.data,
        topic0: this.topic0,
        topic1: this.topic1,
        topic2: this.topic2,
        topic3: this.topic3,
        block_timestamp: this.blockTimestamp,
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash,
        decoded_event: this.decodedEvent.toJSON()
      };
    };
    return EvmLogVerbose2;
  }()
);
var EvmWalletHistoryTransaction = (
  /** @class */
  function() {
    function EvmWalletHistoryTransaction2(input) {
      this.hash = input.hash;
      this.nonce = input.nonce;
      this.transactionIndex = input.transactionIndex;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.gas = input.gas;
      this.gasPrice = input.gasPrice;
      this.input = input.input;
      this.receiptCumulativeGasUsed = input.receiptCumulativeGasUsed;
      this.receiptGasUsed = input.receiptGasUsed;
      this.receiptContractAddress = input.receiptContractAddress;
      this.receiptStatus = input.receiptStatus;
      this.transactionFee = input.transactionFee;
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
      this.internalTransactions = input.internalTransactions ? input.internalTransactions.map(function(item) {
        return EvmInternalTransaction.create(item);
      }) : void 0;
      this.category = EvmETransactionCategory.create(input.category);
      this.contractInteractions = input.contractInteractions ? EvmResolveContractInteractionResponse.create(input.contractInteractions) : void 0;
      this.possibleSpam = input.possibleSpam;
      this.methodLabel = input.methodLabel;
      this.summary = input.summary;
      this.nftTransfers = input.nftTransfers.map(function(item) {
        return EvmWalletHistoryNftTransfer.create(item);
      });
      this.erc20Transfers = input.erc20Transfers.map(function(item) {
        return EvmWalletHistoryErc20Transfer.create(item);
      });
      this.nativeTransfers = input.nativeTransfers.map(function(item) {
        return EvmNativeTransfer.create(item);
      });
      this.logs = input.logs ? input.logs.map(function(item) {
        return EvmLogVerbose.create(item);
      }) : void 0;
    }
    EvmWalletHistoryTransaction2.create = function(input) {
      if (input instanceof EvmWalletHistoryTransaction2) {
        return input;
      }
      return new EvmWalletHistoryTransaction2(input);
    };
    EvmWalletHistoryTransaction2.fromJSON = function(json) {
      var input = {
        hash: json.hash,
        nonce: json.nonce,
        transactionIndex: Number(json.transaction_index),
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        gas: json.gas,
        gasPrice: json.gas_price,
        input: json.input,
        receiptCumulativeGasUsed: json.receipt_cumulative_gas_used,
        receiptGasUsed: json.receipt_gas_used,
        receiptContractAddress: json.receipt_contract_address,
        receiptStatus: json.receipt_status,
        transactionFee: json.transaction_fee,
        blockTimestamp: json.block_timestamp,
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash,
        internalTransactions: json.internal_transactions ? json.internal_transactions.map(function(item) {
          return EvmInternalTransaction.fromJSON(item);
        }) : void 0,
        category: EvmETransactionCategory.fromJSON(json.category),
        contractInteractions: json.contract_interactions ? EvmResolveContractInteractionResponse.fromJSON(json.contract_interactions) : void 0,
        possibleSpam: json.possible_spam,
        methodLabel: json.method_label,
        summary: json.summary,
        nftTransfers: json.nft_transfers.map(function(item) {
          return EvmWalletHistoryNftTransfer.fromJSON(item);
        }),
        erc20Transfers: json.erc20_transfers.map(function(item) {
          return EvmWalletHistoryErc20Transfer.fromJSON(item);
        }),
        nativeTransfers: json.native_transfers.map(function(item) {
          return EvmNativeTransfer.fromJSON(item);
        }),
        logs: json.logs ? json.logs.map(function(item) {
          return EvmLogVerbose.fromJSON(item);
        }) : void 0
      };
      return EvmWalletHistoryTransaction2.create(input);
    };
    EvmWalletHistoryTransaction2.prototype.toJSON = function() {
      return {
        hash: this.hash,
        nonce: this.nonce,
        transaction_index: String(this.transactionIndex),
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        gas: this.gas,
        gas_price: this.gasPrice,
        input: this.input,
        receipt_cumulative_gas_used: this.receiptCumulativeGasUsed,
        receipt_gas_used: this.receiptGasUsed,
        receipt_contract_address: this.receiptContractAddress,
        receipt_status: this.receiptStatus,
        transaction_fee: this.transactionFee,
        block_timestamp: this.blockTimestamp,
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash,
        internal_transactions: this.internalTransactions ? this.internalTransactions.map(function(item) {
          return item.toJSON();
        }) : void 0,
        category: this.category,
        contract_interactions: this.contractInteractions ? this.contractInteractions.toJSON() : void 0,
        possible_spam: this.possibleSpam,
        method_label: this.methodLabel,
        summary: this.summary,
        nft_transfers: this.nftTransfers.map(function(item) {
          return item.toJSON();
        }),
        erc20_transfers: this.erc20Transfers.map(function(item) {
          return item.toJSON();
        }),
        native_transfers: this.nativeTransfers.map(function(item) {
          return item.toJSON();
        }),
        logs: this.logs ? this.logs.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmWalletHistoryTransaction2;
  }()
);
var EvmWalletHistory = (
  /** @class */
  function() {
    function EvmWalletHistory2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmWalletHistoryTransaction.create(item);
      });
    }
    EvmWalletHistory2.create = function(input) {
      if (input instanceof EvmWalletHistory2) {
        return input;
      }
      return new EvmWalletHistory2(input);
    };
    EvmWalletHistory2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmWalletHistoryTransaction.fromJSON(item);
        })
      };
      return EvmWalletHistory2.create(input);
    };
    EvmWalletHistory2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletHistory2;
  }()
);
var EvmErc20TokenBalanceWithPrice = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPrice2(input) {
      this.tokenAddress = input.tokenAddress ? EvmAddress.create(input.tokenAddress) : void 0;
      this.name = input.name;
      this.symbol = input.symbol;
      this.logo = input.logo;
      this.thumbnail = input.thumbnail;
      this.decimals = input.decimals;
      this.balance = EvmNative.create(input.balance);
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.usdPrice = input.usdPrice;
      this.usdPrice24hrPercentChange = input.usdPrice24hrPercentChange;
      this.usdPrice24hrUsdChange = input.usdPrice24hrUsdChange;
      this.usdValue24hrUsdChange = input.usdValue24hrUsdChange;
      this.usdValue = input.usdValue;
      this.portfolioPercentage = input.portfolioPercentage;
      this.balanceFormatted = input.balanceFormatted;
      this.nativeToken = input.nativeToken;
      this.totalSupply = input.totalSupply;
      this.totalSupplyFormatted = input.totalSupplyFormatted;
      this.percentageRelativeToTotalSupply = input.percentageRelativeToTotalSupply;
    }
    EvmErc20TokenBalanceWithPrice2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPrice2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPrice2(input);
    };
    EvmErc20TokenBalanceWithPrice2.fromJSON = function(json) {
      var input = {
        tokenAddress: json.token_address ? EvmAddress.fromJSON(json.token_address) : void 0,
        name: json.name,
        symbol: json.symbol,
        logo: json.logo,
        thumbnail: json.thumbnail,
        decimals: json.decimals,
        balance: EvmNative.fromJSON(json.balance),
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract,
        usdPrice: json.usd_price,
        usdPrice24hrPercentChange: json.usd_price_24hr_percent_change,
        usdPrice24hrUsdChange: json.usd_price_24hr_usd_change,
        usdValue24hrUsdChange: json.usd_value_24hr_usd_change,
        usdValue: json.usd_value,
        portfolioPercentage: json.portfolio_percentage,
        balanceFormatted: json.balance_formatted,
        nativeToken: json.native_token,
        totalSupply: json.total_supply,
        totalSupplyFormatted: json.total_supply_formatted,
        percentageRelativeToTotalSupply: json.percentage_relative_to_total_supply
      };
      return EvmErc20TokenBalanceWithPrice2.create(input);
    };
    EvmErc20TokenBalanceWithPrice2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress ? this.tokenAddress.toJSON() : void 0,
        name: this.name,
        symbol: this.symbol,
        logo: this.logo,
        thumbnail: this.thumbnail,
        decimals: this.decimals,
        balance: this.balance.toJSON(),
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract,
        usd_price: this.usdPrice,
        usd_price_24hr_percent_change: this.usdPrice24hrPercentChange,
        usd_price_24hr_usd_change: this.usdPrice24hrUsdChange,
        usd_value_24hr_usd_change: this.usdValue24hrUsdChange,
        usd_value: this.usdValue,
        portfolio_percentage: this.portfolioPercentage,
        balance_formatted: this.balanceFormatted,
        native_token: this.nativeToken,
        total_supply: this.totalSupply,
        total_supply_formatted: this.totalSupplyFormatted,
        percentage_relative_to_total_supply: this.percentageRelativeToTotalSupply
      };
    };
    return EvmErc20TokenBalanceWithPrice2;
  }()
);
var EvmErc20TokenBalanceWithPriceResult = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPriceResult2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmErc20TokenBalanceWithPrice.create(item);
      });
    }
    EvmErc20TokenBalanceWithPriceResult2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPriceResult2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPriceResult2(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmErc20TokenBalanceWithPrice.fromJSON(item);
        })
      };
      return EvmErc20TokenBalanceWithPriceResult2.create(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmErc20TokenBalanceWithPriceResult2;
  }()
);
var EvmChainNetWorth = (
  /** @class */
  function() {
    function EvmChainNetWorth2(input) {
      this.chain = input.chain;
      this.nativeBalance = EvmNative.create(input.nativeBalance);
      this.nativeBalanceFormatted = input.nativeBalanceFormatted;
      this.nativeBalanceUsd = input.nativeBalanceUsd;
      this.tokenBalanceUsd = input.tokenBalanceUsd;
      this.networthUsd = input.networthUsd;
    }
    EvmChainNetWorth2.create = function(input) {
      if (input instanceof EvmChainNetWorth2) {
        return input;
      }
      return new EvmChainNetWorth2(input);
    };
    EvmChainNetWorth2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        nativeBalance: EvmNative.fromJSON(json.native_balance),
        nativeBalanceFormatted: json.native_balance_formatted,
        nativeBalanceUsd: json.native_balance_usd,
        tokenBalanceUsd: json.token_balance_usd,
        networthUsd: json.networth_usd
      };
      return EvmChainNetWorth2.create(input);
    };
    EvmChainNetWorth2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        native_balance: this.nativeBalance.toJSON(),
        native_balance_formatted: this.nativeBalanceFormatted,
        native_balance_usd: this.nativeBalanceUsd,
        token_balance_usd: this.tokenBalanceUsd,
        networth_usd: this.networthUsd
      };
    };
    return EvmChainNetWorth2;
  }()
);
var EvmUnavailableChainNetWorth = (
  /** @class */
  function() {
    function EvmUnavailableChainNetWorth2(input) {
      this.chainId = input.chainId;
    }
    EvmUnavailableChainNetWorth2.create = function(input) {
      if (input instanceof EvmUnavailableChainNetWorth2) {
        return input;
      }
      return new EvmUnavailableChainNetWorth2(input);
    };
    EvmUnavailableChainNetWorth2.fromJSON = function(json) {
      var input = {
        chainId: json.chain_id
      };
      return EvmUnavailableChainNetWorth2.create(input);
    };
    EvmUnavailableChainNetWorth2.prototype.toJSON = function() {
      return {
        chain_id: this.chainId
      };
    };
    return EvmUnavailableChainNetWorth2;
  }()
);
var EvmNetWorthResult = (
  /** @class */
  function() {
    function EvmNetWorthResult2(input) {
      this.totalNetworthUsd = input.totalNetworthUsd;
      this.chains = input.chains.map(function(item) {
        return EvmChainNetWorth.create(item);
      });
      this.unsupportedChainIds = input.unsupportedChainIds;
      this.unavailableChains = input.unavailableChains ? input.unavailableChains.map(function(item) {
        return EvmUnavailableChainNetWorth.create(item);
      }) : void 0;
    }
    EvmNetWorthResult2.create = function(input) {
      if (input instanceof EvmNetWorthResult2) {
        return input;
      }
      return new EvmNetWorthResult2(input);
    };
    EvmNetWorthResult2.fromJSON = function(json) {
      var input = {
        totalNetworthUsd: json.total_networth_usd,
        chains: json.chains.map(function(item) {
          return EvmChainNetWorth.fromJSON(item);
        }),
        unsupportedChainIds: json.unsupported_chain_ids,
        unavailableChains: json.unavailable_chains ? json.unavailable_chains.map(function(item) {
          return EvmUnavailableChainNetWorth.fromJSON(item);
        }) : void 0
      };
      return EvmNetWorthResult2.create(input);
    };
    EvmNetWorthResult2.prototype.toJSON = function() {
      return {
        total_networth_usd: this.totalNetworthUsd,
        chains: this.chains.map(function(item) {
          return item.toJSON();
        }),
        unsupported_chain_ids: this.unsupportedChainIds,
        unavailable_chains: this.unavailableChains ? this.unavailableChains.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmNetWorthResult2;
  }()
);
var EvmWeb3version = (
  /** @class */
  function() {
    function EvmWeb3version2(input) {
      this.version = input.version;
    }
    EvmWeb3version2.create = function(input) {
      if (input instanceof EvmWeb3version2) {
        return input;
      }
      return new EvmWeb3version2(input);
    };
    EvmWeb3version2.fromJSON = function(json) {
      var input = {
        version: json.version
      };
      return EvmWeb3version2.create(input);
    };
    EvmWeb3version2.prototype.toJSON = function() {
      return {
        version: this.version
      };
    };
    return EvmWeb3version2;
  }()
);
var EvmEndpointWeights = (
  /** @class */
  function() {
    function EvmEndpointWeights2(input) {
      this.endpoint = input.endpoint;
      this.path = input.path;
      this.rateLimitCost = input.rateLimitCost;
      this.price = input.price;
    }
    EvmEndpointWeights2.create = function(input) {
      if (input instanceof EvmEndpointWeights2) {
        return input;
      }
      return new EvmEndpointWeights2(input);
    };
    EvmEndpointWeights2.fromJSON = function(json) {
      var input = {
        endpoint: json.endpoint,
        path: json.path,
        rateLimitCost: json.rateLimitCost,
        price: json.price
      };
      return EvmEndpointWeights2.create(input);
    };
    EvmEndpointWeights2.prototype.toJSON = function() {
      return {
        endpoint: this.endpoint,
        path: this.path,
        rateLimitCost: this.rateLimitCost,
        price: this.price
      };
    };
    return EvmEndpointWeights2;
  }()
);
var EvmUnstoppableDomain = (
  /** @class */
  function() {
    function EvmUnstoppableDomain2(input) {
      this.name = input.name;
    }
    EvmUnstoppableDomain2.create = function(input) {
      if (input instanceof EvmUnstoppableDomain2) {
        return input;
      }
      return new EvmUnstoppableDomain2(input);
    };
    EvmUnstoppableDomain2.fromJSON = function(json) {
      var input = {
        name: json.name
      };
      return EvmUnstoppableDomain2.create(input);
    };
    EvmUnstoppableDomain2.prototype.toJSON = function() {
      return {
        name: this.name
      };
    };
    return EvmUnstoppableDomain2;
  }()
);
var EvmErc20Metadata = (
  /** @class */
  function() {
    function EvmErc20Metadata2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.logoHash = input.logoHash;
      this.thumbnail = input.thumbnail;
      this.totalSupply = input.totalSupply;
      this.totalSupplyFormatted = input.totalSupplyFormatted;
      this.fullyDilutedValuation = input.fullyDilutedValuation;
      this.blockNumber = input.blockNumber ? BigNumber.create(input.blockNumber) : void 0;
      this.validated = input.validated;
      this.createdAt = input.createdAt;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.categories = input.categories;
      this.links = input.links ? EvmErc20MetadataLinks.create(input.links) : void 0;
    }
    EvmErc20Metadata2.create = function(input) {
      if (input instanceof EvmErc20Metadata2) {
        return input;
      }
      return new EvmErc20Metadata2(input);
    };
    EvmErc20Metadata2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        name: json.name,
        symbol: json.symbol,
        decimals: Number(json.decimals),
        logo: json.logo,
        logoHash: json.logo_hash,
        thumbnail: json.thumbnail,
        totalSupply: json.total_supply,
        totalSupplyFormatted: json.total_supply_formatted,
        fullyDilutedValuation: json.fully_diluted_valuation,
        blockNumber: json.block_number ? BigNumber.fromJSON(json.block_number) : void 0,
        validated: json.validated,
        createdAt: json.created_at,
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract,
        categories: json.categories,
        links: json.links ? EvmErc20MetadataLinks.fromJSON(json.links) : void 0
      };
      return EvmErc20Metadata2.create(input);
    };
    EvmErc20Metadata2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        name: this.name,
        symbol: this.symbol,
        decimals: String(this.decimals),
        logo: this.logo,
        logo_hash: this.logoHash,
        thumbnail: this.thumbnail,
        total_supply: this.totalSupply,
        total_supply_formatted: this.totalSupplyFormatted,
        fully_diluted_valuation: this.fullyDilutedValuation,
        block_number: this.blockNumber ? this.blockNumber.toJSON() : void 0,
        validated: this.validated,
        created_at: this.createdAt,
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract,
        categories: this.categories,
        links: this.links ? this.links : void 0
      };
    };
    return EvmErc20Metadata2;
  }()
);
var EvmGetPairPrice = (
  /** @class */
  function() {
    function EvmGetPairPrice2(input) {
      this.pairAddress = input.pairAddress;
      this.pairLabel = input.pairLabel;
      this.exchange = input.exchange;
      this.quotePrice = input.quotePrice;
      this.priceUsd = input.priceUsd;
      this.baseToken = input.baseToken ? EvmErc20Metadata.create(input.baseToken) : void 0;
      this.quoteToken = input.quoteToken ? EvmErc20Metadata.create(input.quoteToken) : void 0;
    }
    EvmGetPairPrice2.create = function(input) {
      if (input instanceof EvmGetPairPrice2) {
        return input;
      }
      return new EvmGetPairPrice2(input);
    };
    EvmGetPairPrice2.fromJSON = function(json) {
      var input = {
        pairAddress: json.pair_address,
        pairLabel: json.pair_label,
        exchange: json.exchange,
        quotePrice: json.quote_price,
        priceUsd: json.price_usd,
        baseToken: json.base_token ? EvmErc20Metadata.fromJSON(json.base_token) : void 0,
        quoteToken: json.quote_token ? EvmErc20Metadata.fromJSON(json.quote_token) : void 0
      };
      return EvmGetPairPrice2.create(input);
    };
    EvmGetPairPrice2.prototype.toJSON = function() {
      return {
        pair_address: this.pairAddress,
        pair_label: this.pairLabel,
        exchange: this.exchange,
        quote_price: this.quotePrice,
        price_usd: this.priceUsd,
        base_token: this.baseToken ? this.baseToken.toJSON() : void 0,
        quote_token: this.quoteToken ? this.quoteToken.toJSON() : void 0
      };
    };
    return EvmGetPairPrice2;
  }()
);
var EvmMarketDataERC20TokenItem = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokenItem2(input) {
      this.rank = input.rank;
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.priceUsd = input.priceUsd;
      this.price24hPercentChange = input.price24hPercentChange;
      this.price7dPercentChange = input.price7dPercentChange;
      this.marketCapUsd = input.marketCapUsd;
    }
    EvmMarketDataERC20TokenItem2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokenItem2) {
        return input;
      }
      return new EvmMarketDataERC20TokenItem2(input);
    };
    EvmMarketDataERC20TokenItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        priceUsd: json.price_usd,
        price24hPercentChange: json.price_24h_percent_change,
        price7dPercentChange: json.price_7d_percent_change,
        marketCapUsd: json.market_cap_usd
      };
      return EvmMarketDataERC20TokenItem2.create(input);
    };
    EvmMarketDataERC20TokenItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        contract_address: this.contractAddress.toJSON(),
        price_usd: this.priceUsd,
        price_24h_percent_change: this.price24hPercentChange,
        price_7d_percent_change: this.price7dPercentChange,
        market_cap_usd: this.marketCapUsd
      };
    };
    return EvmMarketDataERC20TokenItem2;
  }()
);
var EvmMarketDataERC20TokensByPriceMovers = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokensByPriceMovers2(input) {
      this.gainers = input.gainers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
      this.losers = input.losers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
    }
    EvmMarketDataERC20TokensByPriceMovers2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokensByPriceMovers2) {
        return input;
      }
      return new EvmMarketDataERC20TokensByPriceMovers2(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.fromJSON = function(json) {
      var input = {
        gainers: json.gainers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        }),
        losers: json.losers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        })
      };
      return EvmMarketDataERC20TokensByPriceMovers2.create(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.prototype.toJSON = function() {
      return {
        gainers: this.gainers.map(function(item) {
          return item.toJSON();
        }),
        losers: this.losers.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmMarketDataERC20TokensByPriceMovers2;
  }()
);
var EvmMarketDataTopNFTCollectionByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopNFTCollectionByMarketCapItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
      this.floorPrice = input.floorPrice;
      this.floorPriceUsd24hrPercentChange = input.floorPriceUsd24hrPercentChange;
    }
    EvmMarketDataTopNFTCollectionByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopNFTCollectionByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopNFTCollectionByMarketCapItem2(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        marketCapUsd: json.market_cap_usd,
        marketCap24hrPercentChange: json.market_cap_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        collectionAddress: EvmAddress.fromJSON(json.collection_address),
        floorPrice: json.floor_price,
        floorPriceUsd24hrPercentChange: json.floor_price_usd_24hr_percent_change
      };
      return EvmMarketDataTopNFTCollectionByMarketCapItem2.create(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        market_cap_usd: this.marketCapUsd,
        market_cap_24hr_percent_change: this.marketCap24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        collection_address: this.collectionAddress.toJSON(),
        floor_price: this.floorPrice,
        floor_price_usd_24hr_percent_change: this.floorPriceUsd24hrPercentChange
      };
    };
    return EvmMarketDataTopNFTCollectionByMarketCapItem2;
  }()
);
var EvmMarketDataHottestNFTCollectionByTradingVolumeItem = (
  /** @class */
  function() {
    function EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.averagePriceUsd = input.averagePriceUsd;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
      this.averagePrice = input.averagePrice;
      this.floorPrice = input.floorPrice;
      this.floorPriceUsd24hrPercentChange = input.floorPriceUsd24hrPercentChange;
      this.floorPrice7dPercentChange = input.floorPrice7dPercentChange;
      this.floorPriceUsd7dPercentChange = input.floorPriceUsd7dPercentChange;
      this.floorPrice30dPercentChange = input.floorPrice30dPercentChange;
      this.floorPriceUsd30dPercentChange = input.floorPriceUsd30dPercentChange;
    }
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create = function(input) {
      if (input instanceof EvmMarketDataHottestNFTCollectionByTradingVolumeItem2) {
        return input;
      }
      return new EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        averagePriceUsd: json.average_price_usd,
        collectionAddress: EvmAddress.fromJSON(json.collection_address),
        averagePrice: json.average_price,
        floorPrice: json.floor_price,
        floorPriceUsd24hrPercentChange: json.floor_price_usd_24hr_percent_change,
        floorPrice7dPercentChange: json.floor_price_7d_percent_change,
        floorPriceUsd7dPercentChange: json.floor_price_usd_7d_percent_change,
        floorPrice30dPercentChange: json.floor_price_30d_percent_change,
        floorPriceUsd30dPercentChange: json.floor_price_usd_30d_percent_change
      };
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        average_price_usd: this.averagePriceUsd,
        collection_address: this.collectionAddress.toJSON(),
        average_price: this.averagePrice,
        floor_price: this.floorPrice,
        floor_price_usd_24hr_percent_change: this.floorPriceUsd24hrPercentChange,
        floor_price_7d_percent_change: this.floorPrice7dPercentChange,
        floor_price_usd_7d_percent_change: this.floorPriceUsd7dPercentChange,
        floor_price_30d_percent_change: this.floorPrice30dPercentChange,
        floor_price_usd_30d_percent_change: this.floorPriceUsd30dPercentChange
      };
    };
    return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2;
  }()
);
var EvmMarketDataTopCryptoCurrenciesByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input) {
      this.symbol = input.symbol;
      this.name = input.name;
      this.logo = input.logo;
      this.circulatingSupply = input.circulatingSupply;
      this.totalSupply = input.totalSupply;
      this.maxSupply = input.maxSupply;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCapRank = input.marketCapRank;
      this.marketCap24hrChange = input.marketCap24hrChange;
      this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;
      this.totalVolume = input.totalVolume;
      this.usdPrice = input.usdPrice;
      this.usdPrice24hrHigh = input.usdPrice24hrHigh;
      this.usdPrice24hrLow = input.usdPrice24hrLow;
      this.usdPrice24hrChange = input.usdPrice24hrChange;
      this.usdPrice24hrPercentChange = input.usdPrice24hrPercentChange;
      this.usdPriceAth = input.usdPriceAth;
      this.athPercentChange = input.athPercentChange;
      this.athDate = input.athDate;
      this.usdPrice1hrPercentChange = input.usdPrice1hrPercentChange;
      this.usdPrice7dPercentChange = input.usdPrice7dPercentChange;
      this.usdPrice30dPercentChange = input.usdPrice30dPercentChange;
    }
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopCryptoCurrenciesByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.fromJSON = function(json) {
      var input = {
        symbol: json.symbol,
        name: json.name,
        logo: json.logo,
        circulatingSupply: json.circulating_supply,
        totalSupply: json.total_supply,
        maxSupply: json.max_supply,
        marketCapUsd: json.market_cap_usd,
        marketCapRank: json.market_cap_rank,
        marketCap24hrChange: json.market_cap_24hr_change,
        marketCap24hrPercentChange: json.market_cap_24hr_percent_change,
        totalVolume: json.total_volume,
        usdPrice: json.usd_price,
        usdPrice24hrHigh: json.usd_price_24hr_high,
        usdPrice24hrLow: json.usd_price_24hr_low,
        usdPrice24hrChange: json.usd_price_24hr_change,
        usdPrice24hrPercentChange: json.usd_price_24hr_percent_change,
        usdPriceAth: json.usd_price_ath,
        athPercentChange: json.ath_percent_change,
        athDate: json.ath_date,
        usdPrice1hrPercentChange: json.usd_price_1hr_percent_change,
        usdPrice7dPercentChange: json.usd_price_7d_percent_change,
        usdPrice30dPercentChange: json.usd_price_30d_percent_change
      };
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.prototype.toJSON = function() {
      return {
        symbol: this.symbol,
        name: this.name,
        logo: this.logo,
        circulating_supply: this.circulatingSupply,
        total_supply: this.totalSupply,
        max_supply: this.maxSupply,
        market_cap_usd: this.marketCapUsd,
        market_cap_rank: this.marketCapRank,
        market_cap_24hr_change: this.marketCap24hrChange,
        market_cap_24hr_percent_change: this.marketCap24hrPercentChange,
        total_volume: this.totalVolume,
        usd_price: this.usdPrice,
        usd_price_24hr_high: this.usdPrice24hrHigh,
        usd_price_24hr_low: this.usdPrice24hrLow,
        usd_price_24hr_change: this.usdPrice24hrChange,
        usd_price_24hr_percent_change: this.usdPrice24hrPercentChange,
        usd_price_ath: this.usdPriceAth,
        ath_percent_change: this.athPercentChange,
        ath_date: this.athDate,
        usd_price_1hr_percent_change: this.usdPrice1hrPercentChange,
        usd_price_7d_percent_change: this.usdPrice7dPercentChange,
        usd_price_30d_percent_change: this.usdPrice30dPercentChange
      };
    };
    return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2;
  }()
);
var EvmReviewContracts = (
  /** @class */
  function() {
    function EvmReviewContracts2(input) {
      this.message = input.message;
    }
    EvmReviewContracts2.create = function(input) {
      if (input instanceof EvmReviewContracts2) {
        return input;
      }
      return new EvmReviewContracts2(input);
    };
    EvmReviewContracts2.fromJSON = function(json) {
      var input = {
        message: json.message
      };
      return EvmReviewContracts2.create(input);
    };
    EvmReviewContracts2.prototype.toJSON = function() {
      return {
        message: this.message
      };
    };
    return EvmReviewContracts2;
  }()
);
var EvmContractsReviewItem = (
  /** @class */
  function() {
    function EvmContractsReviewItem2(input) {
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.reason = input.reason;
      this.reportType = EvmContractsReviewItemReportTypeEnum.create(input.reportType);
      this.contractType = EvmContractsReviewItemContractTypeEnum.create(input.contractType);
    }
    EvmContractsReviewItem2.create = function(input) {
      if (input instanceof EvmContractsReviewItem2) {
        return input;
      }
      return new EvmContractsReviewItem2(input);
    };
    EvmContractsReviewItem2.fromJSON = function(json) {
      var input = {
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        reason: json.reason,
        reportType: EvmContractsReviewItemReportTypeEnum.fromJSON(json.report_type),
        contractType: EvmContractsReviewItemContractTypeEnum.fromJSON(json.contract_type)
      };
      return EvmContractsReviewItem2.create(input);
    };
    EvmContractsReviewItem2.prototype.toJSON = function() {
      return {
        contract_address: this.contractAddress.toJSON(),
        reason: this.reason,
        report_type: this.reportType,
        contract_type: this.contractType
      };
    };
    return EvmContractsReviewItem2;
  }()
);
var EvmContractsReviewDto = (
  /** @class */
  function() {
    function EvmContractsReviewDto2(input) {
      this.contracts = input.contracts.map(function(item) {
        return EvmContractsReviewItem.create(item);
      });
    }
    EvmContractsReviewDto2.create = function(input) {
      if (input instanceof EvmContractsReviewDto2) {
        return input;
      }
      return new EvmContractsReviewDto2(input);
    };
    EvmContractsReviewDto2.fromJSON = function(json) {
      var input = {
        contracts: json.contracts.map(function(item) {
          return EvmContractsReviewItem.fromJSON(item);
        })
      };
      return EvmContractsReviewDto2.create(input);
    };
    EvmContractsReviewDto2.prototype.toJSON = function() {
      return {
        contracts: this.contracts.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmContractsReviewDto2;
  }()
);
var EvmDefiProtocolBalance = (
  /** @class */
  function() {
    function EvmDefiProtocolBalance2(input) {
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positions = input.positions;
    }
    EvmDefiProtocolBalance2.create = function(input) {
      if (input instanceof EvmDefiProtocolBalance2) {
        return input;
      }
      return new EvmDefiProtocolBalance2(input);
    };
    EvmDefiProtocolBalance2.fromJSON = function(json) {
      var input = {
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positions: json.positions
      };
      return EvmDefiProtocolBalance2.create(input);
    };
    EvmDefiProtocolBalance2.prototype.toJSON = function() {
      return {
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        positions: this.positions
      };
    };
    return EvmDefiProtocolBalance2;
  }()
);
var EvmWalletDefiSummary = (
  /** @class */
  function() {
    function EvmWalletDefiSummary2(input) {
      this.activeProtocols = input.activeProtocols;
      this.totalPositions = input.totalPositions;
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.protocols = input.protocols.map(function(item) {
        return EvmDefiProtocolBalance.create(item);
      });
    }
    EvmWalletDefiSummary2.create = function(input) {
      if (input instanceof EvmWalletDefiSummary2) {
        return input;
      }
      return new EvmWalletDefiSummary2(input);
    };
    EvmWalletDefiSummary2.fromJSON = function(json) {
      var input = {
        activeProtocols: json.active_protocols,
        totalPositions: json.total_positions,
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        protocols: json.protocols.map(function(item) {
          return EvmDefiProtocolBalance.fromJSON(item);
        })
      };
      return EvmWalletDefiSummary2.create(input);
    };
    EvmWalletDefiSummary2.prototype.toJSON = function() {
      return {
        active_protocols: this.activeProtocols,
        total_positions: this.totalPositions,
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        protocols: this.protocols.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletDefiSummary2;
  }()
);
var EvmDefiTokenBalance = (
  /** @class */
  function() {
    function EvmDefiTokenBalance2(input) {
      this.tokenType = input.tokenType;
      this.name = input.name;
      this.symbol = input.symbol;
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.thumbnail = input.thumbnail;
      this.balance = input.balance;
      this.balanceFormatted = input.balanceFormatted;
      this.usdPrice = input.usdPrice;
      this.usdValue = input.usdValue;
    }
    EvmDefiTokenBalance2.create = function(input) {
      if (input instanceof EvmDefiTokenBalance2) {
        return input;
      }
      return new EvmDefiTokenBalance2(input);
    };
    EvmDefiTokenBalance2.fromJSON = function(json) {
      var input = {
        tokenType: json.token_type,
        name: json.name,
        symbol: json.symbol,
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        decimals: json.decimals,
        logo: json.logo,
        thumbnail: json.thumbnail,
        balance: json.balance,
        balanceFormatted: json.balance_formatted,
        usdPrice: json.usd_price,
        usdValue: json.usd_value
      };
      return EvmDefiTokenBalance2.create(input);
    };
    EvmDefiTokenBalance2.prototype.toJSON = function() {
      return {
        token_type: this.tokenType,
        name: this.name,
        symbol: this.symbol,
        contract_address: this.contractAddress.toJSON(),
        decimals: this.decimals,
        logo: this.logo,
        thumbnail: this.thumbnail,
        balance: this.balance,
        balance_formatted: this.balanceFormatted,
        usd_price: this.usdPrice,
        usd_value: this.usdValue
      };
    };
    return EvmDefiTokenBalance2;
  }()
);
var EvmDefiPositionDetails = (
  /** @class */
  function() {
    function EvmDefiPositionDetails2(input) {
      this.feeTier = input.feeTier;
      this.rangeTnd = input.rangeTnd;
      this.reserves = input.reserves;
      this.currentPrice = input.currentPrice;
      this.isInRange = input.isInRange;
      this.priceUpper = input.priceUpper;
      this.priceLower = input.priceLower;
      this.priceLabel = input.priceLabel;
      this.liquidity = input.liquidity;
      this.rangeStart = input.rangeStart;
      this.poolAddress = input.poolAddress;
      this.positionKey = input.positionKey;
      this.nftMetadata = input.nftMetadata ? EvmDefiPositionDetailsNftMetadata.create(input.nftMetadata) : void 0;
      this.assetStandard = input.assetStandard;
      this.apy = input.apy;
      this.isDebt = input.isDebt;
      this.isVariableDebt = input.isVariableDebt;
      this.isStableDebt = input.isStableDebt;
      this.shares = input.shares;
      this.reserve0 = input.reserve0;
      this.reserve1 = input.reserve1;
      this.factory = input.factory;
      this.pair = input.pair;
      this.shareOfPool = input.shareOfPool;
      this.noPriceAvailable = input.noPriceAvailable;
      this.sharesInStrategy = input.sharesInStrategy;
      this.strategyAddress = input.strategyAddress;
      this.baseType = input.baseType;
      this.healthFactor = input.healthFactor;
    }
    EvmDefiPositionDetails2.create = function(input) {
      if (input instanceof EvmDefiPositionDetails2) {
        return input;
      }
      return new EvmDefiPositionDetails2(input);
    };
    EvmDefiPositionDetails2.fromJSON = function(json) {
      var input = {
        feeTier: json.fee_tier,
        rangeTnd: json.range_tnd,
        reserves: json.reserves,
        currentPrice: json.current_price,
        isInRange: json.is_in_range,
        priceUpper: json.price_upper,
        priceLower: json.price_lower,
        priceLabel: json.price_label,
        liquidity: json.liquidity,
        rangeStart: json.range_start,
        poolAddress: json.pool_address,
        positionKey: json.position_key,
        nftMetadata: json.nft_metadata ? EvmDefiPositionDetailsNftMetadata.fromJSON(json.nft_metadata) : void 0,
        assetStandard: json.asset_standard,
        apy: json.apy,
        isDebt: json.is_debt,
        isVariableDebt: json.is_variable_debt,
        isStableDebt: json.is_stable_debt,
        shares: json.shares,
        reserve0: json.reserve0,
        reserve1: json.reserve1,
        factory: json.factory,
        pair: json.pair,
        shareOfPool: json.share_of_pool,
        noPriceAvailable: json.no_price_available,
        sharesInStrategy: json.shares_in_strategy,
        strategyAddress: json.strategy_address,
        baseType: json.base_type,
        healthFactor: json.health_factor
      };
      return EvmDefiPositionDetails2.create(input);
    };
    EvmDefiPositionDetails2.prototype.toJSON = function() {
      return {
        fee_tier: this.feeTier,
        range_tnd: this.rangeTnd,
        reserves: this.reserves,
        current_price: this.currentPrice,
        is_in_range: this.isInRange,
        price_upper: this.priceUpper,
        price_lower: this.priceLower,
        price_label: this.priceLabel,
        liquidity: this.liquidity,
        range_start: this.rangeStart,
        pool_address: this.poolAddress,
        position_key: this.positionKey,
        nft_metadata: this.nftMetadata ? this.nftMetadata : void 0,
        asset_standard: this.assetStandard,
        apy: this.apy,
        is_debt: this.isDebt,
        is_variable_debt: this.isVariableDebt,
        is_stable_debt: this.isStableDebt,
        shares: this.shares,
        reserve0: this.reserve0,
        reserve1: this.reserve1,
        factory: this.factory,
        pair: this.pair,
        share_of_pool: this.shareOfPool,
        no_price_available: this.noPriceAvailable,
        shares_in_strategy: this.sharesInStrategy,
        strategy_address: this.strategyAddress,
        base_type: this.baseType,
        health_factor: this.healthFactor
      };
    };
    return EvmDefiPositionDetails2;
  }()
);
var EvmDefiProtocolPosition = (
  /** @class */
  function() {
    function EvmDefiProtocolPosition2(input) {
      this.label = input.label;
      this.tokens = input.tokens.map(function(item) {
        return EvmDefiTokenBalance.create(item);
      });
      this.address = input.address ? EvmAddress.create(input.address) : void 0;
      this.balanceUsd = input.balanceUsd;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positionDetails = input.positionDetails ? EvmDefiPositionDetails.create(input.positionDetails) : void 0;
    }
    EvmDefiProtocolPosition2.create = function(input) {
      if (input instanceof EvmDefiProtocolPosition2) {
        return input;
      }
      return new EvmDefiProtocolPosition2(input);
    };
    EvmDefiProtocolPosition2.fromJSON = function(json) {
      var input = {
        label: json.label,
        tokens: json.tokens.map(function(item) {
          return EvmDefiTokenBalance.fromJSON(item);
        }),
        address: json.address ? EvmAddress.fromJSON(json.address) : void 0,
        balanceUsd: json.balance_usd,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positionDetails: json.position_details ? EvmDefiPositionDetails.fromJSON(json.position_details) : void 0
      };
      return EvmDefiProtocolPosition2.create(input);
    };
    EvmDefiProtocolPosition2.prototype.toJSON = function() {
      return {
        label: this.label,
        tokens: this.tokens.map(function(item) {
          return item.toJSON();
        }),
        address: this.address ? this.address.toJSON() : void 0,
        balance_usd: this.balanceUsd,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        position_details: this.positionDetails ? this.positionDetails.toJSON() : void 0
      };
    };
    return EvmDefiProtocolPosition2;
  }()
);
var EvmGetDefiPositionsByProtocol = (
  /** @class */
  function() {
    function EvmGetDefiPositionsByProtocol2(input) {
      this.protocolName = input.protocolName;
      this.protocolId = input.protocolId;
      this.protocolUrl = input.protocolUrl;
      this.protocolLogo = input.protocolLogo;
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positions = input.positions ? input.positions.map(function(item) {
        return EvmDefiProtocolPosition.create(item);
      }) : void 0;
    }
    EvmGetDefiPositionsByProtocol2.create = function(input) {
      if (input instanceof EvmGetDefiPositionsByProtocol2) {
        return input;
      }
      return new EvmGetDefiPositionsByProtocol2(input);
    };
    EvmGetDefiPositionsByProtocol2.fromJSON = function(json) {
      var input = {
        protocolName: json.protocol_name,
        protocolId: json.protocol_id,
        protocolUrl: json.protocol_url,
        protocolLogo: json.protocol_logo,
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positions: json.positions ? json.positions.map(function(item) {
          return EvmDefiProtocolPosition.fromJSON(item);
        }) : void 0
      };
      return EvmGetDefiPositionsByProtocol2.create(input);
    };
    EvmGetDefiPositionsByProtocol2.prototype.toJSON = function() {
      return {
        protocol_name: this.protocolName,
        protocol_id: this.protocolId,
        protocol_url: this.protocolUrl,
        protocol_logo: this.protocolLogo,
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        positions: this.positions ? this.positions.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmGetDefiPositionsByProtocol2;
  }()
);
var EvmDefiPositionSummaryResponse = (
  /** @class */
  function() {
    function EvmDefiPositionSummaryResponse2(input) {
      this.protocolName = input.protocolName;
      this.protocolId = input.protocolId;
      this.protocolUrl = input.protocolUrl;
      this.protocolLogo = input.protocolLogo;
      this.position = input.position ? EvmDefiProtocolPosition.create(input.position) : void 0;
    }
    EvmDefiPositionSummaryResponse2.create = function(input) {
      if (input instanceof EvmDefiPositionSummaryResponse2) {
        return input;
      }
      return new EvmDefiPositionSummaryResponse2(input);
    };
    EvmDefiPositionSummaryResponse2.fromJSON = function(json) {
      var input = {
        protocolName: json.protocol_name,
        protocolId: json.protocol_id,
        protocolUrl: json.protocol_url,
        protocolLogo: json.protocol_logo,
        position: json.position ? EvmDefiProtocolPosition.fromJSON(json.position) : void 0
      };
      return EvmDefiPositionSummaryResponse2.create(input);
    };
    EvmDefiPositionSummaryResponse2.prototype.toJSON = function() {
      return {
        protocol_name: this.protocolName,
        protocol_id: this.protocolId,
        protocol_url: this.protocolUrl,
        protocol_logo: this.protocolLogo,
        position: this.position ? this.position.toJSON() : void 0
      };
    };
    return EvmDefiPositionSummaryResponse2;
  }()
);
var EvmTransactionTimestamp = (
  /** @class */
  function() {
    function EvmTransactionTimestamp2(input) {
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockTimestamp = input.blockTimestamp;
      this.transactionHash = input.transactionHash;
    }
    EvmTransactionTimestamp2.create = function(input) {
      if (input instanceof EvmTransactionTimestamp2) {
        return input;
      }
      return new EvmTransactionTimestamp2(input);
    };
    EvmTransactionTimestamp2.fromJSON = function(json) {
      var input = {
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockTimestamp: json.block_timestamp,
        transactionHash: json.transaction_hash
      };
      return EvmTransactionTimestamp2.create(input);
    };
    EvmTransactionTimestamp2.prototype.toJSON = function() {
      return {
        block_number: this.blockNumber.toJSON(),
        block_timestamp: this.blockTimestamp,
        transaction_hash: this.transactionHash
      };
    };
    return EvmTransactionTimestamp2;
  }()
);
var EvmWalletActiveChain = (
  /** @class */
  function() {
    function EvmWalletActiveChain2(input) {
      this.chain = input.chain;
      this.chainId = input.chainId;
      this.firstTransaction = input.firstTransaction ? EvmTransactionTimestamp.create(input.firstTransaction) : void 0;
      this.lastTransaction = input.lastTransaction ? EvmTransactionTimestamp.create(input.lastTransaction) : void 0;
    }
    EvmWalletActiveChain2.create = function(input) {
      if (input instanceof EvmWalletActiveChain2) {
        return input;
      }
      return new EvmWalletActiveChain2(input);
    };
    EvmWalletActiveChain2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        chainId: json.chain_id,
        firstTransaction: json.first_transaction ? EvmTransactionTimestamp.fromJSON(json.first_transaction) : void 0,
        lastTransaction: json.last_transaction ? EvmTransactionTimestamp.fromJSON(json.last_transaction) : void 0
      };
      return EvmWalletActiveChain2.create(input);
    };
    EvmWalletActiveChain2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        chain_id: this.chainId,
        first_transaction: this.firstTransaction ? this.firstTransaction.toJSON() : void 0,
        last_transaction: this.lastTransaction ? this.lastTransaction.toJSON() : void 0
      };
    };
    return EvmWalletActiveChain2;
  }()
);
var EvmWalletActiveChains = (
  /** @class */
  function() {
    function EvmWalletActiveChains2(input) {
      this.address = EvmAddress.create(input.address);
      this.activeChains = input.activeChains.map(function(item) {
        return EvmWalletActiveChain.create(item);
      });
    }
    EvmWalletActiveChains2.create = function(input) {
      if (input instanceof EvmWalletActiveChains2) {
        return input;
      }
      return new EvmWalletActiveChains2(input);
    };
    EvmWalletActiveChains2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        activeChains: json.active_chains.map(function(item) {
          return EvmWalletActiveChain.fromJSON(item);
        })
      };
      return EvmWalletActiveChains2.create(input);
    };
    EvmWalletActiveChains2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        active_chains: this.activeChains.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletActiveChains2;
  }()
);
var EvmWalletStatTransactions = (
  /** @class */
  function() {
    function EvmWalletStatTransactions2(input) {
      this.total = input.total;
    }
    EvmWalletStatTransactions2.create = function(input) {
      if (input instanceof EvmWalletStatTransactions2) {
        return input;
      }
      return new EvmWalletStatTransactions2(input);
    };
    EvmWalletStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTransactions2.create(input);
    };
    EvmWalletStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTransactions2;
  }()
);
var EvmWalletStatNftTransfers = (
  /** @class */
  function() {
    function EvmWalletStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatNftTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatNftTransfers2) {
        return input;
      }
      return new EvmWalletStatNftTransfers2(input);
    };
    EvmWalletStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatNftTransfers2.create(input);
    };
    EvmWalletStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatNftTransfers2;
  }()
);
var EvmWalletStatTokenTransfers = (
  /** @class */
  function() {
    function EvmWalletStatTokenTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatTokenTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatTokenTransfers2) {
        return input;
      }
      return new EvmWalletStatTokenTransfers2(input);
    };
    EvmWalletStatTokenTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTokenTransfers2.create(input);
    };
    EvmWalletStatTokenTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTokenTransfers2;
  }()
);
var EvmWalletStat = (
  /** @class */
  function() {
    function EvmWalletStat2(input) {
      this.nfts = input.nfts;
      this.collections = input.collections;
      this.transactions = EvmWalletStatTransactions.create(input.transactions);
      this.nftTransfers = EvmWalletStatNftTransfers.create(input.nftTransfers);
      this.tokenTransfers = EvmWalletStatTokenTransfers.create(input.tokenTransfers);
    }
    EvmWalletStat2.create = function(input) {
      if (input instanceof EvmWalletStat2) {
        return input;
      }
      return new EvmWalletStat2(input);
    };
    EvmWalletStat2.fromJSON = function(json) {
      var input = {
        nfts: json.nfts,
        collections: json.collections,
        transactions: EvmWalletStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmWalletStatNftTransfers.fromJSON(json.nft_transfers),
        tokenTransfers: EvmWalletStatTokenTransfers.fromJSON(json.token_transfers)
      };
      return EvmWalletStat2.create(input);
    };
    EvmWalletStat2.prototype.toJSON = function() {
      return {
        nfts: this.nfts,
        collections: this.collections,
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON(),
        token_transfers: this.tokenTransfers.toJSON()
      };
    };
    return EvmWalletStat2;
  }()
);
var EvmNftCollectionStatOwners = (
  /** @class */
  function() {
    function EvmNftCollectionStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftCollectionStatOwners2.create = function(input) {
      if (input instanceof EvmNftCollectionStatOwners2) {
        return input;
      }
      return new EvmNftCollectionStatOwners2(input);
    };
    EvmNftCollectionStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftCollectionStatOwners2.create(input);
    };
    EvmNftCollectionStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftCollectionStatOwners2;
  }()
);
var EvmNftCollectionStatTransfers = (
  /** @class */
  function() {
    function EvmNftCollectionStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftCollectionStatTransfers2.create = function(input) {
      if (input instanceof EvmNftCollectionStatTransfers2) {
        return input;
      }
      return new EvmNftCollectionStatTransfers2(input);
    };
    EvmNftCollectionStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftCollectionStatTransfers2.create(input);
    };
    EvmNftCollectionStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftCollectionStatTransfers2;
  }()
);
var EvmNftCollectionStat = (
  /** @class */
  function() {
    function EvmNftCollectionStat2(input) {
      this.totalTokens = input.totalTokens;
      this.owners = EvmNftCollectionStatOwners.create(input.owners);
      this.transfers = EvmNftCollectionStatTransfers.create(input.transfers);
    }
    EvmNftCollectionStat2.create = function(input) {
      if (input instanceof EvmNftCollectionStat2) {
        return input;
      }
      return new EvmNftCollectionStat2(input);
    };
    EvmNftCollectionStat2.fromJSON = function(json) {
      var input = {
        totalTokens: json.total_tokens,
        owners: EvmNftCollectionStatOwners.fromJSON(json.owners),
        transfers: EvmNftCollectionStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftCollectionStat2.create(input);
    };
    EvmNftCollectionStat2.prototype.toJSON = function() {
      return {
        total_tokens: this.totalTokens,
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftCollectionStat2;
  }()
);
var EvmNftTokenStatOwners = (
  /** @class */
  function() {
    function EvmNftTokenStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftTokenStatOwners2.create = function(input) {
      if (input instanceof EvmNftTokenStatOwners2) {
        return input;
      }
      return new EvmNftTokenStatOwners2(input);
    };
    EvmNftTokenStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftTokenStatOwners2.create(input);
    };
    EvmNftTokenStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftTokenStatOwners2;
  }()
);
var EvmNftTokenStatTransfers = (
  /** @class */
  function() {
    function EvmNftTokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftTokenStatTransfers2.create = function(input) {
      if (input instanceof EvmNftTokenStatTransfers2) {
        return input;
      }
      return new EvmNftTokenStatTransfers2(input);
    };
    EvmNftTokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftTokenStatTransfers2.create(input);
    };
    EvmNftTokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftTokenStatTransfers2;
  }()
);
var EvmNftTokenStat = (
  /** @class */
  function() {
    function EvmNftTokenStat2(input) {
      this.owners = EvmNftTokenStatOwners.create(input.owners);
      this.transfers = EvmNftTokenStatTransfers.create(input.transfers);
    }
    EvmNftTokenStat2.create = function(input) {
      if (input instanceof EvmNftTokenStat2) {
        return input;
      }
      return new EvmNftTokenStat2(input);
    };
    EvmNftTokenStat2.fromJSON = function(json) {
      var input = {
        owners: EvmNftTokenStatOwners.fromJSON(json.owners),
        transfers: EvmNftTokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftTokenStat2.create(input);
    };
    EvmNftTokenStat2.prototype.toJSON = function() {
      return {
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftTokenStat2;
  }()
);
var EvmErc20TokenStatTransfers = (
  /** @class */
  function() {
    function EvmErc20TokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmErc20TokenStatTransfers2.create = function(input) {
      if (input instanceof EvmErc20TokenStatTransfers2) {
        return input;
      }
      return new EvmErc20TokenStatTransfers2(input);
    };
    EvmErc20TokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmErc20TokenStatTransfers2.create(input);
    };
    EvmErc20TokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmErc20TokenStatTransfers2;
  }()
);
var EvmErc20TokenStat = (
  /** @class */
  function() {
    function EvmErc20TokenStat2(input) {
      this.transfers = EvmErc20TokenStatTransfers.create(input.transfers);
    }
    EvmErc20TokenStat2.create = function(input) {
      if (input instanceof EvmErc20TokenStat2) {
        return input;
      }
      return new EvmErc20TokenStat2(input);
    };
    EvmErc20TokenStat2.fromJSON = function(json) {
      var input = {
        transfers: EvmErc20TokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmErc20TokenStat2.create(input);
    };
    EvmErc20TokenStat2.prototype.toJSON = function() {
      return {
        transfers: this.transfers.toJSON()
      };
    };
    return EvmErc20TokenStat2;
  }()
);
var EvmBlockTokenStatTransactions = (
  /** @class */
  function() {
    function EvmBlockTokenStatTransactions2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatTransactions2.create = function(input) {
      if (input instanceof EvmBlockTokenStatTransactions2) {
        return input;
      }
      return new EvmBlockTokenStatTransactions2(input);
    };
    EvmBlockTokenStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatTransactions2.create(input);
    };
    EvmBlockTokenStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatTransactions2;
  }()
);
var EvmBlockTokenStatNftTransfers = (
  /** @class */
  function() {
    function EvmBlockTokenStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatNftTransfers2.create = function(input) {
      if (input instanceof EvmBlockTokenStatNftTransfers2) {
        return input;
      }
      return new EvmBlockTokenStatNftTransfers2(input);
    };
    EvmBlockTokenStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatNftTransfers2.create(input);
    };
    EvmBlockTokenStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatNftTransfers2;
  }()
);
var EvmBlockTokenStat = (
  /** @class */
  function() {
    function EvmBlockTokenStat2(input) {
      this.transactions = EvmBlockTokenStatTransactions.create(input.transactions);
      this.nftTransfers = EvmBlockTokenStatNftTransfers.create(input.nftTransfers);
    }
    EvmBlockTokenStat2.create = function(input) {
      if (input instanceof EvmBlockTokenStat2) {
        return input;
      }
      return new EvmBlockTokenStat2(input);
    };
    EvmBlockTokenStat2.fromJSON = function(json) {
      var input = {
        transactions: EvmBlockTokenStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmBlockTokenStatNftTransfers.fromJSON(json.nft_transfers)
      };
      return EvmBlockTokenStat2.create(input);
    };
    EvmBlockTokenStat2.prototype.toJSON = function() {
      return {
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON()
      };
    };
    return EvmBlockTokenStat2;
  }()
);
var EvmGetWalletProfitabilitySummary = (
  /** @class */
  function() {
    function EvmGetWalletProfitabilitySummary2(input) {
      this.totalCountOfTrades = input.totalCountOfTrades;
      this.totalTradeVolume = input.totalTradeVolume;
      this.totalRealizedProfitUsd = input.totalRealizedProfitUsd;
      this.totalRealizedProfitPercentage = input.totalRealizedProfitPercentage;
      this.totalBuys = input.totalBuys;
      this.totalSells = input.totalSells;
      this.totalSoldVolumeUsd = input.totalSoldVolumeUsd;
      this.totalBoughtVolumeUsd = input.totalBoughtVolumeUsd;
    }
    EvmGetWalletProfitabilitySummary2.create = function(input) {
      if (input instanceof EvmGetWalletProfitabilitySummary2) {
        return input;
      }
      return new EvmGetWalletProfitabilitySummary2(input);
    };
    EvmGetWalletProfitabilitySummary2.fromJSON = function(json) {
      var input = {
        totalCountOfTrades: json.total_count_of_trades,
        totalTradeVolume: json.total_trade_volume,
        totalRealizedProfitUsd: json.total_realized_profit_usd,
        totalRealizedProfitPercentage: json.total_realized_profit_percentage,
        totalBuys: json.total_buys,
        totalSells: json.total_sells,
        totalSoldVolumeUsd: json.total_sold_volume_usd,
        totalBoughtVolumeUsd: json.total_bought_volume_usd
      };
      return EvmGetWalletProfitabilitySummary2.create(input);
    };
    EvmGetWalletProfitabilitySummary2.prototype.toJSON = function() {
      return {
        total_count_of_trades: this.totalCountOfTrades,
        total_trade_volume: this.totalTradeVolume,
        total_realized_profit_usd: this.totalRealizedProfitUsd,
        total_realized_profit_percentage: this.totalRealizedProfitPercentage,
        total_buys: this.totalBuys,
        total_sells: this.totalSells,
        total_sold_volume_usd: this.totalSoldVolumeUsd,
        total_bought_volume_usd: this.totalBoughtVolumeUsd
      };
    };
    return EvmGetWalletProfitabilitySummary2;
  }()
);
var EvmWalletProfitabilityTokenData = (
  /** @class */
  function() {
    function EvmWalletProfitabilityTokenData2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.avgBuyPriceUsd = input.avgBuyPriceUsd;
      this.avgSellPriceUsd = input.avgSellPriceUsd;
      this.totalUsdInvested = input.totalUsdInvested;
      this.totalTokensSold = input.totalTokensSold;
      this.totalTokensBought = input.totalTokensBought;
      this.totalSoldUsd = input.totalSoldUsd;
      this.avgCostOfQuantitySold = input.avgCostOfQuantitySold;
      this.countOfTrades = input.countOfTrades;
      this.realizedProfitUsd = input.realizedProfitUsd;
      this.realizedProfitPercentage = input.realizedProfitPercentage;
      this.totalBuys = input.totalBuys;
      this.totalSells = input.totalSells;
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.logoHash = input.logoHash;
      this.thumbnail = input.thumbnail;
      this.possibleSpam = input.possibleSpam;
    }
    EvmWalletProfitabilityTokenData2.create = function(input) {
      if (input instanceof EvmWalletProfitabilityTokenData2) {
        return input;
      }
      return new EvmWalletProfitabilityTokenData2(input);
    };
    EvmWalletProfitabilityTokenData2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        avgBuyPriceUsd: json.avg_buy_price_usd,
        avgSellPriceUsd: json.avg_sell_price_usd,
        totalUsdInvested: json.total_usd_invested,
        totalTokensSold: json.total_tokens_sold,
        totalTokensBought: json.total_tokens_bought,
        totalSoldUsd: json.total_sold_usd,
        avgCostOfQuantitySold: json.avg_cost_of_quantity_sold,
        countOfTrades: json.count_of_trades,
        realizedProfitUsd: json.realized_profit_usd,
        realizedProfitPercentage: json.realized_profit_percentage,
        totalBuys: json.total_buys,
        totalSells: json.total_sells,
        name: json.name,
        symbol: json.symbol,
        decimals: Number(json.decimals),
        logo: json.logo,
        logoHash: json.logo_hash,
        thumbnail: json.thumbnail,
        possibleSpam: json.possible_spam
      };
      return EvmWalletProfitabilityTokenData2.create(input);
    };
    EvmWalletProfitabilityTokenData2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        avg_buy_price_usd: this.avgBuyPriceUsd,
        avg_sell_price_usd: this.avgSellPriceUsd,
        total_usd_invested: this.totalUsdInvested,
        total_tokens_sold: this.totalTokensSold,
        total_tokens_bought: this.totalTokensBought,
        total_sold_usd: this.totalSoldUsd,
        avg_cost_of_quantity_sold: this.avgCostOfQuantitySold,
        count_of_trades: this.countOfTrades,
        realized_profit_usd: this.realizedProfitUsd,
        realized_profit_percentage: this.realizedProfitPercentage,
        total_buys: this.totalBuys,
        total_sells: this.totalSells,
        name: this.name,
        symbol: this.symbol,
        decimals: String(this.decimals),
        logo: this.logo,
        logo_hash: this.logoHash,
        thumbnail: this.thumbnail,
        possible_spam: this.possibleSpam
      };
    };
    return EvmWalletProfitabilityTokenData2;
  }()
);
var EvmWalletProfitabilityResponse = (
  /** @class */
  function() {
    function EvmWalletProfitabilityResponse2(input) {
      this.result = input.result ? input.result.map(function(item) {
        return EvmWalletProfitabilityTokenData.create(item);
      }) : void 0;
    }
    EvmWalletProfitabilityResponse2.create = function(input) {
      if (input instanceof EvmWalletProfitabilityResponse2) {
        return input;
      }
      return new EvmWalletProfitabilityResponse2(input);
    };
    EvmWalletProfitabilityResponse2.fromJSON = function(json) {
      var input = {
        result: json.result ? json.result.map(function(item) {
          return EvmWalletProfitabilityTokenData.fromJSON(item);
        }) : void 0
      };
      return EvmWalletProfitabilityResponse2.create(input);
    };
    EvmWalletProfitabilityResponse2.prototype.toJSON = function() {
      return {
        result: this.result ? this.result.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmWalletProfitabilityResponse2;
  }()
);
var EvmTopProfitableWalletPerTokenResponse = (
  /** @class */
  function() {
    function EvmTopProfitableWalletPerTokenResponse2(input) {
      this.avgBuyPriceUsd = input.avgBuyPriceUsd;
      this.avgCostOfQuantitySold = input.avgCostOfQuantitySold;
      this.avgSellPriceUsd = input.avgSellPriceUsd;
      this.countOfTrades = input.countOfTrades;
      this.realizedProfitPercentage = input.realizedProfitPercentage;
      this.realizedProfitUsd = input.realizedProfitUsd;
      this.totalSoldUsd = input.totalSoldUsd;
      this.totalTokensBought = input.totalTokensBought;
      this.totalTokensSold = input.totalTokensSold;
      this.totalUsdInvested = input.totalUsdInvested;
      this.address = EvmAddress.create(input.address);
    }
    EvmTopProfitableWalletPerTokenResponse2.create = function(input) {
      if (input instanceof EvmTopProfitableWalletPerTokenResponse2) {
        return input;
      }
      return new EvmTopProfitableWalletPerTokenResponse2(input);
    };
    EvmTopProfitableWalletPerTokenResponse2.fromJSON = function(json) {
      var input = {
        avgBuyPriceUsd: json.avg_buy_price_usd,
        avgCostOfQuantitySold: json.avg_cost_of_quantity_sold,
        avgSellPriceUsd: json.avg_sell_price_usd,
        countOfTrades: json.count_of_trades,
        realizedProfitPercentage: json.realized_profit_percentage,
        realizedProfitUsd: json.realized_profit_usd,
        totalSoldUsd: json.total_sold_usd,
        totalTokensBought: json.total_tokens_bought,
        totalTokensSold: json.total_tokens_sold,
        totalUsdInvested: json.total_usd_invested,
        address: EvmAddress.fromJSON(json.address)
      };
      return EvmTopProfitableWalletPerTokenResponse2.create(input);
    };
    EvmTopProfitableWalletPerTokenResponse2.prototype.toJSON = function() {
      return {
        avg_buy_price_usd: this.avgBuyPriceUsd,
        avg_cost_of_quantity_sold: this.avgCostOfQuantitySold,
        avg_sell_price_usd: this.avgSellPriceUsd,
        count_of_trades: this.countOfTrades,
        realized_profit_percentage: this.realizedProfitPercentage,
        realized_profit_usd: this.realizedProfitUsd,
        total_sold_usd: this.totalSoldUsd,
        total_tokens_bought: this.totalTokensBought,
        total_tokens_sold: this.totalTokensSold,
        total_usd_invested: this.totalUsdInvested,
        address: this.address.toJSON()
      };
    };
    return EvmTopProfitableWalletPerTokenResponse2;
  }()
);
var EvmWalletTopProfitableWalletPerTokenResponse = (
  /** @class */
  function() {
    function EvmWalletTopProfitableWalletPerTokenResponse2(input) {
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.possibleSpam = input.possibleSpam;
      this.result = input.result.map(function(item) {
        return EvmTopProfitableWalletPerTokenResponse.create(item);
      });
    }
    EvmWalletTopProfitableWalletPerTokenResponse2.create = function(input) {
      if (input instanceof EvmWalletTopProfitableWalletPerTokenResponse2) {
        return input;
      }
      return new EvmWalletTopProfitableWalletPerTokenResponse2(input);
    };
    EvmWalletTopProfitableWalletPerTokenResponse2.fromJSON = function(json) {
      var input = {
        name: json.name,
        symbol: json.symbol,
        decimals: json.decimals,
        logo: json.logo,
        possibleSpam: json.possible_spam,
        result: json.result.map(function(item) {
          return EvmTopProfitableWalletPerTokenResponse.fromJSON(item);
        })
      };
      return EvmWalletTopProfitableWalletPerTokenResponse2.create(input);
    };
    EvmWalletTopProfitableWalletPerTokenResponse2.prototype.toJSON = function() {
      return {
        name: this.name,
        symbol: this.symbol,
        decimals: this.decimals,
        logo: this.logo,
        possible_spam: this.possibleSpam,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletTopProfitableWalletPerTokenResponse2;
  }()
);
var GetNFTTradesOperation = {
  operationId: "getNFTTrades",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/trades",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "marketplace", "cursor", "limit", "nft_metadata", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmTradeCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var marketplace = request.marketplace ? EvmGetNFTTradesMarketplaceEnum.create(request.marketplace) : void 0;
    var cursor = request.cursor;
    var limit = request.limit;
    var nftMetadata = request.nftMetadata;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      marketplace: marketplace ? marketplace : void 0,
      cursor,
      limit,
      nft_metadata: nftMetadata,
      address: address.toJSON()
    };
  }
};
var GetNFTTradesByTokenOperation = {
  operationId: "getNFTTradesByToken",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/trades",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "cursor", "limit", "nft_metadata", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmTradeCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var cursor = request.cursor;
    var limit = request.limit;
    var nftMetadata = request.nftMetadata;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      cursor,
      limit,
      nft_metadata: nftMetadata,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetNFTContractSalePricesOperation = {
  operationId: "getNFTContractSalePrices",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/price",
  parameterNames: ["chain", "days", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmSoldPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var days = request.days;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      days,
      address: address.toJSON()
    };
  }
};
var GetNFTSalePricesOperation = {
  operationId: "getNFTSalePrices",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/price",
  parameterNames: ["chain", "days", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmSoldPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var days = request.days;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      days,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetMultipleTokenPricesOperation = {
  operationId: "getMultipleTokenPrices",
  groupName: "token",
  httpMethod: "post",
  routePattern: "/erc20/prices",
  parameterNames: ["chain", "include", "max_token_inactivity"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmErc20Price.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var include = request.include ? EvmGetMultipleTokenPricesIncludeEnum.create(request.include) : void 0;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chain: chain ? chain.toJSON() : void 0,
      include: include ? include : void 0,
      max_token_inactivity: maxTokenInactivity
    };
  },
  serializeBody: function(body) {
    var value = EvmGetMultipleTokenPricesDto.create(body);
    return value.toJSON();
  }
};
var GetTokenOwnersOperation = {
  operationId: "getTokenOwners",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{token_address}/owners",
  parameterNames: ["chain", "token_address", "limit", "cursor", "order"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenOwnerCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var tokenAddress = request.tokenAddress;
    var limit = request.limit;
    var cursor = request.cursor;
    var order = request.order ? EvmOrderList.create(request.order) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0,
      token_address: tokenAddress,
      limit,
      cursor,
      order: order ? order : void 0
    };
  }
};
var GetWalletHistoryOperation = {
  operationId: "getWalletHistory",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/history",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "address", "include_internal_transactions", "nft_metadata", "cursor", "order", "limit"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletHistory.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var address = EvmAddress.create(request.address);
    var includeInternalTransactions = request.includeInternalTransactions;
    var nftMetadata = request.nftMetadata;
    var cursor = request.cursor;
    var order = request.order ? EvmOrderList.create(request.order) : void 0;
    var limit = request.limit;
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      address: address.toJSON(),
      include_internal_transactions: includeInternalTransactions,
      nft_metadata: nftMetadata,
      cursor,
      order: order ? order : void 0,
      limit
    };
  }
};
var GetWalletTokenBalancesPriceOperation = {
  operationId: "getWalletTokenBalancesPrice",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/tokens",
  parameterNames: ["chain", "address", "to_block", "token_addresses", "exclude_spam", "exclude_unverified_contracts", "cursor", "limit", "exclude_native", "max_token_inactivity"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenBalanceWithPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var toBlock = request.toBlock;
    var tokenAddresses = request.tokenAddresses ? request.tokenAddresses.map(function(item) {
      return EvmAddress.create(item);
    }) : void 0;
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    var cursor = request.cursor;
    var limit = request.limit;
    var excludeNative = request.excludeNative;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      to_block: toBlock,
      token_addresses: tokenAddresses ? tokenAddresses.map(function(item) {
        return item.toJSON();
      }) : void 0,
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts,
      cursor,
      limit,
      exclude_native: excludeNative,
      max_token_inactivity: maxTokenInactivity
    };
  }
};
var GetWalletNetWorthOperation = {
  operationId: "getWalletNetWorth",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/net-worth",
  parameterNames: ["chains", "address", "exclude_spam", "exclude_unverified_contracts", "max_token_inactivity"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNetWorthResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    var address = EvmAddress.create(request.address);
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0,
      address: address.toJSON(),
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts,
      max_token_inactivity: maxTokenInactivity
    };
  }
};
var Web3ApiVersionOperation = {
  operationId: "web3ApiVersion",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/web3/version",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWeb3version.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var EndpointWeightsOperation = {
  operationId: "endpointWeights",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/info/endpointWeights",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmEndpointWeights.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ResolveAddressToDomainOperation = {
  operationId: "resolveAddressToDomain",
  groupName: "resolve",
  httpMethod: "get",
  routePattern: "/resolve/{address}/domain",
  parameterNames: ["currency", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmUnstoppableDomain.fromJSON(json);
  },
  serializeRequest: function(request) {
    var currency = request.currency ? EvmResolveAddressToDomainCurrencyEnum.create(request.currency) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      currency: currency ? currency : void 0,
      address: address.toJSON()
    };
  }
};
var GetPairPriceOperation = {
  operationId: "getPairPrice",
  groupName: "defi",
  httpMethod: "get",
  routePattern: "/{token0_address}/{token1_address}/price",
  parameterNames: ["chain", "to_block", "to_date", "token0_address", "token1_address", "exchange"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetPairPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var toBlock = request.toBlock;
    var toDate = request.toDate;
    var token0Address = EvmAddress.create(request.token0Address);
    var token1Address = EvmAddress.create(request.token1Address);
    var exchange = request.exchange;
    return {
      chain: chain ? chain.toJSON() : void 0,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      token0_address: token0Address.toJSON(),
      token1_address: token1Address.toJSON(),
      exchange
    };
  }
};
var GetTopERC20TokensByMarketCapOperation = {
  operationId: "getTopERC20TokensByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-tokens",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataERC20TokenItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopERC20TokensByPriceMoversOperation = {
  operationId: "getTopERC20TokensByPriceMovers",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-movers",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmMarketDataERC20TokensByPriceMovers.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopNFTCollectionsByMarketCapOperation = {
  operationId: "getTopNFTCollectionsByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/top-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopNFTCollectionByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetHottestNFTCollectionsByTradingVolumeOperation = {
  operationId: "getHottestNFTCollectionsByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/hottest-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByMarketCapOperation = {
  operationId: "getTopCryptoCurrenciesByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/market-cap",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByTradingVolumeOperation = {
  operationId: "getTopCryptoCurrenciesByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/volume",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ReviewContractsOperation = {
  operationId: "reviewContracts",
  groupName: "utils",
  httpMethod: "post",
  routePattern: "/contracts-review",
  parameterNames: ["chain"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return EvmReviewContracts.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = EvmContractsReviewDto.create(body);
    return value.toJSON();
  }
};
var GetDefiSummaryOperation = {
  operationId: "getDefiSummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/summary",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletDefiSummary.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetDefiPositionsByProtocolOperation = {
  operationId: "getDefiPositionsByProtocol",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/{protocol}/positions",
  parameterNames: ["chain", "address", "protocol"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetDefiPositionsByProtocol.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var protocol = EvmDefiProtocolList.create(request.protocol);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      protocol
    };
  }
};
var GetDefiPositionsSummaryOperation = {
  operationId: "getDefiPositionsSummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/positions",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmDefiPositionSummaryResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetWalletActiveChainsOperation = {
  operationId: "getWalletActiveChains",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/chains",
  parameterNames: ["address", "chains"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletActiveChains.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    return {
      address: address.toJSON(),
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0
    };
  }
};
var GetWalletStatsOperation = {
  operationId: "getWalletStats",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTCollectionStatsOperation = {
  operationId: "getNFTCollectionStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftCollectionStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTTokenStatsOperation = {
  operationId: "getNFTTokenStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/stats",
  parameterNames: ["chain", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetTokenStatsOperation = {
  operationId: "getTokenStats",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetBlockStatsOperation = {
  operationId: "getBlockStats",
  groupName: "block",
  httpMethod: "get",
  routePattern: "/block/{block_number_or_hash}/stats",
  parameterNames: ["chain", "block_number_or_hash"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmBlockTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var blockNumberOrHash = request.blockNumberOrHash;
    return {
      chain: chain ? chain.toJSON() : void 0,
      block_number_or_hash: blockNumberOrHash
    };
  }
};
var GetWalletProfitabilitySummaryOperation = {
  operationId: "getWalletProfitabilitySummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/profitability/summary",
  parameterNames: ["address", "days", "chain"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetWalletProfitabilitySummary.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0
    };
  }
};
var GetWalletProfitabilityOperation = {
  operationId: "getWalletProfitability",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/profitability",
  parameterNames: ["address", "days", "chain", "token_addresses"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletProfitabilityResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var tokenAddresses = request.tokenAddresses ? request.tokenAddresses.map(function(item) {
      return EvmAddress.create(item);
    }) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0,
      token_addresses: tokenAddresses ? tokenAddresses.map(function(item) {
        return item.toJSON();
      }) : void 0
    };
  }
};
var GetTopProfitableWalletPerTokenOperation = {
  operationId: "getTopProfitableWalletPerToken",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{address}/top-gainers",
  parameterNames: ["address", "days", "chain"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletTopProfitableWalletPerTokenResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0
    };
  }
};
var CommonEvmUtilsConfig = {
  defaultEvmApiChain: {
    name: "defaultEvmApiChain",
    defaultValue: "0x1"
  }
};
var CommonEvmUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonEvmUtilsConfigSetup2() {
    }
    CommonEvmUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonEvmUtilsConfig.defaultEvmApiChain);
    };
    return CommonEvmUtilsConfigSetup2;
  }()
);
var CommonEvmUtils = (
  /** @class */
  function(_super) {
    __extends4(CommonEvmUtils2, _super);
    function CommonEvmUtils2(core2) {
      return _super.call(this, CommonEvmUtils2.moduleName, core2) || this;
    }
    CommonEvmUtils2.create = function(core2) {
      return new CommonEvmUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonEvmUtils2.prototype.setup = function() {
      CommonEvmUtilsConfigSetup.register(this.core.config);
    };
    CommonEvmUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmAddress", {
      get: function() {
        return EvmAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmChain", {
      get: function() {
        return EvmChain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmNative", {
      get: function() {
        return EvmNative;
      },
      enumerable: false,
      configurable: true
    });
    CommonEvmUtils2.moduleName = "evmUtils";
    return CommonEvmUtils2;
  }(Module)
);
var EvmChainResolver = (
  /** @class */
  function() {
    function EvmChainResolver2() {
    }
    EvmChainResolver2.resolve = function(chain, core2) {
      if (chain) {
        return EvmChain.create(chain);
      }
      var defaultEvmChain = core2.config.get(CommonEvmUtilsConfig.defaultEvmApiChain);
      return EvmChain.create(defaultEvmChain);
    };
    return EvmChainResolver2;
  }()
);
var getNativeBalanceOperation = {
  method: "GET",
  name: "getNativeBalance",
  id: "getNativeBalance",
  groupName: "balance",
  urlPathPattern: "/{address}/balance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock"],
  getRequestUrlParams: getRequestUrlParams$H,
  serializeRequest: serializeRequest$H,
  deserializeRequest: deserializeRequest$H,
  deserializeResponse: deserializeResponse$H
};
function getRequestUrlParams$H(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$H(jsonResponse) {
  return {
    balance: EvmNative.create(jsonResponse.balance, "wei")
  };
}
function serializeRequest$H(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$H(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNativeBalancesForAddressesOperation = {
  method: "GET",
  name: "getNativeBalancesForAddresses",
  id: "getNativeBalancesForAddresses",
  groupName: "balance",
  urlPathPattern: "/wallets/balances",
  urlSearchParamNames: ["chain", "toBlock", "walletAddresses"],
  getRequestUrlParams: getRequestUrlParams$G,
  serializeRequest: serializeRequest$G,
  deserializeRequest: deserializeRequest$G,
  deserializeResponse: deserializeResponse$G
};
function getRequestUrlParams$G(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    wallet_addresses: (_a2 = request.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$G(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(chainBalances) {
    return {
      chain: EvmChainResolver.resolve(request.chain, core2),
      blockNumber: chainBalances.block_number,
      blockTimestamp: chainBalances.block_timestamp,
      totalBalance: EvmNative.create(chainBalances.total_balance, "wei"),
      walletBalances: chainBalances.wallet_balances.map(function(walletBalance) {
        return {
          address: EvmAddress.create(walletBalance.address),
          balance: EvmNative.create(walletBalance.balance, "wei")
        };
      })
    };
  });
}
function serializeRequest$G(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    walletAddresses: (_a2 = request.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$G(jsonRequest, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(jsonRequest.chain, core2),
    toBlock: jsonRequest.toBlock,
    walletAddresses: (_a2 = jsonRequest.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getBlockOperation = {
  method: "GET",
  name: "getBlock",
  id: "getBlock",
  groupName: "block",
  isNullable: true,
  urlPathPattern: "/block/{blockNumberOrHash}",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$F,
  serializeRequest: serializeRequest$F,
  deserializeRequest: deserializeRequest$F,
  deserializeResponse: deserializeResponse$F
};
function getRequestUrlParams$F(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeResponse$F(jsonResponse, request, core2) {
  var _a2;
  var data = toCamelCase(jsonResponse);
  var chain = EvmChainResolver.resolve(request.chain, core2);
  return EvmBlock.create(__assign3(__assign3({}, data), { chain, transactions: ((_a2 = data.transactions) !== null && _a2 !== void 0 ? _a2 : []).map(function(transaction) {
    var _a3, _b;
    return EvmTransaction.create({
      cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
      gasPrice: transaction.gasPrice,
      gasUsed: transaction.receiptGasUsed,
      index: transaction.transactionIndex,
      contractAddress: transaction.receiptContractAddress,
      receiptRoot: transaction.receiptRoot,
      receiptStatus: +transaction.receiptStatus,
      chain,
      data: transaction.input,
      from: transaction.fromAddress,
      hash: transaction.hash,
      nonce: transaction.nonce,
      value: transaction.value,
      blockHash: transaction.blockHash,
      blockNumber: +transaction.blockNumber,
      blockTimestamp: new Date(transaction.blockTimestamp),
      gas: transaction.gas,
      to: transaction.toAddress,
      logs: ((_a3 = transaction.logs) !== null && _a3 !== void 0 ? _a3 : []).map(function(jsonLog) {
        var log = toCamelCase(jsonLog);
        return EvmTransactionLog.create({
          chain,
          address: log.address,
          blockHash: log.blockHash,
          blockNumber: +log.blockNumber,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          transactionHash: log.transactionHash,
          blockTimestamp: log.blockTimestamp,
          logIndex: +log.logIndex,
          transactionIndex: +log.transactionIndex
        });
      }),
      internalTransactions: ((_b = transaction.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase(jsonInternalTransaction);
        return EvmInternalTransaction.create(internalTransaction);
      })
    });
  }) }));
}
function serializeRequest$F(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeRequest$F(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    include: jsonRequest.include
  };
}
var getDateToBlockOperation = {
  method: "GET",
  name: "getDateToBlock",
  id: "getDateToBlock",
  groupName: "block",
  urlPathPattern: "/dateToBlock",
  urlSearchParamNames: ["chain", "date"],
  getRequestUrlParams: getRequestUrlParams$E,
  serializeRequest: serializeRequest$E,
  deserializeRequest: deserializeRequest$E,
  deserializeResponse: deserializeResponse$E
};
function getRequestUrlParams$E(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeResponse$E(jsonResponse) {
  return EvmBlockDate.create(jsonResponse);
}
function serializeRequest$E(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeRequest$E(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    date: new Date(jsonRequest.date)
  };
}
var getPairAddressOperation = {
  method: "GET",
  name: "getPairAddress",
  id: "getPairAddress",
  groupName: "defi",
  urlPathPattern: "/{token0Address}/{token1Address}/pairAddress",
  urlPathParamNames: ["token0Address", "token1Address"],
  urlSearchParamNames: ["chain", "toBlock", "toDate", "exchange"],
  getRequestUrlParams: getRequestUrlParams$D,
  serializeRequest: serializeRequest$D,
  deserializeRequest: deserializeRequest$D,
  deserializeResponse: deserializeResponse$D
};
function getRequestUrlParams$D(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function createErc20Token(token, core2, chain) {
  var _a2, _b, _c;
  return Erc20Token.create({
    contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? EvmAddress.create(token === null || token === void 0 ? void 0 : token.address) : "",
    decimals: (_a2 = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a2 !== void 0 ? _a2 : 0,
    name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : "",
    symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : "",
    logo: token === null || token === void 0 ? void 0 : token.logo,
    thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,
    chain: EvmChainResolver.resolve(chain, core2)
  });
}
function deserializeResponse$D(jsonResponse, request, core2) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  return {
    //   ApiResult types generated all come as undefined which should not be the case TODO:
    token0: {
      token: createErc20Token(jsonResponse.token0, core2, request.chain),
      blockNumber: (_a2 = jsonResponse.token0) === null || _a2 === void 0 ? void 0 : _a2.block_number,
      validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,
      createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : void 0
    },
    token1: {
      token: createErc20Token(jsonResponse.token1, core2, request.chain),
      blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,
      validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,
      createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : void 0
    },
    pairAddress: jsonResponse.pairAddress ? EvmAddress.create(jsonResponse.pairAddress) : void 0
  };
}
function serializeRequest$D(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function deserializeRequest$D(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    exchange: jsonRequest.exchange,
    token0Address: EvmAddress.create(jsonRequest.token0Address),
    token1Address: EvmAddress.create(jsonRequest.token1Address)
  };
}
var getPairReservesOperation = {
  method: "GET",
  name: "getPairReserves",
  id: "getPairReserves",
  groupName: "defi",
  urlPathPattern: "/{pairAddress}/reserves",
  urlPathParamNames: ["pairAddress"],
  urlSearchParamNames: ["chain", "toBlock", "toDate"],
  getRequestUrlParams: getRequestUrlParams$C,
  serializeRequest: serializeRequest$C,
  deserializeRequest: deserializeRequest$C,
  deserializeResponse: deserializeResponse$C
};
function getRequestUrlParams$C(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0
  };
}
function serializeRequest$C(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase
  };
}
function deserializeRequest$C(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    pairAddress: EvmAddress.create(jsonRequest.pairAddress)
  };
}
function deserializeResponse$C(jsonResponse) {
  return jsonResponse;
}
var getContractEventsOperation = {
  method: "POST",
  name: "getContractEvents",
  id: "getContractEvents",
  groupName: "events",
  urlPathPattern: "/{address}/events",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic",
    "offset",
    "limit",
    "cursor",
    "order"
  ],
  bodyParamNames: ["abi"],
  bodyType: "raw",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$B,
  getRequestBody: getRequestBody$3,
  serializeRequest: serializeRequest$B,
  deserializeRequest: deserializeRequest$B,
  deserializeResponse: deserializeResponse$B
};
function getRequestUrlParams$B(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: maybe(request.offset, String),
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function getRequestBody$3(request) {
  return request.abi;
}
function deserializeResponse$B(jsonResponse, request, core2) {
  var _a2, _b;
  return (_b = (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []) === null || _b === void 0 ? void 0 : _b.map(function(event) {
    return EvmEvent.create({
      chain: EvmChainResolver.resolve(request.chain, core2),
      address: request.address,
      blockHash: event.block_hash,
      blockNumber: event.block_number,
      blockTimestamp: event.block_timestamp,
      transactionHash: event.transaction_hash,
      data: {
        to: event.data.to,
        from: event.data.from,
        value: maybe(event.data.value, function(value) {
          return EvmNative.create(value, "wei");
        })
      }
    });
  });
}
function serializeRequest$B(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: request.offset,
    limit: request.limit,
    address: EvmAddress.create(request.address).lowercase,
    abi: request.abi,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$B(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic: jsonRequest.topic,
    offset: jsonRequest.offset,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    abi: jsonRequest.abi,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getContractLogsOperation = {
  method: "GET",
  name: "getContractLogs",
  id: "getContractLogs",
  groupName: "events",
  urlPathPattern: "/{address}/logs",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "blockNumber",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic0",
    "limit",
    "cursor",
    "order"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$A,
  serializeRequest: serializeRequest$A,
  deserializeRequest: deserializeRequest$A,
  deserializeResponse: deserializeResponse$A
};
function getRequestUrlParams$A(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    block_number: request.blockNumber,
    from_block: request.fromBlock,
    to_block: request.toBlock,
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function serializeRequest$A(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumber: request.blockNumber,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function deserializeRequest$A(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumber: jsonRequest.blockNumber,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic0: jsonRequest.topic0,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    order: jsonRequest.order
  };
}
function deserializeResponse$A(jsonResponse, request, core2) {
  var _a2, _b;
  return (_b = (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []) === null || _b === void 0 ? void 0 : _b.map(function(log) {
    return EvmTransactionLog.create(__assign3(__assign3({}, toCamelCase(log)), { topics: [log.topic0, log.topic1, log.topic2, log.topic3], blockNumber: Number(log.block_number), chain: EvmChainResolver.resolve(request.chain, core2) }));
  });
}
var uploadFolderOperation = {
  method: "POST",
  name: "uploadFolder",
  id: "uploadFolder",
  groupName: "ipfs",
  urlPathPattern: "/ipfs/uploadFolder",
  bodyType: "raw",
  bodyParamNames: ["abi"],
  getRequestUrlParams: getRequestUrlParams$z,
  serializeRequest: serializeRequest$z,
  deserializeRequest: deserializeRequest$z,
  deserializeResponse: deserializeResponse$z,
  getRequestBody: getRequestBody$2
};
function getRequestUrlParams$z(_) {
  return {};
}
function getRequestBody$2(request) {
  return request.abi;
}
function deserializeResponse$z(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$z(request) {
  return {
    abi: JSON.stringify(request.abi)
  };
}
function deserializeRequest$z(jsonRequest) {
  return {
    abi: JSON.parse(jsonRequest.abi)
  };
}
var getContractNFTsOperation = {
  method: "GET",
  name: "getContractNFTs",
  id: "getContractNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "totalRanges",
    "range",
    "cursor",
    "normalizeMetadata",
    "mediaItems"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$y,
  serializeRequest: serializeRequest$y,
  deserializeRequest: deserializeRequest$y,
  deserializeResponse: deserializeResponse$y
};
function getRequestUrlParams$y(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    totalRanges: maybe(request.totalRanges, String),
    range: maybe(request.range, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$y(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase(nft)), { chain, ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$y(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    totalRanges: request.totalRanges,
    range: request.range,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$y(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    totalRanges: jsonRequest.totalRanges,
    range: jsonRequest.range,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getMultipleNFTsOperation = {
  method: "POST",
  name: "getMultipleNFTs",
  id: "getMultipleNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/getMultipleNFTs",
  urlSearchParamNames: ["chain"],
  bodyType: "properties",
  bodyParamNames: ["tokens", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$x,
  getRequestBody: getRequestBody$1,
  serializeRequest: serializeRequest$x,
  deserializeRequest: deserializeRequest$x,
  deserializeResponse: deserializeResponse$x
};
function getRequestUrlParams$x(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex
  };
}
function getRequestBody$1(request) {
  return {
    tokens: request.tokens.map(function(token) {
      return {
        token_address: EvmAddress.create(token.tokenAddress).lowercase,
        token_id: token.tokenId
      };
    }),
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$x(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(data) {
    if (data === null) {
      return null;
    }
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core2), amount: nft.amount ? parseInt(nft.amount, 10) : void 0, ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: dateInputToDate(nft.lastMetadataSync), lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$x(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    normalizeMetadata: request.normalizeMetadata,
    tokens: request.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress).lowercase,
        tokenId: token.tokenId
      };
    }),
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$x(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    tokens: jsonRequest.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress),
        tokenId: token.tokenId
      };
    }),
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTContractMetadataOperation = {
  method: "GET",
  name: "getNFTContractMetadata",
  id: "getNFTContractMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/metadata",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$w,
  serializeRequest: serializeRequest$w,
  deserializeRequest: deserializeRequest$w,
  deserializeResponse: deserializeResponse$w
};
function getRequestUrlParams$w(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$w(jsonResponse, request, core2) {
  return EvmNftMetadata.create(__assign3(__assign3({}, toCamelCase(jsonResponse)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(jsonResponse.token_address), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: maybe(jsonResponse.contract_type) }));
}
function serializeRequest$w(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$w(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTContractTransfersOperation = {
  method: "GET",
  name: "getNFTContractTransfers",
  id: "getNFTContractTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "fromBlock", "fromDate", "toBlock", "toDate", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$v,
  serializeRequest: serializeRequest$v,
  deserializeRequest: deserializeRequest$v,
  deserializeResponse: deserializeResponse$v
};
function getRequestUrlParams$v(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    from_block: maybe(request.fromBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_block: maybe(request.toBlock, String),
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$v(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$v(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    order: request.order
  };
}
function deserializeRequest$v(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    order: jsonRequest.order
  };
}
var getNFTLowestPriceOperation = {
  method: "GET",
  name: "getNFTLowestPrice",
  id: "getNFTLowestPrice",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/lowestprice",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "days", "marketplace"],
  getRequestUrlParams: getRequestUrlParams$u,
  serializeRequest: serializeRequest$u,
  deserializeRequest: deserializeRequest$u,
  deserializeResponse: deserializeResponse$u
};
function getRequestUrlParams$u(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    days: maybe(request.days, String),
    marketplace: request.marketplace
  };
}
function deserializeResponse$u(jsonResponse) {
  return EvmTrade.fromJSON(jsonResponse);
}
function serializeRequest$u(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    days: request.days,
    marketplace: request.marketplace,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$u(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    days: jsonRequest.days,
    marketplace: jsonRequest.marketplace,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/{tokenId}",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$t,
  serializeRequest: serializeRequest$t,
  deserializeRequest: deserializeRequest$t,
  deserializeResponse: deserializeResponse$t
};
function getRequestUrlParams$t(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    tokenId: request.tokenId,
    format: request.format,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$t(jsonResponse, request, core2) {
  var chain = EvmChainResolver.resolve(request.chain, core2);
  var nft = toCamelCase(jsonResponse);
  return EvmNft.create(__assign3(__assign3({}, nft), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
    return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
  }) }));
}
function serializeRequest$t(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$t(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTOwnersOperation = {
  method: "GET",
  name: "getNFTOwners",
  id: "getNFTOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/owners",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$s,
  serializeRequest: serializeRequest$s,
  deserializeRequest: deserializeRequest$s,
  deserializeResponse: deserializeResponse$s
};
function getRequestUrlParams$s(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$s(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign3(__assign3({}, nft), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$s(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$s(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTokenIdOwnersOperation = {
  method: "GET",
  name: "getNFTTokenIdOwners",
  id: "getNFTTokenIdOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/owners",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$r,
  serializeRequest: serializeRequest$r,
  deserializeRequest: deserializeRequest$r,
  deserializeResponse: deserializeResponse$r
};
function getRequestUrlParams$r(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$r(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase(nft)), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
    }) }));
  });
}
function serializeRequest$r(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$r(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTradesOperation = {
  method: "GET",
  name: "getNFTTrades",
  id: "getNFTTrades",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/trades",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "marketplace", "cursor", "limit"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$q,
  serializeRequest: serializeRequest$q,
  deserializeRequest: deserializeRequest$q,
  deserializeResponse: deserializeResponse$q
};
function getRequestUrlParams$q(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: maybe(request.limit, String)
  };
}
function deserializeResponse$q(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(trade) {
    return EvmTrade.fromJSON(trade);
  });
}
function serializeRequest$q(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$q(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    marketplace: jsonRequest.marketplace,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTTransfersByBlockOperation = {
  method: "GET",
  name: "getNFTTransfersByBlock",
  id: "getNFTTransfersByBlock",
  groupName: "nft",
  urlPathPattern: "/block/{blockNumberOrHash}/nft/transfers",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$p,
  serializeRequest: serializeRequest$p,
  deserializeRequest: deserializeRequest$p,
  deserializeResponse: deserializeResponse$p
};
function getRequestUrlParams$p(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeResponse$p(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$p(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeRequest$p(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    order: jsonRequest.order
  };
}
var getNFTTransfersFromToBlockOperation = {
  method: "GET",
  name: "getNFTTransfersFromToBlock",
  id: "getNFTTransfersFromToBlock",
  groupName: "nft",
  urlPathPattern: "/nft/transfers",
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$o,
  serializeRequest: serializeRequest$o,
  deserializeRequest: deserializeRequest$o,
  deserializeResponse: deserializeResponse$o
};
function getRequestUrlParams$o(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$o(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$o(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$o(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getNFTTransfersOperation = {
  method: "GET",
  name: "getNFTTransfers",
  id: "getNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/transfers",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n,
  serializeRequest: serializeRequest$n,
  deserializeRequest: deserializeRequest$n,
  deserializeResponse: deserializeResponse$n
};
function getRequestUrlParams$n(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeResponse$n(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$n(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeRequest$n(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    order: jsonRequest.order
  };
}
var getWalletNFTCollectionsOperation = {
  method: "GET",
  name: "getWalletNFTCollections",
  id: "getWalletNFTCollections",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/collections",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "limit", "cursor", "excludeSpam", "tokenCounts"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$m,
  serializeRequest: serializeRequest$m,
  deserializeRequest: deserializeRequest$m,
  deserializeResponse: deserializeResponse$m
};
function getRequestUrlParams$m(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    exclude_spam: request.excludeSpam,
    token_counts: request.tokenCounts
  };
}
function deserializeResponse$m(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(collection) {
    return EvmNftCollection.create(__assign3(__assign3({}, toCamelCase(collection)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(collection.token_address) }));
  });
}
function serializeRequest$m(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    excludeSpam: request.excludeSpam,
    tokenCounts: request.tokenCounts
  };
}
function deserializeRequest$m(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    excludeSpam: jsonRequest.excludeSpam,
    tokenCounts: jsonRequest.tokenCounts
  };
}
var getWalletNFTsOperation = {
  method: "GET",
  name: "getWalletNFTs",
  id: "getWalletNFTs",
  groupName: "nft",
  firstPageIndex: 1,
  urlPathPattern: "/{address}/nft",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "tokenAddresses",
    "cursor",
    "normalizeMetadata",
    "mediaItems",
    "excludeSpam"
  ],
  getRequestUrlParams: getRequestUrlParams$l,
  serializeRequest: serializeRequest$l,
  deserializeRequest: deserializeRequest$l,
  deserializeResponse: deserializeResponse$l
};
function getRequestUrlParams$l(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    token_addresses: (_a2 = request.tokenAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$l(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var nft = toCamelCase(data);
    var chain = EvmChainResolver.resolve(request.chain, core2);
    return EvmNft.create({
      chain,
      contractType: nft.contractType,
      tokenAddress: nft.tokenAddress,
      tokenId: nft.tokenId,
      tokenUri: nft.tokenUri,
      metadata: nft.metadata,
      name: nft.name,
      symbol: nft.symbol,
      amount: nft.amount ? parseInt(nft.amount, 10) : void 0,
      blockNumberMinted: nft.blockNumberMinted,
      blockNumber: nft.blockNumber,
      ownerOf: EvmAddress.create(nft.ownerOf),
      tokenHash: nft.tokenHash,
      lastMetadataSync: dateInputToDate(nft.lastMetadataSync),
      lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync),
      possibleSpam: nft.possibleSpam,
      media: maybe(nft.media, function(media) {
        return EvmNftMedia.create(__assign3({ chain }, toCamelCase(media)));
      })
    });
  });
}
function serializeRequest$l(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    tokenAddresses: (_a2 = request.tokenAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    }),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$l(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletNFTTransfersOperation = {
  method: "GET",
  name: "getWalletNFTTransfers",
  id: "getWalletNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "fromBlock",
    "toBlock",
    "limit",
    "cursor",
    "fromDate",
    "toDate",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$k,
  serializeRequest: serializeRequest$k,
  deserializeRequest: deserializeRequest$k,
  deserializeResponse: deserializeResponse$k
};
function getRequestUrlParams$k(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    from_block: maybe(request.fromBlock, String),
    to_block: request.toBlock,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    from_date: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    to_date: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contract_addresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$k(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$k(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromDate: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    toDate: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contractAddresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$k(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var reSyncMetadataOperation = {
  method: "GET",
  name: "reSyncMetadata",
  id: "reSyncMetadata",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/metadata/resync",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "flag", "mode"],
  getRequestUrlParams: getRequestUrlParams$j,
  serializeRequest: serializeRequest$j,
  deserializeRequest: deserializeRequest$j,
  deserializeResponse: deserializeResponse$j
};
function getRequestUrlParams$j(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    flag: request.flag,
    mode: request.mode,
    tokenId: request.tokenId
  };
}
function serializeRequest$j(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    flag: request.flag,
    mode: request.mode,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId
  };
}
function deserializeRequest$j(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    flag: jsonRequest.flag,
    mode: jsonRequest.mode,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId
  };
}
function deserializeResponse$j(jsonResponse) {
  return jsonResponse;
}
var syncNFTContractOperation = {
  method: "PUT",
  name: "syncNFTContract",
  id: "syncNFTContract",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/sync",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$i,
  serializeRequest: serializeRequest$i,
  deserializeRequest: deserializeRequest$i,
  deserializeResponse: deserializeResponse$i
};
function getRequestUrlParams$i(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$i() {
  return {
    success: true
  };
}
function serializeRequest$i(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$i(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var resolveAddressOperation = {
  method: "GET",
  name: "resolveAddress",
  id: "resolveAddress",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{address}/reverse",
  urlPathParamNames: ["address"],
  getRequestUrlParams: getRequestUrlParams$h,
  serializeRequest: serializeRequest$h,
  deserializeRequest: deserializeRequest$h,
  deserializeResponse: deserializeResponse$h
};
function getRequestUrlParams$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$h(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$h(jsonRequest) {
  return {
    address: maybe(jsonRequest.address, function(address) {
      return EvmAddress.create(address);
    })
  };
}
var resolveDomainOperation = {
  method: "GET",
  name: "resolveDomain",
  id: "resolveDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{domain}",
  urlPathParamNames: ["domain"],
  urlSearchParamNames: ["currency"],
  getRequestUrlParams: getRequestUrlParams$g,
  serializeRequest: serializeRequest$g,
  deserializeRequest: deserializeRequest$g,
  deserializeResponse: deserializeResponse$g
};
function getRequestUrlParams$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function serializeRequest$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function deserializeRequest$g(jsonRequest) {
  return {
    currency: jsonRequest.currency,
    domain: jsonRequest.domain
  };
}
function deserializeResponse$g(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var resolveENSDomainOperation = {
  method: "GET",
  name: "resolveENSDomain",
  id: "resolveENSDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/ens/{domain}",
  urlPathParamNames: ["domain"],
  getRequestUrlParams: getRequestUrlParams$f,
  serializeRequest: serializeRequest$f,
  deserializeRequest: deserializeRequest$f,
  deserializeResponse: deserializeResponse$f
};
function getRequestUrlParams$f(request) {
  return {
    domain: request.domain
  };
}
function serializeRequest$f(request) {
  return {
    domain: request.domain
  };
}
function deserializeRequest$f(jsonRequest) {
  return {
    domain: jsonRequest.domain
  };
}
function deserializeResponse$f(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var getTokenAllowanceOperation = {
  method: "GET",
  name: "getTokenAllowance",
  id: "getTokenAllowance",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/allowance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "ownerAddress", "spenderAddress"],
  getRequestUrlParams: getRequestUrlParams$e,
  serializeRequest: serializeRequest$e,
  deserializeRequest: deserializeRequest$e,
  deserializeResponse: deserializeResponse$e
};
function getRequestUrlParams$e(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    owner_address: EvmAddress.create(request.ownerAddress).lowercase,
    spender_address: EvmAddress.create(request.spenderAddress).lowercase,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$e(jsonResponse) {
  return {
    allowance: BigNumber.create(jsonResponse.allowance)
  };
}
function serializeRequest$e(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    ownerAddress: EvmAddress.create(request.ownerAddress).checksum,
    spenderAddress: EvmAddress.create(request.spenderAddress).checksum,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$e(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    ownerAddress: EvmAddress.create(jsonRequest.ownerAddress),
    spenderAddress: EvmAddress.create(jsonRequest.spenderAddress),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getTokenMetadataBySymbolOperation = {
  method: "GET",
  name: "getTokenMetadataBySymbol",
  id: "getTokenMetadataBySymbol",
  groupName: "token",
  urlPathPattern: "/erc20/metadata/symbols",
  urlSearchParamNames: ["chain", "symbols"],
  getRequestUrlParams: getRequestUrlParams$d,
  serializeRequest: serializeRequest$d,
  deserializeRequest: deserializeRequest$d,
  deserializeResponse: deserializeResponse$d
};
function getRequestUrlParams$d(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    symbols: request.symbols
  };
}
function deserializeResponse$d(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign3(__assign3({}, toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core2) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$d(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    symbols: request.symbols
  };
}
function deserializeRequest$d(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    symbols: jsonRequest.symbols
  };
}
var getTokenMetadataOperation = {
  method: "GET",
  name: "getTokenMetadata",
  id: "getTokenMetadata",
  groupName: "token",
  urlPathPattern: "/erc20/metadata",
  urlSearchParamNames: ["chain", "addresses"],
  getRequestUrlParams: getRequestUrlParams$c,
  serializeRequest: serializeRequest$c,
  deserializeRequest: deserializeRequest$c,
  deserializeResponse: deserializeResponse$c
};
function getRequestUrlParams$c(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$c(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign3(__assign3({}, toCamelCase(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core2) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$c(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$c(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    addresses: jsonRequest.addresses.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getTokenPriceOperation = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/price",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "exchange", "toBlock", "include"],
  getRequestUrlParams: getRequestUrlParams$b,
  serializeRequest: serializeRequest$b,
  deserializeRequest: deserializeRequest$b,
  deserializeResponse: deserializeResponse$b
};
function getRequestUrlParams$b(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    exchange: request.exchange,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include
  };
}
function deserializeResponse$b(jsonResponse) {
  var _a2, _b, _c;
  return __assign3(__assign3({}, toCamelCase(jsonResponse)), { nativePrice: ((_a2 = jsonResponse.nativePrice) === null || _a2 === void 0 ? void 0 : _a2.value) ? EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals) : null, exchangeAddress: jsonResponse.exchangeAddress ? EvmAddress.create(jsonResponse.exchangeAddress) : null });
}
function serializeRequest$b(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    exchange: request.exchange,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).checksum,
    include: request.include
  };
}
function deserializeRequest$b(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    exchange: jsonRequest.exchange,
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include
  };
}
var getTokenTransfersOperation = {
  method: "GET",
  name: "getTokenTransfers",
  id: "getTokenTransfers",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$a,
  serializeRequest: serializeRequest$a,
  deserializeRequest: deserializeRequest$a,
  deserializeResponse: deserializeResponse$a
};
function getRequestUrlParams$a(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$a(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return Erc20Transaction.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$a(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$a(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getWalletTokenBalancesOperation = {
  method: "GET",
  name: "getWalletTokenBalances",
  id: "getWalletTokenBalances",
  groupName: "token",
  urlPathPattern: "/{address}/erc20",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock", "tokenAddresses", "excludeSpam"],
  getRequestUrlParams: getRequestUrlParams$9,
  serializeRequest: serializeRequest$9,
  deserializeRequest: deserializeRequest$9,
  deserializeResponse: deserializeResponse$9
};
function getRequestUrlParams$9(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    token_addresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).lowercase;
      });
    }),
    address: EvmAddress.create(request.address).lowercase,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$9(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return Erc20Value.create(token.balance, {
      decimals: token.decimals,
      token: {
        decimals: token.decimals,
        name: token.name,
        symbol: token.symbol,
        contractAddress: token.token_address,
        logo: token.logo,
        thumbnail: token.thumbnail,
        chain: EvmChainResolver.resolve(request.chain, core2),
        possibleSpam: token.possible_spam
      }
    });
  });
}
function serializeRequest$9(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    tokenAddresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).checksum;
      });
    }),
    address: EvmAddress.create(request.address).checksum,
    toBlock: request.toBlock,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$9(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    address: EvmAddress.create(jsonRequest.address),
    toBlock: jsonRequest.toBlock,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletTokenTransfersOperation = {
  method: "GET",
  name: "getWalletTokenTransfers",
  id: "getWalletTokenTransfers",
  groupName: "token",
  urlPathPattern: "/{address}/erc20/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "limit",
    "cursor",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$8,
  serializeRequest: serializeRequest$8,
  deserializeRequest: deserializeRequest$8,
  deserializeResponse: deserializeResponse$8
};
function getRequestUrlParams$8(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order,
    contract_addresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$8(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return Erc20Transaction.create(__assign3(__assign3({}, toCamelCase(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$8(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order,
    contractAddresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$8(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var getTransactionOperation = {
  method: "GET",
  name: "getTransaction",
  id: "getTransaction",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$7,
  serializeRequest: serializeRequest$7,
  deserializeRequest: deserializeRequest$7,
  deserializeResponse: deserializeResponse$7
};
function getRequestUrlParams$7(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$7(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$7(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$7(jsonResponse, request, core2) {
  var _a2, _b;
  var chain = EvmChainResolver.resolve(request.chain, core2);
  return EvmTransaction.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain,
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a2 = jsonResponse.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
      return EvmTransactionLog.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain
      });
    }),
    internalTransactions: ((_b = jsonResponse.internal_transactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
      var internalTransaction = toCamelCase(jsonInternalTransaction);
      return EvmInternalTransaction.create(internalTransaction);
    }),
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getTransactionVerboseOperation = {
  method: "GET",
  name: "getTransactionVerbose",
  id: "getTransactionVerbose",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}/verbose",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$6,
  serializeRequest: serializeRequest$6,
  deserializeRequest: deserializeRequest$6,
  deserializeResponse: deserializeResponse$6
};
function getRequestUrlParams$6(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$6(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$6(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$6(jsonResponse, request, core2) {
  var _a2;
  return EvmTransactionVerbose.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain: EvmChainResolver.resolve(request.chain, core2),
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a2 = jsonResponse.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
      return EvmTransactionLogDecoded.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain: EvmChainResolver.resolve(request.chain, core2),
        decodedEvent: log.decoded_event
      });
    }),
    decodedCall: jsonResponse.decoded_call,
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getWalletTransactionsOperation = {
  method: "GET",
  name: "getWalletTransactions",
  id: "getWalletTransactions",
  groupName: "transaction",
  urlPathPattern: "/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$5,
  serializeRequest: serializeRequest$5,
  deserializeRequest: deserializeRequest$5,
  deserializeResponse: deserializeResponse$5
};
function getRequestUrlParams$5(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$5(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$5(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$5(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    var _a3;
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core2),
      data: transfer.input,
      from: transfer.from_address,
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: transfer.gas ? BigNumber.create(transfer.gas) : null,
      to: transfer.to_address ? transfer.to_address : null,
      internalTransactions: ((_a3 = transfer.internal_transactions) !== null && _a3 !== void 0 ? _a3 : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase(jsonInternalTransaction);
        return EvmInternalTransaction.create(internalTransaction);
      })
    });
  });
}
var getWalletTransactionsVerboseOperation = {
  method: "GET",
  name: "getWalletTransactionsVerbose",
  id: "getWalletTransactionsVerbose",
  groupName: "transaction",
  urlPathPattern: "/{address}/verbose",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$4,
  serializeRequest: serializeRequest$4,
  deserializeRequest: deserializeRequest$4,
  deserializeResponse: deserializeResponse$4
};
function getRequestUrlParams$4(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$4(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$4(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$4(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    var _a3;
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core2),
      data: transfer.input,
      from: EvmAddress.create(transfer.from_address),
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: BigNumber.create(transfer.gas),
      to: EvmAddress.create(transfer.to_address),
      logs: ((_a3 = transfer.logs) !== null && _a3 !== void 0 ? _a3 : []).map(function(log) {
        return EvmTransactionLog.create({
          logIndex: +log.log_index,
          transactionHash: log.transaction_hash,
          transactionIndex: +log.transaction_index,
          address: log.address,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          blockHash: log.block_hash,
          blockNumber: +log.block_number,
          blockTimestamp: transfer.block_timestamp,
          chain: EvmChainResolver.resolve(request.chain, core2)
        });
      })
    });
  });
}
var getInternalTransactionsOperation = {
  method: "GET",
  name: "getInternalTransactions",
  id: "getInternalTransactions",
  groupName: "transaction",
  urlPathPattern: "/transaction/{transactionHash}/internal-transactions",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$3,
  serializeRequest: serializeRequest$3,
  deserializeRequest: deserializeRequest$3,
  deserializeResponse: deserializeResponse$3
};
function getRequestUrlParams$3(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash
  };
}
function serializeRequest$3(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash
  };
}
function deserializeRequest$3(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash
  };
}
function deserializeResponse$3(jsonResponse) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(transaction) {
    return EvmInternalTransaction.create({
      blockHash: transaction.block_hash,
      blockNumber: transaction.block_number,
      from: transaction.from,
      gas: transaction.gas,
      gasUsed: transaction.gas_used,
      input: transaction.input,
      output: transaction.output,
      to: transaction.to,
      transactionHash: transaction.transaction_hash,
      type: transaction.type,
      value: transaction.value
    });
  });
}
var runContractFunctionOperation = {
  method: "POST",
  name: "runContractFunction",
  id: "runContractFunction",
  groupName: "utils",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "functionName"],
  urlPathPattern: "/{address}/function",
  bodyType: "properties",
  bodyParamNames: ["abi", "params"],
  getRequestUrlParams: getRequestUrlParams$2,
  getRequestBody,
  deserializeResponse: deserializeResponse$2,
  serializeRequest: serializeRequest$2,
  deserializeRequest: deserializeRequest$2
};
function getRequestUrlParams$2(request, core2) {
  return {
    address: EvmAddress.create(request.address).lowercase,
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    function_name: request.functionName
  };
}
function getRequestBody(request) {
  return {
    abi: request.abi,
    params: request.params
  };
}
function deserializeResponse$2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$2(request, core2) {
  return {
    address: EvmAddress.create(request.address).checksum,
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    functionName: request.functionName,
    abi: request.abi,
    params: request.params
  };
}
function deserializeRequest$2(jsonRequest) {
  return {
    address: EvmAddress.create(jsonRequest.address),
    chain: EvmChain.create(jsonRequest.chain),
    functionName: jsonRequest.functionName,
    abi: jsonRequest.abi,
    params: jsonRequest.params
  };
}
var endpointWeightsOperation = {
  method: "GET",
  name: "endpointWeights",
  id: "endpointWeights",
  groupName: "utils",
  urlPathPattern: "/info/endpointWeights",
  getRequestUrlParams: getRequestUrlParams$1,
  deserializeRequest: deserializeRequest$1,
  serializeRequest: serializeRequest$1,
  deserializeResponse: deserializeResponse$1
};
function getRequestUrlParams$1() {
  return {};
}
function serializeRequest$1() {
  return void 0;
}
function deserializeRequest$1() {
  return {};
}
function deserializeResponse$1(jsonResponse) {
  return jsonResponse;
}
var web3ApiVersionOperation = {
  method: "GET",
  name: "web3ApiVersion",
  id: "web3ApiVersion",
  groupName: "utils",
  urlPathPattern: "/web3/version",
  deserializeRequest,
  serializeRequest,
  getRequestUrlParams,
  deserializeResponse
};
function getRequestUrlParams() {
  return {};
}
function serializeRequest() {
  return void 0;
}
function deserializeRequest() {
  return {};
}
function deserializeResponse(jsonResponse) {
  return jsonResponse;
}
var operationsV2 = [
  getBlockOperation,
  getContractEventsOperation,
  getContractLogsOperation,
  getContractNFTsOperation,
  getDateToBlockOperation,
  getInternalTransactionsOperation,
  getMultipleNFTsOperation,
  getNativeBalanceOperation,
  getNativeBalancesForAddressesOperation,
  getNFTContractMetadataOperation,
  getNFTContractTransfersOperation,
  getNFTLowestPriceOperation,
  getNFTMetadataOperation,
  getNFTOwnersOperation,
  getNFTTokenIdOwnersOperation,
  getNFTTransfersByBlockOperation,
  getNFTTransfersFromToBlockOperation,
  getNFTTransfersOperation,
  getPairAddressOperation,
  getPairReservesOperation,
  getTokenAllowanceOperation,
  getTokenMetadataBySymbolOperation,
  getTokenMetadataOperation,
  getTokenPriceOperation,
  getTokenTransfersOperation,
  getTransactionOperation,
  getTransactionVerboseOperation,
  getWalletNFTCollectionsOperation,
  getWalletNFTsOperation,
  getWalletNFTTransfersOperation,
  getWalletTokenBalancesOperation,
  getWalletTokenTransfersOperation,
  getWalletTransactionsOperation,
  getWalletTransactionsVerboseOperation,
  resolveAddressOperation,
  resolveDomainOperation,
  resolveENSDomainOperation,
  reSyncMetadataOperation,
  runContractFunctionOperation,
  syncNFTContractOperation,
  uploadFolderOperation
];
var operationsV2All = __spreadArray2(__spreadArray2([], operationsV2, true), [
  endpointWeightsOperation,
  web3ApiVersionOperation,
  getNFTTradesOperation
], false);

// node_modules/@ethersproject/abi/lib.esm/index.js
var import_dist166 = __toESM(require_dist());
var import_dist167 = __toESM(require_dist2());
var import_dist168 = __toESM(require_dist3());

// node_modules/@ethersproject/abi/lib.esm/fragments.js
var import_dist61 = __toESM(require_dist());
var import_dist62 = __toESM(require_dist2());
var import_dist63 = __toESM(require_dist3());

// node_modules/@ethersproject/properties/lib.esm/index.js
var import_dist55 = __toESM(require_dist());
var import_dist56 = __toESM(require_dist2());
var import_dist57 = __toESM(require_dist3());

// node_modules/@ethersproject/properties/lib.esm/_version.js
var import_dist52 = __toESM(require_dist());
var import_dist53 = __toESM(require_dist2());
var import_dist54 = __toESM(require_dist3());
var version6 = "properties/5.8.0";

// node_modules/@ethersproject/properties/lib.esm/index.js
var logger6 = new Logger(version6);
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger6.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key in object) {
      const value = object[key];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger6.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var Description = class {
  constructor(info) {
    for (const key in info) {
      this[key] = deepCopy(info[key]);
    }
  }
};

// node_modules/@ethersproject/abi/lib.esm/_version.js
var import_dist58 = __toESM(require_dist());
var import_dist59 = __toESM(require_dist2());
var import_dist60 = __toESM(require_dist3());
var version7 = "abi/5.8.0";

// node_modules/@ethersproject/abi/lib.esm/fragments.js
var logger7 = new Logger(version7);
var _constructorGuard3 = {};
var ModifiersBytes = { calldata: true, memory: true, storage: true };
var ModifiersNest = { calldata: true, memory: true };
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger7.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger7.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      // Hit a space...
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger7.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key in params) {
    defineReadOnly(object, key, params[key]);
  }
}
var FormatTypes = Object.freeze({
  // Bare formatting, as is needed for computing a sighash of an event or function
  sighash: "sighash",
  // Human-Readable with Minimal spacing and without names (compact human-readable)
  minimal: "minimal",
  // Human-Readable with nice spacing, including all names
  full: "full",
  // JSON-format a la Solidity
  json: "json"
});
var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
var ParamType = class _ParamType {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger7.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }
    populate(this, params);
    let match = this.type.match(paramTypeArray);
    if (match) {
      populate(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: _ParamType.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }
    this._isParamType = true;
    Object.freeze(this);
  }
  // Format the parameter fragment
  //   - sighash: "(uint256,address)"
  //   - minimal: "tuple(uint256,address) indexed"
  //   - full:    "tuple(uint256 foo, address bar) indexed baz"
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      let result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || void 0
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.components) {
        result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.baseType === "array") {
      result += this.arrayChildren.format(format);
      result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    } else {
      if (this.baseType === "tuple") {
        if (format !== FormatTypes.sighash) {
          result += this.type;
        }
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== FormatTypes.sighash) {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === FormatTypes.full && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  static from(value, allowIndexed) {
    if (typeof value === "string") {
      return _ParamType.fromString(value, allowIndexed);
    }
    return _ParamType.fromObject(value);
  }
  static fromObject(value) {
    if (_ParamType.isParamType(value)) {
      return value;
    }
    return new _ParamType(_constructorGuard3, {
      name: value.name || null,
      type: verifyType(value.type),
      indexed: value.indexed == null ? null : !!value.indexed,
      components: value.components ? value.components.map(_ParamType.fromObject) : null
    });
  }
  static fromString(value, allowIndexed) {
    function ParamTypify(node) {
      return _ParamType.fromObject({
        name: node.name,
        type: node.type,
        indexed: node.indexed,
        components: node.components
      });
    }
    return ParamTypify(parseParamType(value, !!allowIndexed));
  }
  static isParamType(value) {
    return !!(value != null && value._isParamType);
  }
};
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
var Fragment = class _Fragment {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger7.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }
    populate(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }
  static from(value) {
    if (_Fragment.isFragment(value)) {
      return value;
    }
    if (typeof value === "string") {
      return _Fragment.fromString(value);
    }
    return _Fragment.fromObject(value);
  }
  static fromObject(value) {
    if (_Fragment.isFragment(value)) {
      return value;
    }
    switch (value.type) {
      case "function":
        return FunctionFragment.fromObject(value);
      case "event":
        return EventFragment.fromObject(value);
      case "constructor":
        return ConstructorFragment.fromObject(value);
      case "error":
        return ErrorFragment.fromObject(value);
      case "fallback":
      case "receive":
        return null;
    }
    return logger7.throwArgumentError("invalid fragment object", "value", value);
  }
  static fromString(value) {
    value = value.replace(/\s/g, " ");
    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    value = value.trim();
    if (value.split(" ")[0] === "event") {
      return EventFragment.fromString(value.substring(5).trim());
    } else if (value.split(" ")[0] === "function") {
      return FunctionFragment.fromString(value.substring(8).trim());
    } else if (value.split("(")[0].trim() === "constructor") {
      return ConstructorFragment.fromString(value.trim());
    } else if (value.split(" ")[0] === "error") {
      return ErrorFragment.fromString(value.substring(5).trim());
    }
    return logger7.throwArgumentError("unsupported fragment", "value", value);
  }
  static isFragment(value) {
    return !!(value && value._isFragment);
  }
};
var EventFragment = class _EventFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "event ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.anonymous) {
        result += "anonymous ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _EventFragment.fromString(value);
    }
    return _EventFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_EventFragment.isEventFragment(value)) {
      return value;
    }
    if (value.type !== "event") {
      logger7.throwArgumentError("invalid event object", "value", value);
    }
    const params = {
      name: verifyIdentifier(value.name),
      anonymous: value.anonymous,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      type: "event"
    };
    return new _EventFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let match = value.match(regexParen);
    if (!match) {
      logger7.throwArgumentError("invalid event string", "value", value);
    }
    let anonymous = false;
    match[3].split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "anonymous":
          anonymous = true;
          break;
        case "":
          break;
        default:
          logger7.warn("unknown modifier: " + modifier);
      }
    });
    return _EventFragment.fromObject({
      name: match[1].trim(),
      anonymous,
      inputs: parseParams(match[2], true),
      type: "event"
    });
  }
  static isEventFragment(value) {
    return value && value._isFragment && value.type === "event";
  }
};
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger7.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger7.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber2.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger7.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger7.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger7.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger7.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger7.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
var ConstructorFragment = class _ConstructorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    if (format === FormatTypes.sighash) {
      logger7.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "format(sighash)"
      });
    }
    let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (this.stateMutability && this.stateMutability !== "nonpayable") {
      result += this.stateMutability + " ";
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _ConstructorFragment.fromString(value);
    }
    return _ConstructorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_ConstructorFragment.isConstructorFragment(value)) {
      return value;
    }
    if (value.type !== "constructor") {
      logger7.throwArgumentError("invalid constructor object", "value", value);
    }
    let state = verifyState(value);
    if (state.constant) {
      logger7.throwArgumentError("constructor cannot be constant", "value", value);
    }
    const params = {
      name: null,
      type: value.type,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber2.from(value.gas) : null
    };
    return new _ConstructorFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "constructor" };
    value = parseGas(value, params);
    let parens = value.match(regexParen);
    if (!parens || parens[1].trim() !== "constructor") {
      logger7.throwArgumentError("invalid constructor string", "value", value);
    }
    params.inputs = parseParams(parens[2].trim(), false);
    parseModifiers(parens[3].trim(), params);
    return _ConstructorFragment.fromObject(params);
  }
  static isConstructorFragment(value) {
    return value && value._isFragment && value.type === "constructor";
  }
};
var FunctionFragment = class _FunctionFragment extends ConstructorFragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
        outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "function ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.stateMutability) {
        if (this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
      } else if (this.constant) {
        result += "view ";
      }
      if (this.outputs && this.outputs.length) {
        result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
      }
      if (this.gas != null) {
        result += "@" + this.gas.toString() + " ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _FunctionFragment.fromString(value);
    }
    return _FunctionFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_FunctionFragment.isFunctionFragment(value)) {
      return value;
    }
    if (value.type !== "function") {
      logger7.throwArgumentError("invalid function object", "value", value);
    }
    let state = verifyState(value);
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      constant: state.constant,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber2.from(value.gas) : null
    };
    return new _FunctionFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "function" };
    value = parseGas(value, params);
    let comps = value.split(" returns ");
    if (comps.length > 2) {
      logger7.throwArgumentError("invalid function string", "value", value);
    }
    let parens = comps[0].match(regexParen);
    if (!parens) {
      logger7.throwArgumentError("invalid function signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    parseModifiers(parens[3].trim(), params);
    if (comps.length > 1) {
      let returns = comps[1].match(regexParen);
      if (returns[1].trim() != "" || returns[3].trim() != "") {
        logger7.throwArgumentError("unexpected tokens", "value", value);
      }
      params.outputs = parseParams(returns[2], false);
    } else {
      params.outputs = [];
    }
    return _FunctionFragment.fromObject(params);
  }
  static isFunctionFragment(value) {
    return value && value._isFragment && value.type === "function";
  }
};
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger7.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
var ErrorFragment = class _ErrorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "error ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _ErrorFragment.fromString(value);
    }
    return _ErrorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_ErrorFragment.isErrorFragment(value)) {
      return value;
    }
    if (value.type !== "error") {
      logger7.throwArgumentError("invalid error object", "value", value);
    }
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
    };
    return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
  }
  static fromString(value) {
    let params = { type: "error" };
    let parens = value.match(regexParen);
    if (!parens) {
      logger7.throwArgumentError("invalid error signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    return checkForbidden(_ErrorFragment.fromObject(params));
  }
  static isErrorFragment(value) {
    return value && value._isFragment && value.type === "error";
  }
};
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger7.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger7.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var import_dist127 = __toESM(require_dist());
var import_dist128 = __toESM(require_dist2());
var import_dist129 = __toESM(require_dist3());

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
var import_dist64 = __toESM(require_dist());
var import_dist65 = __toESM(require_dist2());
var import_dist66 = __toESM(require_dist3());
var logger8 = new Logger(version7);
var Coder = class {
  constructor(name, type, localName, dynamic) {
    this.name = name;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }
  _throwError(message, value) {
    logger8.throwArgumentError(message, this.localName, value);
  }
};
var Writer = class {
  constructor(wordSize) {
    defineReadOnly(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }
  get data() {
    return hexConcat(this._data);
  }
  get length() {
    return this._dataLength;
  }
  _writeData(data) {
    this._data.push(data);
    this._dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this._writeData(concat(writer._data));
  }
  // Arrayish items; padded on the right to wordSize
  writeBytes(value) {
    let bytes = arrayify(value);
    const paddingOffset = bytes.length % this.wordSize;
    if (paddingOffset) {
      bytes = concat([bytes, this._padding.slice(paddingOffset)]);
    }
    return this._writeData(bytes);
  }
  _getValue(value) {
    let bytes = arrayify(BigNumber2.from(value));
    if (bytes.length > this.wordSize) {
      logger8.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
        length: this.wordSize,
        offset: bytes.length
      });
    }
    if (bytes.length % this.wordSize) {
      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
    }
    return bytes;
  }
  // BigNumberish items; padded on the left to wordSize
  writeValue(value) {
    return this._writeData(this._getValue(value));
  }
  writeUpdatableValue() {
    const offset = this._data.length;
    this._data.push(this._padding);
    this._dataLength += this.wordSize;
    return (value) => {
      this._data[offset] = this._getValue(value);
    };
  }
};
var Reader = class _Reader {
  constructor(data, wordSize, coerceFunc, allowLoose) {
    defineReadOnly(this, "_data", arrayify(data));
    defineReadOnly(this, "wordSize", wordSize || 32);
    defineReadOnly(this, "_coerceFunc", coerceFunc);
    defineReadOnly(this, "allowLoose", allowLoose);
    this._offset = 0;
  }
  get data() {
    return hexlify(this._data);
  }
  get consumed() {
    return this._offset;
  }
  // The default Coerce function
  static coerce(name, value) {
    let match = name.match("^u?int([0-9]+)$");
    if (match && parseInt(match[1]) <= 48) {
      value = value.toNumber();
    }
    return value;
  }
  coerce(name, value) {
    if (this._coerceFunc) {
      return this._coerceFunc(name, value);
    }
    return _Reader.coerce(name, value);
  }
  _peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
    if (this._offset + alignedLength > this._data.length) {
      if (this.allowLoose && loose && this._offset + length <= this._data.length) {
        alignedLength = length;
      } else {
        logger8.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this._data.length,
          offset: this._offset + alignedLength
        });
      }
    }
    return this._data.slice(this._offset, this._offset + alignedLength);
  }
  subReader(offset) {
    return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
  }
  readBytes(length, loose) {
    let bytes = this._peekBytes(0, length, !!loose);
    this._offset += bytes.length;
    return bytes.slice(0, length);
  }
  readValue() {
    return BigNumber2.from(this.readBytes(this.wordSize));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var import_dist67 = __toESM(require_dist());
var import_dist68 = __toESM(require_dist2());
var import_dist69 = __toESM(require_dist3());
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, value) {
    try {
      value = getAddress(value);
    } catch (error) {
      this._throwError(error.message, value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
var import_dist73 = __toESM(require_dist());
var import_dist74 = __toESM(require_dist2());
var import_dist75 = __toESM(require_dist3());

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var import_dist70 = __toESM(require_dist());
var import_dist71 = __toESM(require_dist2());
var import_dist72 = __toESM(require_dist3());
var AnonymousCoder = class extends Coder {
  constructor(coder) {
    super(coder.name, coder.type, void 0, coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
var logger9 = new Logger(version7);
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      if (!name) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var ArrayCoder = class extends Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    this.coder = coder;
    this.length = length;
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, value) {
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readValue().toNumber();
      if (count * 32 > reader._data.length) {
        logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
          length: reader._data.length,
          count
        });
      }
    }
    let coders = [];
    for (let i = 0; i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return reader.coerce(this.name, unpack(reader, coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var import_dist76 = __toESM(require_dist());
var import_dist77 = __toESM(require_dist2());
var import_dist78 = __toESM(require_dist3());
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, value) {
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return reader.coerce(this.type, !reader.readValue().isZero());
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var import_dist79 = __toESM(require_dist());
var import_dist80 = __toESM(require_dist2());
var import_dist81 = __toESM(require_dist3());
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = arrayify(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readValue().toNumber(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(super.decode(reader)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var import_dist82 = __toESM(require_dist());
var import_dist83 = __toESM(require_dist2());
var import_dist84 = __toESM(require_dist3());
var FixedBytesCoder = class extends Coder {
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    this.size = size;
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, value) {
    let data = arrayify(value);
    if (data.length !== this.size) {
      this._throwError("incorrect data length", value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var import_dist85 = __toESM(require_dist());
var import_dist86 = __toESM(require_dist2());
var import_dist87 = __toESM(require_dist3());
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes([]);
  }
  decode(reader) {
    reader.readBytes(0);
    return reader.coerce(this.name, null);
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var import_dist103 = __toESM(require_dist());
var import_dist104 = __toESM(require_dist2());
var import_dist105 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/index.js
var import_dist100 = __toESM(require_dist());
var import_dist101 = __toESM(require_dist2());
var import_dist102 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var import_dist88 = __toESM(require_dist());
var import_dist89 = __toESM(require_dist2());
var import_dist90 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var import_dist91 = __toESM(require_dist());
var import_dist92 = __toESM(require_dist2());
var import_dist93 = __toESM(require_dist3());
var NegativeOne2 = BigNumber2.from(-1);
var Zero2 = BigNumber2.from(0);
var One = BigNumber2.from(1);
var Two = BigNumber2.from(2);
var WeiPerEther = BigNumber2.from("1000000000000000000");
var MaxUint256 = BigNumber2.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigNumber2.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = BigNumber2.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var import_dist94 = __toESM(require_dist());
var import_dist95 = __toESM(require_dist2());
var import_dist96 = __toESM(require_dist3());

// node_modules/@ethersproject/constants/lib.esm/strings.js
var import_dist97 = __toESM(require_dist());
var import_dist98 = __toESM(require_dist2());
var import_dist99 = __toESM(require_dist3());

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder = class extends Coder {
  constructor(size, signed2, localName) {
    const name = (signed2 ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    this.size = size;
    this.signed = signed2;
  }
  defaultValue() {
    return 0;
  }
  encode(writer, value) {
    let v = BigNumber2.from(value);
    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
    if (this.signed) {
      let bounds = maxUintValue.mask(this.size * 8 - 1);
      if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
        this._throwError("value out-of-bounds", value);
      }
    } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
      this._throwError("value out-of-bounds", value);
    }
    v = v.toTwos(this.size * 8).mask(this.size * 8);
    if (this.signed) {
      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
    }
    return writer.writeValue(v);
  }
  decode(reader) {
    let value = reader.readValue().mask(this.size * 8);
    if (this.signed) {
      value = value.fromTwos(this.size * 8);
    }
    return reader.coerce(this.name, value);
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var import_dist121 = __toESM(require_dist());
var import_dist122 = __toESM(require_dist2());
var import_dist123 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/index.js
var import_dist118 = __toESM(require_dist());
var import_dist119 = __toESM(require_dist2());
var import_dist120 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var import_dist112 = __toESM(require_dist());
var import_dist113 = __toESM(require_dist2());
var import_dist114 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var import_dist109 = __toESM(require_dist());
var import_dist110 = __toESM(require_dist2());
var import_dist111 = __toESM(require_dist3());

// node_modules/@ethersproject/strings/lib.esm/_version.js
var import_dist106 = __toESM(require_dist());
var import_dist107 = __toESM(require_dist2());
var import_dist108 = __toESM(require_dist3());
var version8 = "strings/5.8.0";

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var logger10 = new Logger(version8);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
  UnicodeNormalizationForm2["current"] = "";
  UnicodeNormalizationForm2["NFC"] = "NFC";
  UnicodeNormalizationForm2["NFD"] = "NFD";
  UnicodeNormalizationForm2["NFKC"] = "NFKC";
  UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
  Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason2["OVERRUN"] = "string overrun";
  Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}

// node_modules/@ethersproject/strings/lib.esm/idna.js
var import_dist115 = __toESM(require_dist());
var import_dist116 = __toESM(require_dist2());
var import_dist117 = __toESM(require_dist3());
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, value) {
    return super.encode(writer, toUtf8Bytes(value));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var import_dist124 = __toESM(require_dist());
var import_dist125 = __toESM(require_dist2());
var import_dist126 = __toESM(require_dist3());
var TupleCoder = class extends Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    this.coders = coders;
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, value) {
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return reader.coerce(this.name, unpack(reader, this.coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11 = new Logger(version7);
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder = class {
  constructor(coerceFunc) {
    defineReadOnly(this, "coerceFunc", coerceFunc || null);
  }
  _getCoder(param) {
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "array":
        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
      case "tuple":
        return new TupleCoder((param.components || []).map((component) => {
          return this._getCoder(component);
        }), param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (size === 0 || size > 256 || size % 8 !== 0) {
        logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
      }
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      if (size === 0 || size > 32) {
        logger11.throwArgumentError("invalid bytes length", "param", param);
      }
      return new FixedBytesCoder(size, param.name);
    }
    return logger11.throwArgumentError("invalid type", "type", param.type);
  }
  _getWordSize() {
    return 32;
  }
  _getReader(data, allowLoose) {
    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
  }
  _getWriter() {
    return new Writer(this._getWordSize());
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    if (types.length !== values.length) {
      logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
        count: { types: types.length, values: values.length },
        value: { types, values }
      });
    }
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = this._getWriter();
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(this._getReader(arrayify(data), loose));
  }
};
var defaultAbiCoder = new AbiCoder();

// node_modules/@ethersproject/abi/lib.esm/interface.js
var import_dist163 = __toESM(require_dist());
var import_dist164 = __toESM(require_dist2());
var import_dist165 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/index.js
var import_dist160 = __toESM(require_dist());
var import_dist161 = __toESM(require_dist2());
var import_dist162 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/id.js
var import_dist130 = __toESM(require_dist());
var import_dist131 = __toESM(require_dist2());
var import_dist132 = __toESM(require_dist3());
function id(text) {
  return keccak256(toUtf8Bytes(text));
}

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var import_dist151 = __toESM(require_dist());
var import_dist152 = __toESM(require_dist2());
var import_dist153 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/_version.js
var import_dist133 = __toESM(require_dist());
var import_dist134 = __toESM(require_dist2());
var import_dist135 = __toESM(require_dist3());
var version9 = "hash/5.8.0";

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var import_dist148 = __toESM(require_dist());
var import_dist149 = __toESM(require_dist2());
var import_dist150 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
var import_dist145 = __toESM(require_dist());
var import_dist146 = __toESM(require_dist2());
var import_dist147 = __toESM(require_dist3());

// node_modules/@ethersproject/base64/lib.esm/index.js
var import_dist139 = __toESM(require_dist());
var import_dist140 = __toESM(require_dist2());
var import_dist141 = __toESM(require_dist3());

// node_modules/@ethersproject/base64/lib.esm/base64.js
var import_dist136 = __toESM(require_dist());
var import_dist137 = __toESM(require_dist2());
var import_dist138 = __toESM(require_dist3());
function decode(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
var import_dist142 = __toESM(require_dist());
var import_dist143 = __toESM(require_dist2());
var import_dist144 = __toESM(require_dist3());
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach2 = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach2.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N = 31;
  const FULL = Math.pow(2, N);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
  let v = Array(n);
  for (let i = 0; i < n; i++)
    v[i] = 1 + next();
  return v;
}
function read_ascending(n, next) {
  let v = Array(n);
  for (let i = 0, x = -1; i < n; i++)
    v[i] = x += 1 + next();
  return v;
}
function read_deltas(n, next) {
  let v = Array(n);
  for (let i = 0, x = 0; i < n; i++)
    v[i] = x += signed(next());
  return v;
}
function read_member_array(next, lookup) {
  let v = read_ascending(next(), next);
  let n = next();
  let vX = read_ascending(n, next);
  let vN = read_counts(n, next);
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map((x) => lookup[x]) : v;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v = [];
  while (true) {
    let i = next();
    if (i == 0)
      break;
    v.push(i);
  }
  return v;
}
function read_transposed(n, w, next) {
  let m = Array(n).fill(void 0).map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map((v, i) => {
    const x = v[0], ys = v.slice(1);
    return Array(vN[i]).fill(void 0).map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  }));
}
function read_replacement_table(w, next) {
  let n = 1 + next();
  let m = read_transposed(n, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a, b) => a - b);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a, b) => b.set.size - a.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode(""));
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r = getData();
var VALID = new Set(read_member_array(r));
var IGNORED = new Set(read_member_array(r));
var MAPPED = read_mapped_map(r);
var EMOJI_ROOT = read_emoji_trie(r);

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12 = new Logger(version9);
var Zeros = new Uint8Array(32);
Zeros.fill(0);

// node_modules/@ethersproject/hash/lib.esm/message.js
var import_dist154 = __toESM(require_dist());
var import_dist155 = __toESM(require_dist2());
var import_dist156 = __toESM(require_dist3());

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var import_dist157 = __toESM(require_dist());
var import_dist158 = __toESM(require_dist2());
var import_dist159 = __toESM(require_dist3());
var logger13 = new Logger(version9);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne3 = BigNumber2.from(-1);
var Zero3 = BigNumber2.from(0);
var One2 = BigNumber2.from(1);
var MaxUint2562 = BigNumber2.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var hexTrue = hexZeroPad(One2.toHexString(), 32);
var hexFalse = hexZeroPad(Zero3.toHexString(), 32);
function checkString(key) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(value) {
    try {
      return BigNumber2.from(value).toString();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};

// node_modules/@ethersproject/abi/lib.esm/interface.js
var logger14 = new Logger(version7);
var LogDescription = class extends Description {
};
var TransactionDescription = class extends Description {
};
var ErrorDescription = class extends Description {
};
var Indexed = class extends Description {
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var BuiltinErrors = {
  "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
  "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var Interface = class {
  constructor(fragments) {
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    defineReadOnly(this, "fragments", abi.map((fragment) => {
      return Fragment.from(fragment);
    }).filter((fragment) => fragment != null));
    defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "errors", {});
    defineReadOnly(this, "events", {});
    defineReadOnly(this, "structs", {});
    this.fragments.forEach((fragment) => {
      let bucket = null;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            logger14.warn("duplicate definition - constructor");
            return;
          }
          defineReadOnly(this, "deploy", fragment);
          return;
        case "function":
          bucket = this.functions;
          break;
        case "event":
          bucket = this.events;
          break;
        case "error":
          bucket = this.errors;
          break;
        default:
          return;
      }
      let signature = fragment.format();
      if (bucket[signature]) {
        logger14.warn("duplicate definition - " + signature);
        return;
      }
      bucket[signature] = fragment;
    });
    if (!this.deploy) {
      defineReadOnly(this, "deploy", ConstructorFragment.from({
        payable: false,
        type: "constructor"
      }));
    }
    defineReadOnly(this, "_isInterface", true);
  }
  format(format) {
    if (!format) {
      format = FormatTypes.full;
    }
    if (format === FormatTypes.sighash) {
      logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
    }
    const abi = this.fragments.map((fragment) => fragment.format(format));
    if (format === FormatTypes.json) {
      return JSON.stringify(abi.map((j) => JSON.parse(j)));
    }
    return abi;
  }
  // Sub-classes can override these to handle other blockchains
  static getAbiCoder() {
    return defaultAbiCoder;
  }
  static getAddress(address) {
    return getAddress(address);
  }
  static getSighash(fragment) {
    return hexDataSlice(id(fragment.format()), 0, 4);
  }
  static getEventTopic(eventFragment) {
    return id(eventFragment.format());
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getFunction(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      for (const name in this.functions) {
        if (nameOrSignatureOrSighash === this.getSighash(name)) {
          return this.functions[name];
        }
      }
      logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.functions).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching function", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching functions", "name", name);
      }
      return this.functions[matching[0]];
    }
    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  // Find an event definition by any means necessary (unless it is ambiguous)
  getEvent(nameOrSignatureOrTopic) {
    if (isHexString(nameOrSignatureOrTopic)) {
      const topichash = nameOrSignatureOrTopic.toLowerCase();
      for (const name in this.events) {
        if (topichash === this.getEventTopic(name)) {
          return this.events[name];
        }
      }
      logger14.throwArgumentError("no matching event", "topichash", topichash);
    }
    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
      const name = nameOrSignatureOrTopic.trim();
      const matching = Object.keys(this.events).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching event", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching events", "name", name);
      }
      return this.events[matching[0]];
    }
    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
    if (!result) {
      logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    }
    return result;
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getError(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      const getSighash = getStatic(this.constructor, "getSighash");
      for (const name in this.errors) {
        const error = this.errors[name];
        if (nameOrSignatureOrSighash === getSighash(error)) {
          return this.errors[name];
        }
      }
      logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.errors).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching error", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching errors", "name", name);
      }
      return this.errors[matching[0]];
    }
    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  // Get the sighash (the bytes4 selector) used by Solidity to identify a function
  getSighash(fragment) {
    if (typeof fragment === "string") {
      try {
        fragment = this.getFunction(fragment);
      } catch (error) {
        try {
          fragment = this.getError(fragment);
        } catch (_) {
          throw error;
        }
      }
    }
    return getStatic(this.constructor, "getSighash")(fragment);
  }
  // Get the topic (the bytes32 hash) used by Solidity to identify an event
  getEventTopic(eventFragment) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    return getStatic(this.constructor, "getEventTopic")(eventFragment);
  }
  _decodeParams(params, data) {
    return this._abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this._abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    const bytes = arrayify(data);
    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
      logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
    }
    return this._decodeParams(fragment.inputs, bytes.slice(4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    return hexlify(concat([
      this.getSighash(fragment),
      this._encodeParams(fragment.inputs, values || [])
    ]));
  }
  // Decode the data for a function call (e.g. tx.data)
  decodeFunctionData(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    const bytes = arrayify(data);
    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
      logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
    }
    return this._decodeParams(functionFragment.inputs, bytes.slice(4));
  }
  // Encode the data for a function call (e.g. tx.data)
  encodeFunctionData(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(concat([
      this.getSighash(functionFragment),
      this._encodeParams(functionFragment.inputs, values || [])
    ]));
  }
  // Decode the result from a function call (e.g. from eth_call)
  decodeFunctionResult(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    let bytes = arrayify(data);
    let reason = null;
    let message = "";
    let errorArgs = null;
    let errorName = null;
    let errorSignature = null;
    switch (bytes.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(functionFragment.outputs, bytes);
        } catch (error) {
        }
        break;
      case 4: {
        const selector = hexlify(bytes.slice(0, 4));
        const builtin = BuiltinErrors[selector];
        if (builtin) {
          errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
          errorName = builtin.name;
          errorSignature = builtin.signature;
          if (builtin.reason) {
            reason = errorArgs[0];
          }
          if (errorName === "Error") {
            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
          } else if (errorName === "Panic") {
            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
          }
        } else {
          try {
            const error = this.getError(selector);
            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
            errorName = error.name;
            errorSignature = error.format();
          } catch (error) {
          }
        }
        break;
      }
    }
    return logger14.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
      method: functionFragment.format(),
      data: hexlify(data),
      errorArgs,
      errorName,
      errorSignature,
      reason
    });
  }
  // Encode the result for a function call (e.g. for eth_call)
  encodeFunctionResult(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
  }
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (values.length > eventFragment.inputs.length) {
      logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
        argument: "values",
        value: values
      });
    }
    let topics = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      }
      if (param.type.match(/^u?int/)) {
        value = BigNumber2.from(value).toHexString();
      }
      if (param.type === "address") {
        this._abiCoder.encode(["address"], [value]);
      }
      return hexZeroPad(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      let param = eventFragment.inputs[index];
      if (!param.indexed) {
        if (value != null) {
          logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        }
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    if (values.length !== eventFragment.inputs.length) {
      logger14.throwArgumentError("event arguments/values mismatch", "values", values);
    }
    eventFragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this._abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this._abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(eventFragment, data, topics) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (topics != null && !eventFragment.anonymous) {
      let topicHash = this.getEventTopic(eventFragment);
      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
        logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
      }
      topics = topics.slice(1);
    }
    let indexed = [];
    let nonIndexed = [];
    let dynamic = [];
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
    let result = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (resultIndexed == null) {
          result[index] = new Indexed({ _isIndexed: true, hash: null });
        } else if (dynamic[index]) {
          result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
        } else {
          try {
            result[index] = resultIndexed[indexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
      } else {
        try {
          result[index] = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          result[index] = error;
        }
      }
      if (param.name && result[param.name] == null) {
        const value = result[index];
        if (value instanceof Error) {
          Object.defineProperty(result, param.name, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            }
          });
        } else {
          result[param.name] = value;
        }
      }
    });
    for (let i = 0; i < result.length; i++) {
      const value = result[i];
      if (value instanceof Error) {
        Object.defineProperty(result, i, {
          enumerable: true,
          get: () => {
            throw wrapAccessError(`index ${i}`, value);
          }
        });
      }
    }
    return Object.freeze(result);
  }
  // Given a transaction, find the matching function fragment (if any) and
  // determine all its properties and call parameters
  parseTransaction(tx) {
    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new TransactionDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
      functionFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment),
      value: BigNumber2.from(tx.value || "0")
    });
  }
  // @TODO
  //parseCallResult(data: BytesLike): ??
  // Given an event log, find the matching event fragment (if any) and
  // determine all its properties and values
  parseLog(log) {
    let fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription({
      eventFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      topic: this.getEventTopic(fragment),
      args: this.decodeEventLog(fragment, log.data, log.topics)
    });
  }
  parseError(data) {
    const hexData = hexlify(data);
    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new ErrorDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
      errorFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment)
    });
  }
  /*
  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
      if (Interface.isInterface(value)) {
          return value;
      }
      if (typeof(value) === "string") {
          return new Interface(JSON.parse(value));
      }
      return new Interface(value);
  }
  */
  static isInterface(value) {
    return !!(value && value._isInterface);
  }
};

// node_modules/@moralisweb3/common-streams-utils/lib/esm/index.js
var __assign4 = function() {
  __assign4 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var AptosStream = (
  /** @class */
  function() {
    function AptosStream2(data) {
      this._data = AptosStream2.parse(data);
    }
    AptosStream2.create = function(data) {
      if (data instanceof AptosStream2) {
        return data;
      }
      return new AptosStream2(data);
    };
    AptosStream2.equals = function(valueA, valueB) {
      var aptosStreamA = AptosStream2.create(valueA);
      var aptosStreamB = AptosStream2.create(valueB);
      if (aptosStreamA.id !== aptosStreamB.id) {
        return false;
      }
      return true;
    };
    AptosStream2.prototype.equals = function(value) {
      return AptosStream2.equals(this, value);
    };
    AptosStream2.prototype.toJSON = function() {
      return __assign4(__assign4({}, this._data), { network: this.network.map(function(network) {
        return network.toJSON();
      }) });
    };
    AptosStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(AptosStream2.prototype, "network", {
      get: function() {
        return this._data.network;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "demo", {
      get: function() {
        return this._data.demo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeChanges", {
      get: function() {
        return this._data.includeChanges;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeEvents", {
      get: function() {
        return this._data.includeEvents;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includePayload", {
      get: function() {
        return this._data.includePayload;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "isErrorSince", {
      get: function() {
        return this._data.isErrorSince;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "events", {
      get: function() {
        return this._data.events;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "functions", {
      get: function() {
        return this._data.functions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "amountOfAddresses", {
      get: function() {
        return this._data.amountOfAddresses;
      },
      enumerable: false,
      configurable: true
    });
    AptosStream2.parse = function(data) {
      return __assign4(__assign4({}, data), { network: data.network.map(function(network) {
        return AptosNetwork.create(network);
      }) });
    };
    return AptosStream2;
  }()
);
var StreamSelector = (
  /** @class */
  function() {
    function StreamSelector2(data) {
      this._value = StreamSelector2.parse(data);
    }
    StreamSelector2.isSelectorString = function(selector) {
      if (selector instanceof StreamSelector2) {
        return true;
      }
      return selector.startsWith("$");
    };
    StreamSelector2.create = function(streamSelector) {
      if (streamSelector instanceof StreamSelector2) {
        return streamSelector;
      }
      return new StreamSelector2(streamSelector);
    };
    StreamSelector2.parse = function(streamSelector) {
      if (!StreamSelector2.isSelectorString(streamSelector)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid selector string provided"
        });
      }
      return streamSelector;
    };
    StreamSelector2.equals = function(valueA, valueB) {
      var streamSelectorA = StreamSelector2.create(valueA);
      var streamSelectorB = StreamSelector2.create(valueB);
      return streamSelectorA.value === streamSelectorB.value;
    };
    StreamSelector2.prototype.equals = function(streamSelector) {
      return StreamSelector2.equals(this, streamSelector);
    };
    StreamSelector2.prototype.format = function() {
      return this.value;
    };
    Object.defineProperty(StreamSelector2.prototype, "value", {
      /**
       * @returns the selector path
       * @example '$from'
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    StreamSelector2.prototype.toJSON = function() {
      return this.value;
    };
    return StreamSelector2;
  }()
);
var StreamTrigger = (
  /** @class */
  function() {
    function StreamTrigger2(data) {
      this._data = StreamTrigger2.parse(data);
    }
    StreamTrigger2.create = function(data) {
      if (data instanceof StreamTrigger2) {
        return data;
      }
      return new StreamTrigger2(data);
    };
    StreamTrigger2.parseSelectorOrAddress = function(input) {
      var result;
      if (!(input instanceof EvmAddress) && StreamSelector.isSelectorString(input)) {
        result = StreamSelector.create(input);
      } else {
        result = EvmAddress.create(input);
      }
      return result;
    };
    StreamTrigger2.equals = function(valueA, valueB) {
      var _a2, _b;
      var streamTriggerA = StreamTrigger2.create(valueA);
      var streamTriggerB = StreamTrigger2.create(valueB);
      if (streamTriggerA.type !== streamTriggerB.type) {
        return false;
      }
      if (streamTriggerA.contractAddress.toJSON() !== streamTriggerB.contractAddress.toJSON()) {
        return false;
      }
      if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {
        return false;
      }
      if (((_a2 = streamTriggerA.inputs) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {
        return false;
      }
      var triggerInputsA = streamTriggerA.inputs || [];
      var triggerInputsB = streamTriggerB.inputs || [];
      for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {
        if (triggerInputsA[i] !== triggerInputsB[i]) {
          return false;
        }
      }
      if (streamTriggerA.topic0 !== streamTriggerB.topic0) {
        return false;
      }
      if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {
        return false;
      }
      return true;
    };
    StreamTrigger2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggersA = valueA.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var triggersB = valueB.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var seenTriggersB = Array(triggersB.length).fill(false);
      var _loop_1 = function(i2) {
        var indexB = triggersB.findIndex(function(triggerB) {
          return triggerB.equals(triggersA[i2]);
        });
        if (indexB < 0) {
          return { value: false };
        }
        seenTriggersB[indexB] = true;
      };
      for (var i = 0; i < triggersA.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      if (seenTriggersB.some(function(seen) {
        return !seen;
      })) {
        return false;
      }
      return true;
    };
    StreamTrigger2.prototype.equals = function(value) {
      return StreamTrigger2.equals(this, value);
    };
    StreamTrigger2.prototype.toJSON = function() {
      var _a2 = this._data, contractAddress = _a2.contractAddress, callFrom = _a2.callFrom, data = __rest(_a2, ["contractAddress", "callFrom"]);
      return __assign4(__assign4({}, data), { contractAddress: contractAddress.toJSON(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.toJSON() });
    };
    StreamTrigger2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTrigger2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "contractAddress", {
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "functionAbi", {
      get: function() {
        return this._data.functionAbi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "inputs", {
      get: function() {
        return this._data.inputs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "callFrom", {
      get: function() {
        return this._data.callFrom;
      },
      enumerable: false,
      configurable: true
    });
    StreamTrigger2.parse = function(data) {
      var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, ["contractAddress", "callFrom"]);
      var contractAddress = StreamTrigger2.parseSelectorOrAddress(contractAddressInput);
      var callFrom = maybe(callFromInput, function(value) {
        return StreamTrigger2.parseSelectorOrAddress(value);
      });
      return __assign4(__assign4({}, input), { contractAddress, callFrom });
    };
    return StreamTrigger2;
  }()
);
var EvmStream = (
  /** @class */
  function() {
    function EvmStream2(data) {
      this._data = EvmStream2.parse(data);
    }
    EvmStream2.create = function(data) {
      if (data instanceof EvmStream2) {
        return data;
      }
      return new EvmStream2(data);
    };
    EvmStream2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmStreamA = EvmStream2.create(valueA);
      var evmStreamB = EvmStream2.create(valueB);
      if (evmStreamA.id !== evmStreamB.id) {
        return false;
      }
      if (((_a2 = evmStreamA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {
        return false;
      }
      return true;
    };
    EvmStream2.prototype.equals = function(value) {
      return EvmStream2.equals(this, value);
    };
    EvmStream2.prototype.toJSON = function() {
      var _a2 = this._data, chains = _a2.chains, triggers = _a2.triggers, data = __rest(_a2, ["chains", "triggers"]);
      return __assign4(__assign4({}, data), { chainIds: chains.map(function(chain) {
        return chain.toJSON();
      }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    EvmStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStream2.prototype, "chains", {
      get: function() {
        return this._data.chains;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "chainIds", {
      get: function() {
        return this._data.chains.map(function(chain) {
          return chain.hex;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeNativeTxs", {
      get: function() {
        return this._data.includeNativeTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeContractLogs", {
      get: function() {
        return this._data.includeContractLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeInternalTxs", {
      get: function() {
        return this._data.includeInternalTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeAllTxLogs", {
      get: function() {
        return this._data.includeAllTxLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "advancedOptions", {
      get: function() {
        return this._data.advancedOptions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "getNativeBalances", {
      get: function() {
        return this._data.getNativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStream2.parse = function(data) {
      var _a2, _b, _c, _d, _e;
      return __assign4(__assign4({}, data), { chains: data.chainIds.map(function(chainId) {
        return EvmChain.create(chainId);
      }), topic0: maybe(data.topic0), allAddresses: (_a2 = data.allAddresses) !== null && _a2 !== void 0 ? _a2 : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeAllTxLogs: (_d = data.includeAllTxLogs) !== null && _d !== void 0 ? _d : false, includeNativeTxs: (_e = data.includeNativeTxs) !== null && _e !== void 0 ? _e : false, advancedOptions: maybe(data.advancedOptions), abi: maybe(data.abi), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTrigger.create(trigger);
        });
      }), getNativeBalances: maybe(data.getNativeBalances) });
    };
    return EvmStream2;
  }()
);
var EvmStreamResultFormatter = (
  /** @class */
  function() {
    function EvmStreamResultFormatter2() {
    }
    EvmStreamResultFormatter2.toJSON = function(data) {
      return __assign4(__assign4({}, data), { erc20Transfers: data.erc20Transfers.map(function(value) {
        return value.toJSON();
      }), erc20Approvals: data.erc20Approvals.map(function(value) {
        return value.toJSON();
      }), nftTransfers: data.nftTransfers.map(function(value) {
        return value.toJSON();
      }), nftApprovals: {
        ERC721: data.nftApprovals.ERC721.map(function(value) {
          return value.toJSON();
        }),
        ERC1155: data.nftApprovals.ERC1155.map(function(value) {
          return value.toJSON();
        })
      }, ntfTokenApprovals: data.ntfTokenApprovals.map(function(value) {
        return value.toJSON();
      }), chain: data.chain.toJSON(), block: data.block.toJSON(), logs: data.logs.map(function(value) {
        return value.toJSON();
      }), txs: data.txs.map(function(value) {
        return value.toJSON();
      }), txsInternal: data.txsInternal.map(function(value) {
        return value.toJSON();
      }), abi: data.abi, nativeBalances: data.nativeBalances.map(function(nativeBalance) {
        return nativeBalance.toJSON();
      }) });
    };
    return EvmStreamResultFormatter2;
  }()
);
var StreamTriggerOutput = (
  /** @class */
  function() {
    function StreamTriggerOutput2(data) {
      this._data = StreamTriggerOutput2.parse(data);
    }
    StreamTriggerOutput2.create = function(data) {
      if (data instanceof StreamTriggerOutput2) {
        return data;
      }
      return new StreamTriggerOutput2(data);
    };
    StreamTriggerOutput2.equals = function(valueA, valueB) {
      var streamTriggerOutputA = StreamTriggerOutput2.create(valueA);
      var streamTriggerOutputB = StreamTriggerOutput2.create(valueB);
      return streamTriggerOutputA.name === streamTriggerOutputB.name && streamTriggerOutputA.value === streamTriggerOutputB.value;
    };
    StreamTriggerOutput2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggerOutputsA = valueA.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      var triggerOutputsB = valueB.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      triggerOutputsA.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      triggerOutputsB.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {
        if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {
          return false;
        }
      }
      return true;
    };
    StreamTriggerOutput2.prototype.equals = function(value) {
      return StreamTriggerOutput2.equals(this, value);
    };
    StreamTriggerOutput2.prototype.toJSON = function() {
      var data = __rest(this._data, []);
      return __assign4({}, data);
    };
    StreamTriggerOutput2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTriggerOutput2.prototype, "name", {
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTriggerOutput2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    StreamTriggerOutput2.parse = function(data) {
      return __assign4({}, data);
    };
    return StreamTriggerOutput2;
  }()
);
var StreamErc1155Approval = (
  /** @class */
  function() {
    function StreamErc1155Approval2(data) {
      this._data = StreamErc1155Approval2.parse(data);
    }
    StreamErc1155Approval2.create = function(data) {
      if (data instanceof StreamErc1155Approval2) {
        return data;
      }
      return new StreamErc1155Approval2(data);
    };
    StreamErc1155Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc1155Approval2.create(valueA);
      var evmNftApprovalB = StreamErc1155Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.account.equals(evmNftApprovalB.account)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (!evmNftApprovalA.operator.equals(evmNftApprovalB.operator)) {
        return false;
      }
      if (evmNftApprovalA.approved !== evmNftApprovalB.approved) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc1155Approval2.prototype.equals = function(value) {
      return StreamErc1155Approval2.equals(this, value);
    };
    StreamErc1155Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), account: data.account.toJSON(), operator: data.operator.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc1155Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc1155Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "account", {
      get: function() {
        return this._data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc1155Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, logIndex: +data.logIndex, account: EvmAddress.create(data.account), operator: EvmAddress.create(data.operator), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc1155Approval2;
  }()
);
var StreamErc20Approval = (
  /** @class */
  function() {
    function StreamErc20Approval2(data) {
      this._data = StreamErc20Approval2.parse(data);
    }
    StreamErc20Approval2.create = function(data) {
      if (data instanceof StreamErc20Approval2) {
        return data;
      }
      return new StreamErc20Approval2(data);
    };
    StreamErc20Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20ApprovalA = StreamErc20Approval2.create(valueA);
      var erc20ApprovalB = StreamErc20Approval2.create(valueB);
      if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {
        return false;
      }
      if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {
        return false;
      }
      if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {
        return false;
      }
      if (((_a2 = erc20ApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Approval2.prototype.equals = function(value) {
      return StreamErc20Approval2.equals(this, value);
    };
    StreamErc20Approval2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, owner = _a2.owner, spender = _a2.spender, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "owner", "spender", "contract", "value", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), owner: owner.toJSON(), spender: spender.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "spender", {
      get: function() {
        return this._data.spender;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, spender: EvmAddress.create(data.spender), owner: EvmAddress.create(data.owner), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Approval2;
  }()
);
var StreamErc20Transfer = (
  /** @class */
  function() {
    function StreamErc20Transfer2(data) {
      this._data = StreamErc20Transfer2.parse(data);
    }
    StreamErc20Transfer2.create = function(data) {
      if (data instanceof StreamErc20Transfer2) {
        return data;
      }
      return new StreamErc20Transfer2(data);
    };
    StreamErc20Transfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20TransferA = StreamErc20Transfer2.create(valueA);
      var erc20TransferB = StreamErc20Transfer2.create(valueB);
      if (!erc20TransferA.chain.equals(erc20TransferB.chain)) {
        return false;
      }
      if (erc20TransferA.transactionHash !== erc20TransferB.transactionHash) {
        return false;
      }
      if (erc20TransferA.logIndex !== erc20TransferB.logIndex) {
        return false;
      }
      if (((_a2 = erc20TransferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20TransferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20TransferA.triggers || [], erc20TransferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Transfer2.prototype.equals = function(value) {
      return StreamErc20Transfer2.equals(this, value);
    };
    StreamErc20Transfer2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, from = _a2.from, to = _a2.to, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "from", "to", "contract", "value", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), from: from.toJSON(), to: to.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Transfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Transfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Transfer2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, from: EvmAddress.create(data.from), to: EvmAddress.create(data.to), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Transfer2;
  }()
);
var StreamErc721Approval = (
  /** @class */
  function() {
    function StreamErc721Approval2(data) {
      this._data = StreamErc721Approval2.parse(data);
    }
    StreamErc721Approval2.create = function(data) {
      if (data instanceof StreamErc721Approval2) {
        return data;
      }
      return new StreamErc721Approval2(data);
    };
    StreamErc721Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc721Approval2.create(valueA);
      var evmNftApprovalB = StreamErc721Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {
        return false;
      }
      if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc721Approval2.prototype.equals = function(value) {
      return StreamErc721Approval2.equals(this, value);
    };
    StreamErc721Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), owner: data.owner.toJSON(), approved: data.approved.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc721Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc721Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc721Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, logIndex: +data.logIndex, owner: EvmAddress.create(data.owner), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, approved: EvmAddress.create(data.approved), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc721Approval2;
  }()
);
var StreamEvmInternalTransaction = (
  /** @class */
  function() {
    function StreamEvmInternalTransaction2(data) {
      this._data = StreamEvmInternalTransaction2.parse(data);
    }
    StreamEvmInternalTransaction2.create = function(data) {
      if (data instanceof StreamEvmInternalTransaction2) {
        return data;
      }
      return new StreamEvmInternalTransaction2(data);
    };
    StreamEvmInternalTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmInternalTransactionA = StreamEvmInternalTransaction2.create(valueA);
      var evmInternalTransactionB = StreamEvmInternalTransaction2.create(valueB);
      if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {
        return false;
      }
      if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {
        return false;
      }
      if (((_a2 = evmInternalTransactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmInternalTransaction2.prototype.equals = function(value) {
      return StreamEvmInternalTransaction2.equals(this, value);
    };
    StreamEvmInternalTransaction2.prototype.toJSON = function() {
      var _a2, _b, _c, _d, _e;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), from: (_a2 = data.from) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.toJSON(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmInternalTransaction2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), from: maybe(data.from, function(value) {
        return EvmAddress.create(value);
      }), to: maybe(data.to, function(value) {
        return EvmAddress.create(value);
      }), value: maybe(data.value, function(value) {
        return BigNumber.create(value);
      }), gas: maybe(data.gas, function(value) {
        return BigNumber.create(value);
      }), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamEvmInternalTransaction2;
  }()
);
var StreamEvmNftTransfer = (
  /** @class */
  function() {
    function StreamEvmNftTransfer2(data) {
      this._data = StreamEvmNftTransfer2.parse(data);
    }
    StreamEvmNftTransfer2.create = function(data) {
      if (data instanceof StreamEvmNftTransfer2) {
        return data;
      }
      return new StreamEvmNftTransfer2(data);
    };
    StreamEvmNftTransfer2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), to: EvmAddress.create(data.to), contract: EvmAddress.create(data.contract), from: EvmAddress.create(data.from), logIndex: +data.logIndex, operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmNftTransfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transferA = StreamEvmNftTransfer2.create(valueA);
      var transferB = StreamEvmNftTransfer2.create(valueB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.transactionHash !== transferB.transactionHash) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      if (!transferA.contract.equals(transferB.contract)) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (((_a2 = transferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmNftTransfer2.prototype.equals = function(value) {
      return StreamEvmNftTransfer2.equals(this, value);
    };
    StreamEvmNftTransfer2.prototype.toJSON = function() {
      var _a2, _b;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), from: data.from.toJSON(), to: data.to.toJSON(), contract: data.contract.toJSON(), operator: (_a2 = data.operator) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "amount", {
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmNftTransfer2;
  }()
);
var StreamEvmTransaction = (
  /** @class */
  function() {
    function StreamEvmTransaction2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransaction2.parse(data);
    }
    StreamEvmTransaction2.create = function(data) {
      if (data instanceof StreamEvmTransaction2) {
        return data;
      }
      return new StreamEvmTransaction2(data);
    };
    StreamEvmTransaction2.parse = function(data) {
      var signature = data.r != null && data.s != null && data.v != null ? EvmSignature.create({ r: data.r, s: data.s, v: data.v }) : void 0;
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), gas: maybe(data.gas, BigNumber.create), gasPrice: maybe(data.gasPrice, BigNumber.create), nonce: maybe(data.nonce, BigNumber.create), input: maybe(data.input), fromAddress: EvmAddress.create(data.fromAddress), toAddress: maybe(data.toAddress, function(address) {
        return EvmAddress.create(address);
      }), value: maybe(data.value, BigNumber.create), type: maybe(data.type, function(type) {
        return +type;
      }), receiptCumulativeGasUsed: maybe(data.receiptCumulativeGasUsed, BigNumber.create), receiptGasUsed: maybe(data.receiptGasUsed, BigNumber.create), receiptContractAddress: maybe(data.receiptContractAddress, function(address) {
        return EvmAddress.create(address);
      }), receiptRoot: maybe(data.receiptRoot), receiptStatus: maybe(data.receiptStatus, function(status) {
        return +status;
      }), signature, transactionIndex: +data.transactionIndex, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionA = StreamEvmTransaction2.create(valueA);
      var transactionB = StreamEvmTransaction2.create(valueB);
      if (!transactionA.chain.equals(transactionB.chain)) {
        return false;
      }
      if (transactionA.hash !== transactionB.hash) {
        return false;
      }
      if (((_a2 = transactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionA.triggers || [], transactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransaction2.prototype.equals = function(value) {
      return StreamEvmTransaction2.equals(this, value);
    };
    StreamEvmTransaction2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, gas = _a2.gas, gasPrice = _a2.gasPrice, nonce = _a2.nonce, fromAddress = _a2.fromAddress, toAddress = _a2.toAddress, value = _a2.value, receiptContractAddress = _a2.receiptContractAddress, receiptCumulativeGasUsed = _a2.receiptCumulativeGasUsed, receiptGasUsed = _a2.receiptGasUsed, signature = _a2.signature, triggers = _a2.triggers, data = __rest(_a2, ["chain", "gas", "gasPrice", "nonce", "fromAddress", "toAddress", "value", "receiptContractAddress", "receiptCumulativeGasUsed", "receiptGasUsed", "signature", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), gas: gas === null || gas === void 0 ? void 0 : gas.toString(), gasPrice: gasPrice === null || gasPrice === void 0 ? void 0 : gasPrice.toString(), nonce: nonce === null || nonce === void 0 ? void 0 : nonce.toString(), fromAddress: fromAddress.toJSON(), toAddress: toAddress === null || toAddress === void 0 ? void 0 : toAddress.toJSON(), value: value === null || value === void 0 ? void 0 : value.toString(), receiptCumulativeGasUsed: receiptCumulativeGasUsed === null || receiptCumulativeGasUsed === void 0 ? void 0 : receiptCumulativeGasUsed.toString(), receiptGasUsed: receiptGasUsed === null || receiptGasUsed === void 0 ? void 0 : receiptGasUsed.toString(), receiptContractAddress: receiptContractAddress === null || receiptContractAddress === void 0 ? void 0 : receiptContractAddress.toJSON(), r: signature === null || signature === void 0 ? void 0 : signature.r, s: signature === null || signature === void 0 ? void 0 : signature.s, v: signature === null || signature === void 0 ? void 0 : signature.v, triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "transactionIndex", {
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "fromAddress", {
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "toAddress", {
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptGasUsed", {
      get: function() {
        return this._data.receiptGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptCumulativeGasUsed", {
      get: function() {
        return this._data.receiptCumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptContractAddress", {
      get: function() {
        return this._data.receiptContractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "signature", {
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "r", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "s", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "v", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "hash", {
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gasPrice", {
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "nonce", {
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptRoot", {
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptStatus", {
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransaction2;
  }()
);
var StreamEvmTransactionLog = (
  /** @class */
  function() {
    function StreamEvmTransactionLog2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransactionLog2.parse(data);
    }
    StreamEvmTransactionLog2.create = function(data) {
      if (data instanceof StreamEvmTransactionLog2) {
        return data;
      }
      return new StreamEvmTransactionLog2(data);
    };
    StreamEvmTransactionLog2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), logIndex: +data.logIndex, address: EvmAddress.create(data.address), topic0: maybe(data.topic0), topic1: maybe(data.topic1), topic2: maybe(data.topic2), topic3: maybe(data.topic3), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransactionLog2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionLogA = StreamEvmTransactionLog2.create(valueA);
      var transactionLogB = StreamEvmTransactionLog2.create(valueB);
      if (!transactionLogA.chain.equals(transactionLogB.chain)) {
        return false;
      }
      if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {
        return false;
      }
      if (transactionLogA.logIndex !== transactionLogB.logIndex) {
        return false;
      }
      if (((_a2 = transactionLogA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransactionLog2.prototype.equals = function(value) {
      return StreamEvmTransactionLog2.equals(this, value);
    };
    StreamEvmTransactionLog2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, address = _a2.address, triggers = _a2.triggers, data = __rest(_a2, ["chain", "address", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), address: address.toJSON(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "data", {
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic1", {
      get: function() {
        return this._data.topic1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic2", {
      get: function() {
        return this._data.topic2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic3", {
      get: function() {
        return this._data.topic3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransactionLog2;
  }()
);
var StreamNativeBalance = (
  /** @class */
  function() {
    function StreamNativeBalance2(data) {
      this._data = StreamNativeBalance2.parse(data);
    }
    StreamNativeBalance2.create = function(data) {
      if (data instanceof StreamNativeBalance2) {
        return data;
      }
      return new StreamNativeBalance2(data);
    };
    StreamNativeBalance2.parse = function(input) {
      return {
        address: EvmAddress.create(input.address),
        balance: EvmNative.create(input.balance, "wei")
      };
    };
    StreamNativeBalance2.equals = function(valueA, valueB) {
      var nativeBalanceTriggerA = StreamNativeBalance2.create(valueA);
      var nativeBalanceTriggerB = StreamNativeBalance2.create(valueB);
      return nativeBalanceTriggerA.address.equals(nativeBalanceTriggerB.address) && nativeBalanceTriggerA.balance.equals(nativeBalanceTriggerB.balance);
    };
    StreamNativeBalance2.prototype.equals = function(value) {
      return StreamNativeBalance2.equals(this, value);
    };
    StreamNativeBalance2.prototype.toJSON = function() {
      var _a2 = this._data, address = _a2.address, balance = _a2.balance;
      return {
        address: address.toJSON(),
        balance: balance.format()
      };
    };
    StreamNativeBalance2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamNativeBalance2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamNativeBalance2.prototype, "balance", {
      get: function() {
        return this._data.balance;
      },
      enumerable: false,
      configurable: true
    });
    return StreamNativeBalance2;
  }()
);
var StreamEvmNftTokenApproval = (
  /** @class */
  function() {
    function StreamEvmNftTokenApproval2(data) {
      this.data = data;
    }
    StreamEvmNftTokenApproval2.create = function(data) {
      var chain = EvmChain.create(data.chain);
      return new StreamEvmNftTokenApproval2(__assign4(__assign4({}, data), { chain }));
    };
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "chain", {
      get: function() {
        return this.data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "contract", {
      get: function() {
        return this.data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "account", {
      get: function() {
        return this.data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "operator", {
      get: function() {
        return this.data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "approvedAll", {
      get: function() {
        return this.data.approvedAll;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenId", {
      get: function() {
        return this.data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "transactionHash", {
      get: function() {
        return this.data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "logIndex", {
      get: function() {
        return this.data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenContractType", {
      get: function() {
        return this.data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenName", {
      get: function() {
        return this.data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenSymbol", {
      get: function() {
        return this.data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmNftTokenApproval2.prototype.toJSON = function() {
      return {
        chain: this.chain.toJSON(),
        contract: this.contract,
        account: this.account,
        operator: this.operator,
        approvedAll: this.approvedAll,
        tokenId: this.tokenId,
        transactionHash: this.transactionHash,
        logIndex: this.logIndex,
        tokenContractType: this.tokenContractType,
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol
      };
    };
    StreamEvmNftTokenApproval2.prototype.format = function() {
      return this.toJSON();
    };
    StreamEvmNftTokenApproval2.prototype.equals = function(value) {
      return this.contract === value.contract && this.account === value.account && this.operator === value.operator && this.approvedAll === value.approvedAll && this.tokenId === value.tokenId && this.transactionHash === value.transactionHash && this.logIndex === value.logIndex && this.tokenContractType === value.tokenContractType && this.tokenName === value.tokenName && this.tokenSymbol === value.tokenSymbol;
    };
    return StreamEvmNftTokenApproval2;
  }()
);
var EvmStreamResultParser = (
  /** @class */
  function() {
    function EvmStreamResultParser2() {
    }
    EvmStreamResultParser2.parseChainId = function(value) {
      return value === "" ? EvmChain.ETHEREUM : EvmChain.create(value);
    };
    EvmStreamResultParser2.parseErc20Transfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamErc20Transfer.create(__assign4({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseErc20Approvals = function(value, chain) {
      return value.map(function(approval) {
        return StreamErc20Approval.create(__assign4({ chain }, approval));
      });
    };
    EvmStreamResultParser2.parseNftTransfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamEvmNftTransfer.create(__assign4({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseNftApprovals = function(value, chain) {
      return {
        ERC721: value.ERC721.map(function(approval) {
          return StreamErc721Approval.create(__assign4({ chain }, approval));
        }),
        ERC1155: value.ERC1155.map(function(approval) {
          return StreamErc1155Approval.create(__assign4({ chain }, approval));
        })
      };
    };
    EvmStreamResultParser2.parseNftTokenApprovals = function(values, chain) {
      return values.map(function(value) {
        return StreamEvmNftTokenApproval.create(__assign4({ chain }, value));
      });
    };
    EvmStreamResultParser2.parseBlock = function(value, chain) {
      if (value.number === "") {
        return EvmSimpleBlock.create({
          chain,
          number: 0,
          hash: "",
          timestamp: "0"
        });
      }
      return EvmSimpleBlock.create(__assign4({ chain }, value));
    };
    EvmStreamResultParser2.parseLogs = function(value, chain) {
      return value.map(function(log) {
        return StreamEvmTransactionLog.create(__assign4({ chain }, log));
      });
    };
    EvmStreamResultParser2.parseTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmTransaction.create(__assign4({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseInternalTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmInternalTransaction.create(__assign4({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseNativeBalances = function(value) {
      return value.map(function(nativeBalance) {
        return StreamNativeBalance.create(nativeBalance);
      });
    };
    var _a2;
    _a2 = EvmStreamResultParser2;
    EvmStreamResultParser2.parse = function(value) {
      var chain = _a2.parseChainId(value.chainId);
      return {
        chain,
        erc20Transfers: _a2.parseErc20Transfers(value.erc20Transfers, chain),
        erc20Approvals: _a2.parseErc20Approvals(value.erc20Approvals, chain),
        nftTransfers: _a2.parseNftTransfers(value.nftTransfers, chain),
        nftApprovals: _a2.parseNftApprovals(value.nftApprovals, chain),
        ntfTokenApprovals: _a2.parseNftTokenApprovals(value.nftTokenApprovals, chain),
        block: _a2.parseBlock(value.block, chain),
        logs: _a2.parseLogs(value.logs, chain),
        txs: _a2.parseTransactions(value.txs, chain),
        txsInternal: _a2.parseInternalTransactions(value.txsInternal, chain),
        abi: value.abi,
        retries: value.retries,
        confirmed: value.confirmed,
        streamId: value.streamId,
        tag: value.tag,
        nativeBalances: _a2.parseNativeBalances(value.nativeBalances)
      };
    };
    return EvmStreamResultParser2;
  }()
);
var EvmStreamResult = (
  /** @class */
  function() {
    function EvmStreamResult2(data) {
      this._data = EvmStreamResult2.parse(data);
    }
    EvmStreamResult2.create = function(data) {
      if (data instanceof EvmStreamResult2) {
        return data;
      }
      return new EvmStreamResult2(data);
    };
    EvmStreamResult2.equals = function(valueA, valueB) {
      var evmStreamResultA = EvmStreamResult2.create(valueA);
      var evmStreamResultB = EvmStreamResult2.create(valueB);
      if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {
        return false;
      }
      if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {
        return false;
      }
      if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {
        return false;
      }
      if (evmStreamResultA.tag !== evmStreamResultB.tag) {
        return false;
      }
      if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {
        return false;
      }
      return true;
    };
    EvmStreamResult2.prototype.equals = function(value) {
      return EvmStreamResult2.equals(this, value);
    };
    EvmStreamResult2.prototype.toJSON = function() {
      return EvmStreamResultFormatter.toJSON(this._data);
    };
    EvmStreamResult2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStreamResult2.prototype, "abiInterface", {
      get: function() {
        if (!this.abi || !this.abi.length) {
          return null;
        }
        return new Interface(this.abi);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "decodedLogs", {
      get: function() {
        var abiInterface = this.abiInterface;
        if (!abiInterface) {
          return [];
        }
        return this.logs.map(function(log) {
          return abiInterface.parseLog({
            data: log.data,
            topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty)
          });
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "streamId", {
      get: function() {
        return this._data.streamId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "block", {
      get: function() {
        return this._data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "retries", {
      get: function() {
        return this._data.retries;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "confirmed", {
      get: function() {
        return this._data.confirmed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Approvals", {
      get: function() {
        return this._data.erc20Approvals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Transfers", {
      get: function() {
        return this._data.erc20Transfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftApprovals", {
      /**
       * @deprecated Use `ntfTokenApprovals` instead. This property will be removed in the future.
       */
      get: function() {
        return this._data.nftApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "ntfTokenApprovals", {
      get: function() {
        return this._data.ntfTokenApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftTransfers", {
      get: function() {
        return this._data.nftTransfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txs", {
      get: function() {
        return this._data.txs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txsInternal", {
      get: function() {
        return this._data.txsInternal;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nativeBalances", {
      get: function() {
        return this._data.nativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStreamResult2.parse = function(data) {
      return EvmStreamResultParser.parse(data);
    };
    return EvmStreamResult2;
  }()
);
var isNotEmpty = function(value) {
  return value != null;
};
var addAddressAptosOperation = {
  method: "POST",
  name: "addAddressAptos",
  id: "aptosStreamsAddAddresses",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$o2,
  getRequestBody: getRequestBody$d,
  deserializeResponse: deserializeResponse$o2,
  serializeRequest: serializeRequest$o2,
  deserializeRequest: deserializeRequest$o2
};
function getRequestUrlParams$o2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$d(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$o2(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return __assign4(__assign4({}, data), { address: data.address ? typeof data.address === "string" ? AptosAddress.create(data.address) : data.address.map(function(address) {
    return AptosAddress.create(address);
  }) : void 0 });
}
function serializeRequest$o2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$o2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return AptosAddress.create(a);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var getStreamsAptosOperation = {
  method: "GET",
  name: "getStreamsAptos",
  id: "aptosStreamsGetAll",
  groupName: "aptosStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n2,
  deserializeResponse: deserializeResponse$n2,
  serializeRequest: serializeRequest$n2,
  deserializeRequest: deserializeRequest$n2
};
function getRequestUrlParams$n2(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$n2(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return AptosStream.create(stream);
  });
}
function serializeRequest$n2(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$n2(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamAptosOperation = {
  method: "GET",
  name: "getStreamAptos",
  id: "aptosStreamsGet",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$m2,
  deserializeResponse: deserializeResponse$m2,
  serializeRequest: serializeRequest$m2,
  deserializeRequest: deserializeRequest$m2
};
function getRequestUrlParams$m2(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$m2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$m2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$m2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamAptosOperation = {
  method: "PUT",
  name: "createStreamAptos",
  id: "aptosStreamsCreate",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos",
  bodyParamNames: [
    "webhookUrl",
    "tag",
    "functions",
    "events",
    "network",
    "includePayload",
    "includeEvents",
    "includeChanges",
    "description",
    "demo",
    "allAddresses"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$l2,
  getRequestBody: getRequestBody$c,
  deserializeResponse: deserializeResponse$l2,
  serializeRequest: serializeRequest$l2,
  deserializeRequest: deserializeRequest$l2
};
function getRequestUrlParams$l2() {
  return {};
}
function getRequestBody$c(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$l2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$l2(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$l2(jsonRequest) {
  return {
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var deleteAddressAptosOperation = {
  method: "DELETE",
  name: "deleteAddressAptos",
  id: "aptosStreamsDeleteAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$k2,
  getRequestBody: getRequestBody$b,
  deserializeResponse: deserializeResponse$k2,
  serializeRequest: serializeRequest$k2,
  deserializeRequest: deserializeRequest$k2
};
function getRequestUrlParams$k2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$b(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$k2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$k2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$k2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return AptosAddress.create(address);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var deleteStreamAptosOperation = {
  method: "DELETE",
  name: "deleteStreamAptos",
  id: "aptosStreamsDelete",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$j2,
  getRequestBody: getRequestBody$a,
  deserializeResponse: deserializeResponse$j2,
  serializeRequest: serializeRequest$j2,
  deserializeRequest: deserializeRequest$j2
};
function getRequestUrlParams$j2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$a() {
  return {};
}
function deserializeResponse$j2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$j2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$j2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesAptosOperation = {
  method: "GET",
  name: "getAddressesAptos",
  id: "aptosStreamsGetAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$i2,
  deserializeResponse: deserializeResponse$i2,
  serializeRequest: serializeRequest$i2,
  deserializeRequest: deserializeRequest$i2
};
function getRequestUrlParams$i2(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$i2(jsonResponse) {
  var _a2;
  return {
    result: ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(address) {
      return AptosAddress.create(address.address);
    }),
    total: jsonResponse.total
  };
}
function serializeRequest$i2(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$i2(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamAptosOperation = {
  method: "POST",
  name: "updateStreamAptos",
  id: "aptosStreamsUpdate",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [
    "allAddresses",
    "demo",
    "description",
    "includeChanges",
    "includeEvents",
    "includePayload",
    "network",
    "events",
    "functions",
    "tag",
    "webhookUrl"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$h2,
  getRequestBody: getRequestBody$9,
  deserializeResponse: deserializeResponse$h2,
  serializeRequest: serializeRequest$h2,
  deserializeRequest: deserializeRequest$h2
};
function getRequestUrlParams$h2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$9(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$h2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$h2(request) {
  return {
    id: request.id,
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$h2(jsonRequest) {
  return {
    id: jsonRequest.id,
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var updateStreamStatusAptosOperation = {
  method: "POST",
  name: "updateStreamStatusAptos",
  id: "aptosStreamsUpdateStatus",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$g2,
  getRequestBody: getRequestBody$8,
  deserializeResponse: deserializeResponse$g2,
  serializeRequest: serializeRequest$g2,
  deserializeRequest: deserializeRequest$g2
};
function getRequestUrlParams$g2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$8(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$g2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$g2(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$g2(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var addAddressEvmOperation = {
  method: "POST",
  name: "addAddressEvm",
  id: "AddAddressToStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$f2,
  getRequestBody: getRequestBody$7,
  deserializeResponse: deserializeResponse$f2,
  serializeRequest: serializeRequest$f2,
  deserializeRequest: deserializeRequest$f2
};
function getRequestUrlParams$f2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$7(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$f2(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return __assign4(__assign4({}, data), { address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
    return EvmAddress.create(address);
  }) : void 0 });
}
function serializeRequest$f2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$f2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return EvmAddress.create(a);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var getStreamsEvmOperation = {
  method: "GET",
  name: "getStreamsEvm",
  id: "GetStreams",
  groupName: "evmStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$e2,
  deserializeResponse: deserializeResponse$e2,
  serializeRequest: serializeRequest$e2,
  deserializeRequest: deserializeRequest$e2
};
function getRequestUrlParams$e2(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$e2(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return EvmStream.create(stream);
  });
}
function serializeRequest$e2(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$e2(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamEvmOperation = {
  method: "GET",
  name: "getStreamEvm",
  id: "GetStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$d2,
  deserializeResponse: deserializeResponse$d2,
  serializeRequest: serializeRequest$d2,
  deserializeRequest: deserializeRequest$d2
};
function getRequestUrlParams$d2(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$d2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$d2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$d2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamEvmOperation = {
  method: "PUT",
  name: "createStreamEvm",
  id: "CreateStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$c2,
  getRequestBody: getRequestBody$6,
  deserializeResponse: deserializeResponse$c2,
  serializeRequest: serializeRequest$c2,
  deserializeRequest: deserializeRequest$c2
};
function getRequestUrlParams$c2() {
  return {};
}
function getRequestBody$6(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeResponse$c2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$c2(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$c2(jsonRequest) {
  var _a2;
  return {
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: jsonRequest.chainIds.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_a2 = jsonRequest.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var deleteAddressEvmOperation = {
  method: "DELETE",
  name: "deleteAddressEvm",
  id: "DeleteAddressFromStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$b2,
  getRequestBody: getRequestBody$5,
  deserializeResponse: deserializeResponse$b2,
  serializeRequest: serializeRequest$b2,
  deserializeRequest: deserializeRequest$b2
};
function getRequestUrlParams$b2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$5(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$b2(jsonResponse) {
  var data = toCamelCase(jsonResponse);
  return {
    streamId: jsonResponse.streamId,
    address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
      return EvmAddress.create(address);
    }) : void 0
  };
}
function serializeRequest$b2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$b2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return EvmAddress.create(address);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var deleteStreamEvmOperation = {
  method: "DELETE",
  name: "deleteStreamEvm",
  id: "DeleteStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a2,
  getRequestBody: getRequestBody$4,
  deserializeResponse: deserializeResponse$a2,
  serializeRequest: serializeRequest$a2,
  deserializeRequest: deserializeRequest$a2
};
function getRequestUrlParams$a2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$4() {
  return {};
}
function deserializeResponse$a2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$a2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$a2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesEvmOperation = {
  method: "GET",
  name: "getAddressesEvm",
  id: "GetAddresses",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$92,
  deserializeResponse: deserializeResponse$92,
  serializeRequest: serializeRequest$92,
  deserializeRequest: deserializeRequest$92
};
function getRequestUrlParams$92(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$92(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return __assign4(__assign4({}, stream), { address: stream.address ? EvmAddress.create(stream.address) : void 0 });
  });
}
function serializeRequest$92(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$92(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamEvmOperation = {
  method: "POST",
  name: "updateStreamEvm",
  id: "UpdateStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$82,
  getRequestBody: getRequestBody$32,
  deserializeResponse: deserializeResponse$82,
  serializeRequest: serializeRequest$82,
  deserializeRequest: deserializeRequest$82
};
function getRequestUrlParams$82(request) {
  return {
    id: request.id
  };
}
function getRequestBody$32(request) {
  var _a2, _b;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
function deserializeResponse$82(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$82(request) {
  var _a2, _b;
  return {
    id: request.id,
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$82(jsonRequest) {
  var _a2, _b;
  return {
    id: jsonRequest.id,
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: (_a2 = jsonRequest.chainIds) === null || _a2 === void 0 ? void 0 : _a2.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_b = jsonRequest.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var updateStreamStatusEvmOperation = {
  method: "POST",
  name: "updateStreamStatusEvm",
  id: "UpdateStreamStatus",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$72,
  getRequestBody: getRequestBody$22,
  deserializeResponse: deserializeResponse$72,
  serializeRequest: serializeRequest$72,
  deserializeRequest: deserializeRequest$72
};
function getRequestUrlParams$72(request) {
  return {
    id: request.id
  };
}
function getRequestBody$22(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$72(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$72(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$72(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var getHistoryOperation = {
  method: "GET",
  name: "getHistory",
  id: "GetHistory",
  groupName: "history",
  urlPathPattern: "/history",
  urlSearchParamNames: ["excludePayload", "limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$62,
  deserializeResponse: deserializeResponse$62,
  serializeRequest: serializeRequest$62,
  deserializeRequest: deserializeRequest$62
};
function getRequestUrlParams$62(request) {
  return {
    excludePayload: maybe(request.excludePayload, String),
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$62(jsonResponse) {
  var _a2;
  return (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : [];
}
function serializeRequest$62(request) {
  return request;
}
function deserializeRequest$62(jsonRequest) {
  return jsonRequest;
}
var replayHistoryOperation = {
  method: "POST",
  name: "replayHistory",
  id: "ReplayHistory",
  groupName: "history",
  urlPathPattern: "/history/replay/{streamId}/{id}",
  urlPathParamNames: ["streamId", "id"],
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$52,
  getRequestBody: getRequestBody$12,
  deserializeResponse: deserializeResponse$52,
  serializeRequest: serializeRequest$52,
  deserializeRequest: deserializeRequest$52
};
function getRequestUrlParams$52(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function getRequestBody$12() {
  return {};
}
function deserializeResponse$52(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$52(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function deserializeRequest$52(jsonRequest) {
  return {
    streamId: jsonRequest.streamId,
    id: jsonRequest.id
  };
}
var getLogsOperation = {
  method: "GET",
  name: "getLogs",
  id: "GetLogs",
  groupName: "history",
  urlPathPattern: "/history/logs",
  urlSearchParamNames: ["limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$42,
  deserializeResponse: deserializeResponse$42,
  serializeRequest: serializeRequest$42,
  deserializeRequest: deserializeRequest$42
};
function getRequestUrlParams$42(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$42(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(result) {
    return __assign4(__assign4({}, result), { chain: EvmChain.create(result.chain) });
  });
}
function serializeRequest$42(request) {
  return request;
}
function deserializeRequest$42(jsonRequest) {
  return jsonRequest;
}
var getSettingsOperation = {
  method: "GET",
  name: "getSettings",
  id: "GetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  getRequestUrlParams: getRequestUrlParams$32,
  deserializeResponse: deserializeResponse$32,
  serializeRequest: serializeRequest$32,
  deserializeRequest: deserializeRequest$32
};
function getRequestUrlParams$32() {
  return {};
}
function deserializeResponse$32(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$32() {
  return void 0;
}
function deserializeRequest$32() {
  return {};
}
var setSettingsOperation = {
  method: "POST",
  name: "setSettings",
  id: "SetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  bodyParamNames: ["region"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$22,
  getRequestBody: getRequestBody2,
  deserializeResponse: deserializeResponse$22,
  serializeRequest: serializeRequest$22,
  deserializeRequest: deserializeRequest$22
};
function getRequestUrlParams$22() {
  return {};
}
function getRequestBody2(request) {
  return {
    region: request.region
  };
}
function deserializeResponse$22(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$22(request) {
  return {
    region: request.region
  };
}
function deserializeRequest$22(jsonRequest) {
  return {
    region: jsonRequest.region
  };
}
var getStatsOperation = {
  method: "GET",
  name: "getStats",
  id: "getStats",
  groupName: "streams",
  urlPathPattern: "/stats",
  getRequestUrlParams: getRequestUrlParams$12,
  deserializeResponse: deserializeResponse$12,
  serializeRequest: serializeRequest$12,
  deserializeRequest: deserializeRequest$12
};
function getRequestUrlParams$12() {
  return {};
}
function deserializeResponse$12(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$12() {
  return void 0;
}
function deserializeRequest$12() {
  return {};
}
var getStatsByIdOperation = {
  method: "GET",
  name: "getStatsById",
  id: "GetStatsByStreamId",
  groupName: "stats",
  urlPathPattern: "/stats/{streamId}",
  urlPathParamNames: ["streamId"],
  getRequestUrlParams: getRequestUrlParams2,
  deserializeResponse: deserializeResponse2,
  serializeRequest: serializeRequest2,
  deserializeRequest: deserializeRequest2
};
function getRequestUrlParams2(request) {
  return {
    streamId: request.streamId
  };
}
function deserializeResponse2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest2(request) {
  return request;
}
function deserializeRequest2(jsonRequest) {
  return jsonRequest;
}

// node_modules/@moralisweb3/streams/lib/esm/index.js
var import_ethereumjs_util = __toESM(require_dist5());

// node_modules/@ethersproject/sha2/lib.esm/index.js
var import_dist181 = __toESM(require_dist());
var import_dist182 = __toESM(require_dist2());
var import_dist183 = __toESM(require_dist3());

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
var import_dist178 = __toESM(require_dist());
var import_dist179 = __toESM(require_dist2());
var import_dist180 = __toESM(require_dist3());
var import_hash2 = __toESM(require_hash());

// node_modules/@ethersproject/sha2/lib.esm/types.js
var import_dist172 = __toESM(require_dist());
var import_dist173 = __toESM(require_dist2());
var import_dist174 = __toESM(require_dist3());
var SupportedAlgorithm;
(function(SupportedAlgorithm2) {
  SupportedAlgorithm2["sha256"] = "sha256";
  SupportedAlgorithm2["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));

// node_modules/@ethersproject/sha2/lib.esm/_version.js
var import_dist175 = __toESM(require_dist());
var import_dist176 = __toESM(require_dist2());
var import_dist177 = __toESM(require_dist3());
var version10 = "sha2/5.8.0";

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
var logger15 = new Logger(version10);
function sha256(data) {
  return "0x" + import_hash2.default.sha256().update(arrayify(data)).digest("hex");
}

// node_modules/@moralisweb3/streams/lib/esm/index.js
var extendStatics5 = function(d, b) {
  extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics5(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics5(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray3(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var StreamNetwork;
(function(StreamNetwork2) {
  StreamNetwork2["APTOS"] = "aptos";
  StreamNetwork2["EVM"] = "evm";
})(StreamNetwork || (StreamNetwork = {}));
var IncorrectNetworkError = (
  /** @class */
  function(_super) {
    __extends5(IncorrectNetworkError2, _super);
    function IncorrectNetworkError2(network) {
      return _super.call(this, {
        code: StreamErrorCode.INCORRECT_NETWORK,
        message: 'Incorrect network provided. Got "'.concat(network, '", Valid values are: ').concat(Object.values(StreamNetwork).map(function(value) {
          return '"'.concat(value, '"');
        }).join(", "))
      }) || this;
    }
    return IncorrectNetworkError2;
  }(MoralisStreamError)
);
var makeCreateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeCreateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeCreateStream = function(core2, baseUrl) {
  return function(createStreamOptions) {
    switch (createStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeCreateAptosStream(core2, baseUrl, createStreamOptions);
      case StreamNetwork.EVM:
        return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
      default:
        if (createStreamOptions.networkType === void 0) {
          return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
        }
        throw new IncorrectNetworkError(createStreamOptions.networkType);
    }
  };
};
var makeUpdateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStream = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStream(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var makeDeleteAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteStream = function(core2, baseUrl) {
  return function(deleteStreamOptions) {
    switch (deleteStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAptosStream(core2, baseUrl, deleteStreamOptions);
      case StreamNetwork.EVM:
        return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
      default:
        if (deleteStreamOptions.networkType === void 0) {
          return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
        }
        throw new IncorrectNetworkError(deleteStreamOptions.networkType);
    }
  };
};
var makeGetAptosStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreams = function(core2, baseUrl) {
  return function(getStreamsOptions) {
    switch (getStreamsOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream$1(core2, baseUrl, getStreamsOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
      default:
        if (getStreamsOptions.networkType === void 0) {
          return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
        }
        throw new IncorrectNetworkError(getStreamsOptions.networkType);
    }
  };
};
var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
var isHexStrict = function(hex) {
  return /^(-)?0x[0-9a-f]*$/i.test(hex);
};
var sha32 = function(value) {
  var bufferValue;
  if (isHexStrict(value) && /^0x/i.test(value.toString())) {
    bufferValue = (0, import_ethereumjs_util.toBuffer)(value);
  } else {
    bufferValue = Buffer.from(value, "utf-8");
  }
  var returnValue = (0, import_ethereumjs_util.bufferToHex)((0, import_ethereumjs_util.keccak256)(bufferValue));
  if (returnValue === SHA3_NULL_S) {
    return null;
  }
  return returnValue;
};
var StreamsConfig = {
  streamsSecret: {
    name: "streamsSecret",
    defaultValue: null
  }
};
var makeVerifySignature = function(config) {
  return function(_a2) {
    var body = _a2.body, signature = _a2.signature;
    var secret = config.get(StreamsConfig.streamsSecret);
    if (!secret) {
      secret = config.get(ApiUtilsConfig.apiKey);
    }
    if (!secret) {
      throw new MoralisStreamError({
        code: StreamErrorCode.GENERIC_STREAM_ERROR,
        message: "Unable to verify signature without an api key or streams secret"
      });
    }
    var generatedSignature = sha32(JSON.stringify(body) + secret);
    if (signature !== generatedSignature) {
      throw new MoralisStreamError({
        code: StreamErrorCode.INVALID_SIGNATURE,
        message: "Signature is not valid"
      });
    }
    return true;
  };
};
var makeAddAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeAddAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeAddAddress = function(core2, baseUrl) {
  return function(addAddressOptions) {
    switch (addAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeAddAddressAptosStream(core2, baseUrl, addAddressOptions);
      case StreamNetwork.EVM:
        return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
      default:
        if (addAddressOptions.networkType === void 0) {
          return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
        }
        throw new IncorrectNetworkError(addAddressOptions.networkType);
    }
  };
};
var makeUpdateAptosStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStreamStatus = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStreamStatus(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var hasAbis = function(webhookData) {
  if (!webhookData.abi || webhookData.abi.length < 1) {
    return false;
  }
  return true;
};
var isWebhook = function(webhookData) {
  if (typeof webhookData !== "object" || webhookData === null || !("logs" in webhookData)) {
    return false;
  }
  return true;
};
var CollectionNameBuilder = (
  /** @class */
  function() {
    function CollectionNameBuilder2() {
      this.cache = {};
      this.cacheLimit = 256;
    }
    CollectionNameBuilder2.prototype.build = function(tag) {
      var result = this.cache[tag];
      if (!result) {
        result = this.process(tag);
        if (this.cacheLimit > 0) {
          this.cache[tag] = result;
          this.cacheLimit--;
        }
      }
      return result;
    };
    CollectionNameBuilder2.prototype.process = function(tag) {
      var parts = tag.split(/[^a-zA-Z0-9_]/).filter(function(p) {
        return !!p;
      }).map(function(p) {
        return p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase();
      });
      if (parts.length < 1) {
        throw new Error('Cannot build table name from value "'.concat(tag, '"'));
      }
      return parts.join("");
    };
    return CollectionNameBuilder2;
  }()
);
var SimpleProcessor = (
  /** @class */
  function() {
    function SimpleProcessor2(collectionNameBuilder, documentBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.documentBuilder = documentBuilder;
    }
    SimpleProcessor2.prototype.process = function(items, batch) {
      var updates = [];
      if (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
          var item = items_1[_i];
          var document_1 = this.documentBuilder(item, batch.block, batch.confirmed, batch.chainId);
          updates.push({
            collectionName: this.collectionNameBuilder.build(batch.tag),
            document: document_1
          });
        }
      }
      return updates;
    };
    return SimpleProcessor2;
  }()
);
var Sha256 = (
  /** @class */
  function() {
    function Sha2562() {
    }
    Sha2562.hash = function(value) {
      var bytes = toUtf8Bytes(value);
      return sha256(bytes);
    };
    return Sha2562;
  }()
);
var LogRelatedId = (
  /** @class */
  function() {
    function LogRelatedId2() {
    }
    LogRelatedId2.create = function(chainId, transactionHash, logIndex) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash, ";").concat(logIndex));
    };
    return LogRelatedId2;
  }()
);
var TriggerItemsBuilder = (
  /** @class */
  function() {
    function TriggerItemsBuilder2() {
    }
    TriggerItemsBuilder2.build = function(triggers) {
      if (!triggers || triggers.length === 0) {
        return void 0;
      }
      return triggers.map(function(trigger) {
        return {
          name: String(trigger.name),
          value: convertValue(trigger.value)
        };
      });
    };
    return TriggerItemsBuilder2;
  }()
);
function convertValue(value) {
  var type = typeof value;
  if (type === "string" || type === "number" || type === "boolean") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(convertValue);
  }
  return String(value);
}
var Erc20TransferDocumentBuilder = (
  /** @class */
  function() {
    function Erc20TransferDocumentBuilder2() {
    }
    Erc20TransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        from: transfer.from,
        to: transfer.to,
        value: transfer.value,
        tokenDecimals: parseInt(transfer.tokenDecimals, 10),
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document2;
    };
    return Erc20TransferDocumentBuilder2;
  }()
);
var Erc20TransfersProcessor = (
  /** @class */
  function() {
    function Erc20TransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, Erc20TransferDocumentBuilder.build);
    }
    Erc20TransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.erc20Transfers, batch);
    };
    return Erc20TransfersProcessor2;
  }()
);
var Erc20ApprovalDocumentBuilder = (
  /** @class */
  function() {
    function Erc20ApprovalDocumentBuilder2() {
    }
    Erc20ApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        owner: approval.owner,
        spender: approval.spender,
        value: approval.value,
        tokenDecimals: parseInt(approval.tokenDecimals, 10),
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(approval.triggers)
      };
      return document2;
    };
    return Erc20ApprovalDocumentBuilder2;
  }()
);
var Erc20ApprovalsProcessor = (
  /** @class */
  function() {
    function Erc20ApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, Erc20ApprovalDocumentBuilder.build);
    }
    Erc20ApprovalsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.erc20Approvals, batch);
    };
    return Erc20ApprovalsProcessor2;
  }()
);
var TxRelatedId = (
  /** @class */
  function() {
    function TxRelatedId2() {
    }
    TxRelatedId2.create = function(chainId, transactionHash) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash));
    };
    return TxRelatedId2;
  }()
);
var InternalTxDocumentBuilder = (
  /** @class */
  function() {
    function InternalTxDocumentBuilder2() {
    }
    InternalTxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.transactionHash),
        hash: tx.transactionHash,
        chainId: chain,
        from: tx.from,
        to: tx.to,
        value: tx.value,
        gas: parseInt(tx.gas || "0", 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed
      };
    };
    return InternalTxDocumentBuilder2;
  }()
);
var InternalTxsProcessor = (
  /** @class */
  function() {
    function InternalTxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, InternalTxDocumentBuilder.build);
    }
    InternalTxsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.txsInternal, batch);
    };
    return InternalTxsProcessor2;
  }()
);
var LogDocumentValueFormatter = (
  /** @class */
  function() {
    function LogDocumentValueFormatter2() {
    }
    LogDocumentValueFormatter2.format = function(param) {
      switch (param.type) {
        case "string":
          return param.value;
        case "address":
          return param.value.toLowerCase();
        default:
          if (BigNumber2.isBigNumber(param.value)) {
            return param.value.toString();
          }
          return param.value.toString();
      }
    };
    return LogDocumentValueFormatter2;
  }()
);
var ParamNameResolver = (
  /** @class */
  function() {
    function ParamNameResolver2(restrictedNames) {
      this.restrictedNames = restrictedNames;
      this.usedNames = [];
    }
    ParamNameResolver2.prototype.iterate = function(object, callback) {
      var _this = this;
      var sortedNames = Object.keys(object).sort(function(a, b) {
        return a.localeCompare(b);
      });
      sortedNames.forEach(function(name) {
        var safeName = _this.resolve(name);
        callback(safeName, object[name]);
      });
    };
    ParamNameResolver2.prototype.resolve = function(name) {
      if (this.isUsed(name)) {
        do {
          name = "_".concat(name);
        } while (this.isUsed(name));
      }
      this.usedNames.push(name);
      return name;
    };
    ParamNameResolver2.prototype.isUsed = function(name) {
      return this.restrictedNames.includes(name) || this.usedNames.includes(name);
    };
    return ParamNameResolver2;
  }()
);
var paramNames = [
  "id",
  "name",
  "logIndex",
  "transactionHash",
  "address",
  "blockHash",
  "blockTimestamp",
  "blockNumber",
  "confirmed",
  "chainId",
  "triggers"
];
var restrictedParamNames = __spreadArray3(__spreadArray3([], paramNames, true), [
  // Some extra names
  "_id",
  "uniqueId",
  "updatedAt",
  "createdAt",
  "user",
  "userId"
], false);
var LogDocumentBuilder = (
  /** @class */
  function() {
    function LogDocumentBuilder2() {
    }
    LogDocumentBuilder2.build = function(log, parsedLog, block, confirmed, chainId) {
      var nameResolver = new ParamNameResolver(restrictedParamNames);
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, log.transactionHash, log.logIndex),
        name: parsedLog.name,
        logIndex: parseInt(log.logIndex, 10),
        transactionHash: log.transactionHash,
        address: log.address,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(log.triggers)
      };
      nameResolver.iterate(parsedLog.params, function(safeParamName, paramValue) {
        document2[safeParamName] = LogDocumentValueFormatter.format(paramValue);
      });
      return document2;
    };
    return LogDocumentBuilder2;
  }()
);
var LogParser = (
  /** @class */
  function() {
    function LogParser2(abiItems) {
      this.abiInterface = new Interface(abiItems);
    }
    LogParser2.prototype.read = function(log) {
      var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function(t) {
        return t !== null;
      });
      var eventFragment = this.abiInterface.getEvent(topics[0]);
      var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);
      var params = {};
      eventFragment.inputs.forEach(function(input, index) {
        var type = input.type, name = input.name;
        var value = args[index];
        if (value instanceof Indexed) {
          value = value.hash;
        }
        params[name] = {
          type,
          value
        };
      });
      return {
        name: eventFragment.name,
        params
      };
    };
    return LogParser2;
  }()
);
var LogsProcessor = (
  /** @class */
  function() {
    function LogsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
    }
    LogsProcessor2.prototype.process = function(batch) {
      var updates = [];
      if (batch.abi.length < 1) {
        return updates;
      }
      var logParser = new LogParser(batch.abi);
      for (var _i = 0, _a2 = batch.logs; _i < _a2.length; _i++) {
        var log = _a2[_i];
        var logParams = logParser.read(log);
        var document_1 = LogDocumentBuilder.build(log, logParams, batch.block, batch.confirmed, batch.chainId);
        updates.push({
          collectionName: this.collectionNameBuilder.build(batch.tag),
          document: document_1
        });
      }
      return updates;
    };
    return LogsProcessor2;
  }()
);
var NftTransferDocumentBuilder = (
  /** @class */
  function() {
    function NftTransferDocumentBuilder2() {
    }
    NftTransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        operator: transfer.operator,
        from: transfer.from,
        to: transfer.to,
        tokenId: transfer.tokenId,
        amount: transfer.amount,
        tokenContractType: transfer.tokenContractType,
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document2;
    };
    return NftTransferDocumentBuilder2;
  }()
);
var NftTransfersProcessor = (
  /** @class */
  function() {
    function NftTransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftTransferDocumentBuilder.build);
    }
    NftTransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTransfers, batch);
    };
    return NftTransfersProcessor2;
  }()
);
var NftApprovalDocumentBuilder = (
  /** @class */
  function() {
    function NftApprovalDocumentBuilder2() {
    }
    NftApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        operator: approval.operator,
        account: approval.account,
        approvedAll: approval.approvedAll,
        tokenId: approval.tokenId,
        tokenContractType: approval.tokenContractType,
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain
      };
      return document2;
    };
    return NftApprovalDocumentBuilder2;
  }()
);
var NftApprovalsProcessor = (
  /** @class */
  function() {
    function NftApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftApprovalDocumentBuilder.build);
    }
    NftApprovalsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTokenApprovals, batch);
    };
    return NftApprovalsProcessor2;
  }()
);
var TxDocumentBuilder = (
  /** @class */
  function() {
    function TxDocumentBuilder2() {
    }
    TxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.hash),
        hash: tx.hash,
        chainId: chain,
        transactionIndex: parseInt(tx.transactionIndex, 10),
        gas: parseInt(tx.gas, 10),
        gasPrice: parseInt(tx.gasPrice, 10),
        nonce: parseInt(tx.nonce, 10),
        fromAddress: tx.fromAddress,
        toAddress: tx.toAddress,
        value: tx.value || "0",
        input: tx.input,
        type: parseInt(tx.type, 10),
        receiptStatus: parseInt(tx.receiptStatus, 10),
        receiptGasUsed: parseInt(tx.receiptGasUsed, 10),
        receiptCumulativeGasUsed: parseInt(tx.receiptCumulativeGasUsed, 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        triggers: TriggerItemsBuilder.build(tx.triggers)
      };
    };
    return TxDocumentBuilder2;
  }()
);
var TxsProcessor = (
  /** @class */
  function() {
    function TxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, TxDocumentBuilder.build);
    }
    TxsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.txs, batch);
    };
    return TxsProcessor2;
  }()
);
var BatchProcessor = (
  /** @class */
  function() {
    function BatchProcessor2(erc20ApprovalsProcessor, erc20TransfersProcessor, internalTxsProcessor, logsProcessor, nftApprovalsProcessor, nftTransfersProcessor, txsProcessor) {
      this.erc20ApprovalsProcessor = erc20ApprovalsProcessor;
      this.erc20TransfersProcessor = erc20TransfersProcessor;
      this.internalTxsProcessor = internalTxsProcessor;
      this.logsProcessor = logsProcessor;
      this.nftApprovalsProcessor = nftApprovalsProcessor;
      this.nftTransfersProcessor = nftTransfersProcessor;
      this.txsProcessor = txsProcessor;
    }
    BatchProcessor2.create = function() {
      var nameBuilder = new CollectionNameBuilder();
      return new BatchProcessor2(new Erc20ApprovalsProcessor(nameBuilder), new Erc20TransfersProcessor(nameBuilder), new InternalTxsProcessor(nameBuilder), new LogsProcessor(nameBuilder), new NftApprovalsProcessor(nameBuilder), new NftTransfersProcessor(nameBuilder), new TxsProcessor(nameBuilder));
    };
    BatchProcessor2.prototype.process = function(batch) {
      var _this = this;
      return {
        erc20Approvals: function() {
          return _this.erc20ApprovalsProcessor.process(batch);
        },
        erc20Transfers: function() {
          return _this.erc20TransfersProcessor.process(batch);
        },
        internalTxs: function() {
          return _this.internalTxsProcessor.process(batch);
        },
        logs: function() {
          return _this.logsProcessor.process(batch);
        },
        nftApprovals: function() {
          return _this.nftApprovalsProcessor.process(batch);
        },
        nftTransfers: function() {
          return _this.nftTransfersProcessor.process(batch);
        },
        txs: function() {
          return _this.txsProcessor.process(batch);
        }
      };
    };
    return BatchProcessor2;
  }()
);
var parseLog = function(webhookData) {
  if (!isWebhook(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No logs found in the webhook, or invalid webhook provided."
    });
  }
  if (!hasAbis(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No abis found in the provided webhook."
    });
  }
  var logs = webhookData.logs, abi = webhookData.abi;
  var decodedLogs = [];
  logs.forEach(function(currentLog) {
    var params = new LogParser(abi).read(currentLog).params;
    var decodedLog = {};
    for (var key in params) {
      if (Object.prototype.hasOwnProperty.call(params, key)) {
        var element = params[key];
        decodedLog[key] = element.value;
      }
    }
    decodedLogs.push(decodedLog);
  });
  return decodedLogs;
};
var makeGetAptosAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetAddresses = function(core2, baseUrl) {
  return function(getAddressesOptions) {
    switch (getAddressesOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosAddresses(core2, baseUrl, getAddressesOptions);
      case StreamNetwork.EVM:
        return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
      default:
        if (getAddressesOptions.networkType === void 0) {
          return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
        }
        throw new IncorrectNetworkError(getAddressesOptions.networkType);
    }
  };
};
var makeDeleteAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddress = function(core2, baseUrl) {
  return function(deleteAddressOptions) {
    switch (deleteAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAddressAptosStream(core2, baseUrl, deleteAddressOptions);
      case StreamNetwork.EVM:
        return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
      default:
        if (deleteAddressOptions.networkType === void 0) {
          return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
        }
        throw new IncorrectNetworkError(deleteAddressOptions.networkType);
    }
  };
};
var makeGetAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreamById = function(core2, baseUrl) {
  return function(getStreamOptions) {
    if (!getStreamOptions.networkType && getStreamOptions.network) {
      getStreamOptions.networkType = getStreamOptions.network;
    }
    switch (getStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream(core2, baseUrl, getStreamOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream(core2, baseUrl, getStreamOptions);
      default:
        if (getStreamOptions.networkType === void 0) {
          return makeGetEvmStream(core2, baseUrl, getStreamOptions);
        }
        throw new IncorrectNetworkError(getStreamOptions.networkType);
    }
  };
};
var StreamsConfigSetup = (
  /** @class */
  function() {
    function StreamsConfigSetup2() {
    }
    StreamsConfigSetup2.register = function(config) {
      config.registerKey(StreamsConfig.streamsSecret);
    };
    return StreamsConfigSetup2;
  }()
);
var BASE_URL = "https://api.moralis-streams.com";
var Streams = (
  /** @class */
  function(_super) {
    __extends5(Streams2, _super);
    function Streams2(core2) {
      var _this = _super.call(this, Streams2.moduleName, core2, function() {
        return BASE_URL;
      }) || this;
      _this.add = makeCreateStream(_this.core, BASE_URL);
      _this.update = makeUpdateStream(_this.core, BASE_URL);
      _this.delete = makeDeleteStream(_this.core, BASE_URL);
      _this.getAll = makeGetStreams(_this.core, BASE_URL);
      _this.getById = makeGetStreamById(_this.core, BASE_URL);
      _this.updateStatus = makeUpdateStreamStatus(_this.core, BASE_URL);
      _this.addAddress = makeAddAddress(_this.core, BASE_URL);
      _this.getAddresses = makeGetAddresses(_this.core, BASE_URL);
      _this.deleteAddress = makeDeleteAddress(_this.core, BASE_URL);
      _this.getHistory = _this.createPaginatedFetcher(getHistoryOperation);
      _this.getLogs = _this.createPaginatedFetcher(getLogsOperation);
      _this.retry = _this.createFetcher(replayHistoryOperation);
      _this._getStats = _this.createFetcher(getStatsOperation);
      _this.getStats = function() {
        return _this._getStats({});
      };
      _this.getStatsById = _this.createFetcher(getStatsByIdOperation);
      _this.setSettings = _this.createFetcher(setSettingsOperation);
      _this._readSettings = _this.createFetcher(getSettingsOperation);
      _this.readSettings = function() {
        return _this._readSettings({});
      };
      _this.verifySignature = function(options) {
        return makeVerifySignature(_this.core.config)(options);
      };
      _this.parsedLogs = function(webhookData) {
        return parseLog(webhookData);
      };
      return _this;
    }
    Streams2.create = function(core2) {
      return new Streams2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Streams2.prototype.setup = function() {
      StreamsConfigSetup.register(this.core.config);
    };
    Streams2.prototype.start = function() {
    };
    Streams2.prototype.createFetcher = function(operation) {
      return new OperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.prototype.createPaginatedFetcher = function(operation) {
      return new PaginatedOperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.moduleName = "streams";
    return Streams2;
  }(ApiModule)
);

// node_modules/@moralisweb3/auth/lib/esm/index.js
var import_dist193 = __toESM(require_dist());
var import_dist194 = __toESM(require_dist2());
var import_dist195 = __toESM(require_dist3());

// node_modules/@moralisweb3/common-sol-utils/lib/esm/index.js
var import_dist187 = __toESM(require_dist());
var import_dist188 = __toESM(require_dist2());
var import_dist189 = __toESM(require_dist3());
var import_bn2 = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
init_dist();
var PUBLIC_KEY_LENGTH = 32;
function isPublicKeyData(value) {
  return value._bn !== void 0;
}
var PublicKey = (
  /** @class */
  function() {
    function PublicKey2(value) {
      if (isPublicKeyData(value)) {
        this._bn = value._bn;
      } else {
        if (typeof value === "string") {
          var decoded = import_bs58.default.decode(value);
          if (decoded.length !== PUBLIC_KEY_LENGTH) {
            throw new Error("Invalid public key input");
          }
          this._bn = new import_bn2.default(decoded);
        } else {
          this._bn = new import_bn2.default(value);
        }
        if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {
          throw new Error("Invalid public key input");
        }
      }
    }
    PublicKey2.prototype.toBase58 = function() {
      return import_bs58.default.encode(this.toBytes());
    };
    PublicKey2.prototype.toBytes = function() {
      var buf = this.toBuffer();
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    };
    PublicKey2.prototype.toBuffer = function() {
      var b = this._bn.toArrayLike(Buffer$1);
      if (b.length === PUBLIC_KEY_LENGTH) {
        return b;
      }
      var zeroPad2 = Buffer$1.alloc(32);
      b.copy(zeroPad2, 32 - b.length);
      return zeroPad2;
    };
    Object.defineProperty(PublicKey2.prototype, Symbol.toStringTag, {
      get: function() {
        return "PublicKey(".concat(this.toString(), ")");
      },
      enumerable: false,
      configurable: true
    });
    PublicKey2.prototype.toString = function() {
      return this.toBase58();
    };
    return PublicKey2;
  }()
);
var SolAddress = (
  /** @class */
  function() {
    function SolAddress2(address) {
      this.address = address;
    }
    SolAddress2.create = function(address) {
      return address instanceof SolAddress2 ? address : new SolAddress2(SolAddress2.parse(address));
    };
    SolAddress2.fromJSON = function(address) {
      return SolAddress2.create(address);
    };
    SolAddress2.parse = function(address) {
      try {
        var publicKey = new PublicKey(address);
        return publicKey.toBase58();
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid Solana address provided: ".concat(address),
          cause: e
        });
      }
    };
    SolAddress2.prototype.format = function() {
      return this.address;
    };
    SolAddress2.prototype.equals = function(address) {
      return this.address === SolAddress2.create(address).address;
    };
    SolAddress2.prototype.toString = function() {
      return this.address;
    };
    SolAddress2.prototype.toJSON = function() {
      return this.address;
    };
    return SolAddress2;
  }()
);
var solNetworkNames = ["mainnet", "devnet"];
var SolNetwork = (
  /** @class */
  function() {
    function SolNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(SolNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    SolNetwork2.create = function(network) {
      return network instanceof SolNetwork2 ? network : new SolNetwork2(SolNetwork2.parse(network));
    };
    SolNetwork2.fromJSON = function(network) {
      return SolNetwork2.create(network);
    };
    SolNetwork2.parse = function(network) {
      if (typeof network === "string") {
        if (!solNetworkNames.includes(network)) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Solana network is not supported: ".concat(network)
          });
        }
      }
      return network;
    };
    SolNetwork2.prototype.format = function() {
      return this.network;
    };
    SolNetwork2.prototype.equals = function(network) {
      return this.network === SolNetwork2.create(network).network;
    };
    SolNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    SolNetwork2.prototype.toString = function() {
      return this.network;
    };
    return SolNetwork2;
  }()
);
var unitToDecimals3 = {
  solana: 9,
  lamports: 0
};
var SolNative = (
  /** @class */
  function() {
    function SolNative2(rawValue) {
      this.rawValue = rawValue;
    }
    SolNative2.create = function(value, unit) {
      if (value instanceof SolNative2) {
        return value;
      }
      return new SolNative2(SolNative2.parse(value, unit));
    };
    SolNative2.fromJSON = function(json) {
      return SolNative2.create(json, "lamports");
    };
    SolNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "solana";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals3[unit] !== void 0) {
        decimal = unitToDecimals3[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Solana unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    SolNative2.equals = function(valueA, valueB) {
      var solNativeA = SolNative2.create(valueA);
      var solNativeB = SolNative2.create(valueB);
      return solNativeA.lamports === solNativeB.lamports;
    };
    SolNative2.prototype.equals = function(value) {
      return SolNative2.equals(this, value);
    };
    SolNative2.prototype.format = function() {
      return this.lamports;
    };
    SolNative2.prototype.toJSON = function() {
      return this.lamports;
    };
    SolNative2.prototype.toString = function() {
      return this.lamports;
    };
    Object.defineProperty(SolNative2.prototype, "value", {
      /**
       * @returns the value of the SolNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "solana", {
      /**
       * Converts the SolNative to a solana unit.
       * @returns the value of the SolNative as a solana string
       * @example `native.solana`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals3["solana"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "lamports", {
      /**
       * Converts the SolNative to a string.
       * @returns the value of the SolNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return SolNative2;
  }()
);
var SolSPLNativePrice = (
  /** @class */
  function() {
    function SolSPLNativePrice2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
    }
    SolSPLNativePrice2.create = function(input) {
      if (input instanceof SolSPLNativePrice2) {
        return input;
      }
      return new SolSPLNativePrice2(input);
    };
    SolSPLNativePrice2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol
      };
      return SolSPLNativePrice2.create(input);
    };
    SolSPLNativePrice2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol
      };
    };
    return SolSPLNativePrice2;
  }()
);
var SolSPLTokenPrice = (
  /** @class */
  function() {
    function SolSPLTokenPrice2(input) {
      this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.exchangeAddress = input.exchangeAddress ? SolAddress.create(input.exchangeAddress) : void 0;
      this.exchangeName = input.exchangeName;
    }
    SolSPLTokenPrice2.create = function(input) {
      if (input instanceof SolSPLTokenPrice2) {
        return input;
      }
      return new SolSPLTokenPrice2(input);
    };
    SolSPLTokenPrice2.fromJSON = function(json) {
      var input = {
        nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        exchangeAddress: json.exchangeAddress ? SolAddress.fromJSON(json.exchangeAddress) : void 0,
        exchangeName: json.exchangeName
      };
      return SolSPLTokenPrice2.create(input);
    };
    SolSPLTokenPrice2.prototype.toJSON = function() {
      return {
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        exchangeAddress: this.exchangeAddress ? this.exchangeAddress.toJSON() : void 0,
        exchangeName: this.exchangeName
      };
    };
    return SolSPLTokenPrice2;
  }()
);
var GetTokenPriceOperation = {
  operationId: "getTokenPrice",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/price",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolSPLTokenPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolMetaplexToken = (
  /** @class */
  function() {
    function SolMetaplexToken2(input) {
      this.metadataUri = input.metadataUri;
      this.masterEdition = input.masterEdition;
      this.isMutable = input.isMutable;
      this.primarySaleHappened = input.primarySaleHappened;
      this.sellerFeeBasisPoints = input.sellerFeeBasisPoints;
      this.updateAuthority = input.updateAuthority;
    }
    SolMetaplexToken2.create = function(input) {
      if (input instanceof SolMetaplexToken2) {
        return input;
      }
      return new SolMetaplexToken2(input);
    };
    SolMetaplexToken2.fromJSON = function(json) {
      var input = {
        metadataUri: json.metadataUri,
        masterEdition: json.masterEdition,
        isMutable: json.isMutable,
        primarySaleHappened: json.primarySaleHappened,
        sellerFeeBasisPoints: json.sellerFeeBasisPoints,
        updateAuthority: json.updateAuthority
      };
      return SolMetaplexToken2.create(input);
    };
    SolMetaplexToken2.prototype.toJSON = function() {
      return {
        metadataUri: this.metadataUri,
        masterEdition: this.masterEdition,
        isMutable: this.isMutable,
        primarySaleHappened: this.primarySaleHappened,
        sellerFeeBasisPoints: this.sellerFeeBasisPoints,
        updateAuthority: this.updateAuthority
      };
    };
    return SolMetaplexToken2;
  }()
);
var SolTokenMetadata = (
  /** @class */
  function() {
    function SolTokenMetadata2(input) {
      this.mint = input.mint;
      this.standard = input.standard;
      this.name = input.name;
      this.symbol = input.symbol;
      this.metaplex = SolMetaplexToken.create(input.metaplex);
    }
    SolTokenMetadata2.create = function(input) {
      if (input instanceof SolTokenMetadata2) {
        return input;
      }
      return new SolTokenMetadata2(input);
    };
    SolTokenMetadata2.fromJSON = function(json) {
      var input = {
        mint: json.mint,
        standard: json.standard,
        name: json.name,
        symbol: json.symbol,
        metaplex: SolMetaplexToken.fromJSON(json.metaplex)
      };
      return SolTokenMetadata2.create(input);
    };
    SolTokenMetadata2.prototype.toJSON = function() {
      return {
        mint: this.mint,
        standard: this.standard,
        name: this.name,
        symbol: this.symbol,
        metaplex: this.metaplex.toJSON()
      };
    };
    return SolTokenMetadata2;
  }()
);
var GetTokenMetadataOperation = {
  operationId: "getTokenMetadata",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/metadata",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolTokenMetadata.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolGetTokenPriceNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenPriceNetworkEnum2() {
    }
    SolGetTokenPriceNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenPriceNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenPriceNetworkEnum2;
  }()
);
var SolGetTokenMetadataNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenMetadataNetworkEnum2() {
    }
    SolGetTokenMetadataNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenMetadataNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenMetadataNetworkEnum2;
  }()
);
var extendStatics6 = function(d, b) {
  extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics6(d, b);
};
function __extends6(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics6(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __spreadArray4(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var CommonSolUtilsConfig = {
  defaultSolNetwork: {
    name: "defaultSolNetwork",
    defaultValue: "mainnet"
  }
};
var CommonSolUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonSolUtilsConfigSetup2() {
    }
    CommonSolUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);
    };
    return CommonSolUtilsConfigSetup2;
  }()
);
var CommonSolUtils = (
  /** @class */
  function(_super) {
    __extends6(CommonSolUtils2, _super);
    function CommonSolUtils2(core2) {
      return _super.call(this, CommonSolUtils2.moduleName, core2) || this;
    }
    CommonSolUtils2.create = function(core2) {
      return new CommonSolUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonSolUtils2.prototype.setup = function() {
      CommonSolUtilsConfigSetup.register(this.core.config);
    };
    CommonSolUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonSolUtils2.prototype, "SolAddress", {
      get: function() {
        return SolAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNative", {
      get: function() {
        return SolNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNetwork", {
      get: function() {
        return SolNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonSolUtils2.moduleName = "solUtils";
    return CommonSolUtils2;
  }(Module)
);
var SolNetworkResolver = (
  /** @class */
  function() {
    function SolNetworkResolver2() {
    }
    SolNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonSolUtilsConfig.defaultSolNetwork);
      }
      return SolNetwork.create(network).network;
    };
    return SolNetworkResolver2;
  }()
);
var getBalanceOperation = {
  method: "GET",
  name: "getBalance",
  id: "balance",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/balance",
  getRequestUrlParams: getRequestUrlParams$53,
  deserializeResponse: deserializeResponse$53,
  serializeRequest: serializeRequest$53,
  deserializeRequest: deserializeRequest$53
};
function getRequestUrlParams$53(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$53(jsonResponse) {
  return SolNative.create(jsonResponse.lamports);
}
function serializeRequest$53(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$53(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTsOperation = {
  method: "GET",
  name: "getNFTs",
  id: "getNFTs",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/nft",
  getRequestUrlParams: getRequestUrlParams$43,
  deserializeResponse: deserializeResponse$43,
  serializeRequest: serializeRequest$43,
  deserializeRequest: deserializeRequest$43
};
function getRequestUrlParams$43(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$43(jsonResponse) {
  return jsonResponse.map(function(item) {
    return {
      associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),
      mint: SolAddress.create(item.mint),
      name: item.name,
      symbol: item.symbol
    };
  });
}
function serializeRequest$43(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$43(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getPortfolioOperation = {
  method: "GET",
  name: "getPortfolio",
  id: "getPortfolio",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/portfolio",
  getRequestUrlParams: getRequestUrlParams$33,
  deserializeResponse: deserializeResponse$33,
  serializeRequest: serializeRequest$33,
  deserializeRequest: deserializeRequest$33
};
function getRequestUrlParams$33(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$33(jsonResponse) {
  return {
    nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, "lamports"),
    nfts: jsonResponse.nfts.map(function(nft) {
      return {
        associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),
        mint: SolAddress.create(nft.mint),
        name: nft.name,
        symbol: nft.symbol
      };
    }),
    tokens: jsonResponse.tokens.map(function(token) {
      return {
        associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
        mint: SolAddress.create(token.mint),
        amount: SolNative.create(token.amountRaw, "lamports"),
        name: token.name,
        symbol: token.symbol
      };
    })
  };
}
function serializeRequest$33(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$33(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getSPLOperation = {
  method: "GET",
  name: "getSPL",
  id: "getSPL",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/tokens",
  getRequestUrlParams: getRequestUrlParams$23,
  deserializeResponse: deserializeResponse$23,
  serializeRequest: serializeRequest$23,
  deserializeRequest: deserializeRequest$23
};
function getRequestUrlParams$23(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$23(jsonResponse) {
  return jsonResponse.map(function(token) {
    return {
      associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
      mint: SolAddress.create(token.mint),
      amount: SolNative.create(token.amountRaw, "lamports"),
      name: token.name,
      symbol: token.symbol
    };
  });
}
function serializeRequest$23(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$23(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation2 = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/nft/{network}/{address}/metadata",
  getRequestUrlParams: getRequestUrlParams$13,
  deserializeResponse: deserializeResponse$13,
  serializeRequest: serializeRequest$13,
  deserializeRequest: deserializeRequest$13
};
function getRequestUrlParams$13(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$13(jsonResponse) {
  return {
    mint: SolAddress.create(jsonResponse.mint),
    standard: jsonResponse.standard,
    name: jsonResponse.name,
    symbol: jsonResponse.symbol,
    metaplex: {
      metadataUri: jsonResponse.metaplex.metadataUri,
      updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),
      sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,
      primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,
      isMutable: jsonResponse.metaplex.isMutable,
      masterEdition: jsonResponse.metaplex.masterEdition
    }
  };
}
function serializeRequest$13(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$13(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getTokenPriceOperation2 = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/token/{network}/{address}/price",
  getRequestUrlParams: getRequestUrlParams3,
  deserializeResponse: deserializeResponse3,
  serializeRequest: serializeRequest3,
  deserializeRequest: deserializeRequest3
};
function getRequestUrlParams3(request, core2) {
  var network = SolNetworkResolver.resolve(request.network, core2);
  if (network !== "mainnet") {
    throw new MoralisApiError({
      message: "Incorrct value for 'network', getTokenPrice is only available on mainnet",
      code: ApiErrorCode.INVALID_PARAMS
    });
  }
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse3(jsonResponse) {
  return SolSPLTokenPrice.fromJSON(jsonResponse);
}
function serializeRequest3(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest3(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var operationsV22 = [
  getBalanceOperation,
  getNFTsOperation,
  getPortfolioOperation,
  getSPLOperation,
  getNFTMetadataOperation2
];
var operationsV2All2 = __spreadArray4(__spreadArray4([], operationsV22, true), [getTokenPriceOperation2], false);

// node_modules/@moralisweb3/common-auth-utils/lib/esm/index.js
var import_dist190 = __toESM(require_dist());
var import_dist191 = __toESM(require_dist2());
var import_dist192 = __toESM(require_dist3());
var __assign5 = function() {
  __assign5 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var verifyChallengeAptosOperation = {
  method: "POST",
  name: "verifyChallengeAptos",
  id: "verifyChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/verify/aptos",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a3,
  getRequestBody: getRequestBody$92,
  serializeRequest: serializeRequest$a3,
  deserializeRequest: deserializeRequest$a3,
  deserializeResponse: deserializeResponse$a3
};
function getRequestUrlParams$a3() {
  return {};
}
function getRequestBody$92(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$a3(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign5(__assign5({}, jsonResponse), { network: AptosNetwork.create(network), address: AptosAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$a3(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$a3(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeAptosOperation = {
  method: "POST",
  name: "requestChallengeAptos",
  id: "requestChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/request/aptos",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout",
    "publicKey"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$93,
  getRequestBody: getRequestBody$82,
  serializeRequest: serializeRequest$93,
  deserializeRequest: deserializeRequest$93,
  deserializeResponse: deserializeResponse$93
};
function getRequestUrlParams$93() {
  return {};
}
function getRequestBody$82(request) {
  return {
    domain: request.domain,
    network: AptosNetwork.create(request.network).toString(),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$93(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$93(request, core2) {
  return {
    domain: request.domain,
    network: AptosNetworkResolver.resolve(request.network, core2),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$93(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: AptosNetwork.create(jsonRequest.network),
    address: AptosAddress.create(jsonRequest.address),
    publicKey: jsonRequest.publicKey,
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var verifyChallengeEvmOperation = {
  method: "POST",
  name: "verifyChallengeEvm",
  id: "verifyChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/verify/evm",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$83,
  getRequestBody: getRequestBody$72,
  serializeRequest: serializeRequest$83,
  deserializeRequest: deserializeRequest$83,
  deserializeResponse: deserializeResponse$83
};
function getRequestUrlParams$83() {
  return {};
}
function getRequestBody$72(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$83(_a2) {
  var chainId = _a2.chainId, jsonResponse = __rest3(_a2, ["chainId"]);
  return __assign5(__assign5({}, jsonResponse), { chain: EvmChain.create(chainId), address: EvmAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$83(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$83(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeEvmOperation = {
  method: "POST",
  name: "requestChallengeEvm",
  id: "requestChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/request/evm",
  bodyParamNames: [
    "domain",
    "chainId",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$73,
  getRequestBody: getRequestBody$62,
  serializeRequest: serializeRequest$73,
  deserializeRequest: deserializeRequest$73,
  deserializeResponse: deserializeResponse$73
};
function getRequestUrlParams$73() {
  return {};
}
function getRequestBody$62(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).hex,
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$73(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$73(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).decimal.toString(),
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$73(jsonRequest, core2) {
  return {
    domain: jsonRequest.domain,
    chainId: EvmChainResolver.resolve(jsonRequest.chainId, core2),
    address: EvmAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var getAddressesOperation = {
  method: "GET",
  name: "getAddresses",
  id: "getAddresses",
  groupName: "evm",
  urlPathPattern: "/profile/{profileId}/addresses",
  urlPathParamNames: ["profileId"],
  getRequestUrlParams: getRequestUrlParams$63,
  serializeRequest: serializeRequest$63,
  deserializeRequest: deserializeRequest$63,
  deserializeResponse: deserializeResponse$63
};
function getRequestUrlParams$63(request) {
  return {
    profileId: request.profileId
  };
}
function deserializeResponse$63(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$63(request) {
  return request;
}
function deserializeRequest$63(jsonRequest) {
  return jsonRequest;
}
var removeBindOperation = {
  method: "POST",
  name: "removeBind",
  id: "removeBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove",
  bodyParamNames: ["blockchainType", "address", "profileId", "publicKey"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$54,
  getRequestBody: getRequestBody$52,
  serializeRequest: serializeRequest$54,
  deserializeRequest: deserializeRequest$54,
  deserializeResponse: deserializeResponse$54
};
function getRequestUrlParams$54() {
  return {};
}
function getRequestBody$52(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeResponse$54(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$54(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeRequest$54(jsonRequest) {
  return {
    blockchainType: jsonRequest.blockchainType,
    address: EvmAddress.create(jsonRequest.address),
    profileId: jsonRequest.profileId,
    publicKey: jsonRequest.publicKey
  };
}
var requestBindOperation = {
  method: "POST",
  name: "requestBind",
  id: "requestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request",
  bodyParamNames: ["addresses"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$44,
  getRequestBody: getRequestBody$42,
  serializeRequest: serializeRequest$44,
  deserializeRequest: deserializeRequest$44,
  deserializeResponse: deserializeResponse$44
};
function getRequestUrlParams$44() {
  return {};
}
function getRequestBody$42(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeResponse$44(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$44(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeRequest$44(jsonRequest) {
  return {
    addresses: jsonRequest.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address)
      };
    })
  };
}
var verifyRemoveBindOperation = {
  method: "POST",
  name: "verifyRemoveBind",
  id: "verifyRemoveBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove/verify",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$34,
  getRequestBody: getRequestBody$33,
  serializeRequest: serializeRequest$34,
  deserializeRequest: deserializeRequest$34,
  deserializeResponse: deserializeResponse$34
};
function getRequestUrlParams$34() {
  return {};
}
function getRequestBody$33(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$34(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$34(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$34(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var verifyRequestBindOperation = {
  method: "POST",
  name: "verifyRequestBind",
  id: "verifyRequestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request/verify",
  bodyParamNames: ["verifications"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$24,
  getRequestBody: getRequestBody$23,
  serializeRequest: serializeRequest$24,
  deserializeRequest: deserializeRequest$24,
  deserializeResponse: deserializeResponse$24
};
function getRequestUrlParams$24() {
  return {};
}
function getRequestBody$23(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeResponse$24(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$24(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeRequest$24(jsonRequest) {
  return {
    verifications: jsonRequest.verifications
  };
}
var verifyChallengeSolanaOperation = {
  method: "POST",
  name: "verifyChallengeSolana",
  id: "verifyChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/verify/solana",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$14,
  getRequestBody: getRequestBody$13,
  serializeRequest: serializeRequest$14,
  deserializeRequest: deserializeRequest$14,
  deserializeResponse: deserializeResponse$14
};
function getRequestUrlParams$14() {
  return {};
}
function getRequestBody$13(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$14(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign5(__assign5({}, jsonResponse), { solNetwork: SolNetwork.create(network), address: SolAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$14(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$14(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeSolanaOperation = {
  method: "POST",
  name: "requestChallengeSolana",
  id: "requestChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/request/solana",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams4,
  getRequestBody: getRequestBody3,
  serializeRequest: serializeRequest4,
  deserializeRequest: deserializeRequest4,
  deserializeResponse: deserializeResponse4
};
function getRequestUrlParams4() {
  return {};
}
function getRequestBody3(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse4(jsonResponse) {
  return jsonResponse;
}
function serializeRequest4(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest4(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}

// node_modules/@moralisweb3/auth/lib/esm/index.js
var extendStatics7 = function(d, b) {
  extendStatics7 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics7(d, b);
};
function __extends7(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics7(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign6 = function() {
  __assign6 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
function __rest4(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var AuthNetworkType;
(function(AuthNetworkType2) {
  AuthNetworkType2["EVM"] = "evm";
  AuthNetworkType2["SOLANA"] = "solana";
  AuthNetworkType2["APTOS"] = "aptos";
})(AuthNetworkType || (AuthNetworkType = {}));
var makeEvmRequestMessage = function(core2, _a2) {
  var chain = _a2.chain, address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["chain", "address", "networkType"]);
  return new OperationResolver(requestChallengeEvmOperation, BASE_URL2, core2).fetch(__assign6({ chainId: EvmChain.create(chain).hex, address: EvmAddress.create(address).checksum }, options));
};
var makeSolRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var solNetwork = _a2.solNetwork, options = __rest4(_a2, ["address", "networkType", "solNetwork"]);
  if (!options.network && solNetwork) {
    options.network = solNetwork;
  }
  return new OperationResolver(requestChallengeSolanaOperation, BASE_URL2, core2).fetch(__assign6({ address: SolAddress.create(address).toString() }, options));
};
var makeAptosRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["address", "networkType"]);
  return new OperationResolver(requestChallengeAptosOperation, BASE_URL2, core2).fetch(__assign6({ address: AptosAddress.create(address).toString() }, options));
};
var makeRequestMessage = function(core2) {
  return function(options) {
    return __awaiter3(void 0, void 0, void 0, function() {
      return __generator3(this, function(_a2) {
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmRequestMessage(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolRequestMessage(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosRequestMessage(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmRequestMessage(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect networkType provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var makeEvmVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeEvmOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeSolVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeSolanaOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeAptosVerify = function(core2, _a2) {
  _a2.networkType;
  var options = __rest4(_a2, ["networkType"]);
  return new OperationResolver(verifyChallengeAptosOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeVerify = function(core2) {
  return function(options) {
    return __awaiter3(void 0, void 0, void 0, function() {
      return __generator3(this, function(_a2) {
        if (!options.networkType && options.network) {
          options.networkType = options.network;
        }
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmVerify(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolVerify(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosVerify(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmVerify(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect network provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var BASE_URL2 = "https://authapi.moralis.io";
var Auth = (
  /** @class */
  function(_super) {
    __extends7(Auth2, _super);
    function Auth2(core2) {
      var _this = _super.call(this, Auth2.moduleName, core2, function() {
        return BASE_URL2;
      }) || this;
      _this.evm = {
        getAddresses: function(request) {
          return new OperationResolver(getAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        removeBind: function(request) {
          return new OperationResolver(removeBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestBind: function(request) {
          return new OperationResolver(requestBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestChallengeEvm: function(request) {
          return new OperationResolver(requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRemoveBind: function(request) {
          return new OperationResolver(verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRequestBind: function(request) {
          return new OperationResolver(verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.solana = {
        requestChallengeSol: function(request) {
          return new OperationResolver(requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.requestMessage = function(options) {
        return makeRequestMessage(_this.core)(options);
      };
      return _this;
    }
    Auth2.create = function(core2) {
      return new Auth2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Auth2.prototype.setup = function() {
    };
    Auth2.prototype.start = function() {
    };
    Auth2.prototype.verify = function(options) {
      return makeVerify(this.core)(options);
    };
    Auth2.moduleName = "auth";
    return Auth2;
  }(ApiModule)
);

// node_modules/@moralisweb3/evm-api/lib/esm/index.js
var import_dist196 = __toESM(require_dist());
var import_dist197 = __toESM(require_dist2());
var import_dist198 = __toESM(require_dist3());
var extendStatics8 = function(d, b) {
  extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics8(d, b);
};
function __extends8(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics8(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var EvmApiConfig = {
  evmApiBaseUrl: {
    name: "evmApiBaseUrl",
    defaultValue: "https://deep-index.moralis.io/api/v2.2"
  }
};
var EvmApiConfigSetup = (
  /** @class */
  function() {
    function EvmApiConfigSetup2() {
    }
    EvmApiConfigSetup2.register = function(config) {
      config.registerKey(EvmApiConfig.evmApiBaseUrl);
    };
    return EvmApiConfigSetup2;
  }()
);
var ClientEvmApi = (
  /** @class */
  function(_super) {
    __extends8(ClientEvmApi2, _super);
    function ClientEvmApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.block = {
        getBlock: function(request) {
          return new NullableOperationResolver(getBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getDateToBlock: function(request) {
          return new OperationResolver(getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getBlockStats: function(request) {
          return new OperationV3Resolver(GetBlockStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.events = {
        getContractEvents: function(request) {
          return new PaginatedOperationResolver(getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getContractLogs: function(request) {
          return new PaginatedOperationResolver(getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getContractNFTs: function(request) {
          return new PaginatedOperationResolver(getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleNFTs: function(request) {
          return new OperationResolver(getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractMetadata: function(request) {
          return new NullableOperationResolver(getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTLowestPrice: function(request) {
          return new NullableOperationResolver(getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTMetadata: function(request) {
          return new NullableOperationResolver(getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTOwners: function(request) {
          return new PaginatedOperationResolver(getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTokenIdOwners: function(request) {
          return new PaginatedOperationResolver(getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersByBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersFromToBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTCollections: function(request) {
          return new PaginatedOperationResolver(getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTs: function(request) {
          return new PaginatedOperationResolver(getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        reSyncMetadata: function(request) {
          return new OperationResolver(reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        syncNFTContract: function(request) {
          return new OperationResolver(syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTrades: function(request) {
          return new PaginatedOperationV3Resolver(GetNFTTradesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTTradesByToken: function(request) {
          return new PaginatedOperationV3Resolver(GetNFTTradesByTokenOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTContractSalePrices: function(request) {
          return new OperationV3Resolver(GetNFTContractSalePricesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTSalePrices: function(request) {
          return new OperationV3Resolver(GetNFTSalePricesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTCollectionStats: function(request) {
          return new OperationV3Resolver(GetNFTCollectionStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTTokenStats: function(request) {
          return new OperationV3Resolver(GetNFTTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.transaction = {
        getInternalTransactions: function(request) {
          return new OperationResolver(getInternalTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransaction: function(request) {
          return new NullableOperationResolver(getTransactionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransactionVerbose: function(request) {
          return new NullableOperationResolver(getTransactionVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactions: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactionsVerbose: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.balance = {
        getNativeBalance: function(request) {
          return new OperationResolver(getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNativeBalancesForAddresses: function(request) {
          return new OperationResolver(getNativeBalancesForAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.defi = {
        getPairAddress: function(request) {
          return new OperationResolver(getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairReserves: function(request) {
          return new OperationResolver(getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairPrice: function(request) {
          return new OperationV3Resolver(GetPairPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.token = {
        getTokenAllowance: function(request) {
          return new OperationResolver(getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadataBySymbol: function(request) {
          return new OperationResolver(getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadata: function(request) {
          return new OperationResolver(getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenPrice: function(request) {
          return new OperationResolver(getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenBalances: function(request) {
          return new OperationResolver(getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleTokenPrices: function(request, body) {
          return new OperationV3Resolver(GetMultipleTokenPricesOperation, _this.baseUrl, _this.core).fetch(request, body);
        },
        getTokenOwners: function(request) {
          return new PaginatedOperationV3Resolver(GetTokenOwnersOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTokenStats: function(request) {
          return new OperationV3Resolver(GetTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTopProfitableWalletPerToken: function(request) {
          return new OperationV3Resolver(GetTopProfitableWalletPerTokenOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.resolve = {
        resolveAddress: function(request) {
          return new NullableOperationResolver(resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveDomain: function(request) {
          return new NullableOperationResolver(resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveENSDomain: function(request) {
          return new NullableOperationResolver(resolveENSDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveAddressToDomain: function(request) {
          return new OperationV3Resolver(ResolveAddressToDomainOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.utils = {
        runContractFunction: function(request) {
          return new OperationResolver(runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        web3ApiVersion: function() {
          return new OperationV3Resolver(Web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        endpointWeights: function() {
          return new OperationV3Resolver(EndpointWeightsOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        reviewContracts: function(request, body) {
          return new OperationV3Resolver(ReviewContractsOperation, _this.baseUrl, _this.core).fetch(request, body);
        }
      };
      _this.ipfs = {
        uploadFolder: function(request) {
          return new OperationResolver(uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.wallets = {
        getWalletHistory: function(request) {
          return new PaginatedOperationV3Resolver(GetWalletHistoryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletTokenBalancesPrice: function(request) {
          return new PaginatedOperationV3Resolver(GetWalletTokenBalancesPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletNetWorth: function(request) {
          return new OperationV3Resolver(GetWalletNetWorthOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiSummary: function(request) {
          return new OperationV3Resolver(GetDefiSummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiPositionsByProtocol: function(request) {
          return new OperationV3Resolver(GetDefiPositionsByProtocolOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiPositionsSummary: function(request) {
          return new OperationV3Resolver(GetDefiPositionsSummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletActiveChains: function(request) {
          return new OperationV3Resolver(GetWalletActiveChainsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletStats: function(request) {
          return new OperationV3Resolver(GetWalletStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletProfitabilitySummary: function(request) {
          return new OperationV3Resolver(GetWalletProfitabilitySummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletProfitability: function(request) {
          return new OperationV3Resolver(GetWalletProfitabilityOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.marketData = {
        getTopERC20TokensByMarketCap: function() {
          return new OperationV3Resolver(GetTopERC20TokensByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopERC20TokensByPriceMovers: function() {
          return new OperationV3Resolver(GetTopERC20TokensByPriceMoversOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopNFTCollectionsByMarketCap: function() {
          return new OperationV3Resolver(GetTopNFTCollectionsByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getHottestNFTCollectionsByTradingVolume: function() {
          return new OperationV3Resolver(GetHottestNFTCollectionsByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByMarketCap: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByTradingVolume: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        }
      };
      return _this;
    }
    return ClientEvmApi2;
  }(ApiModule)
);
var EvmApi = (
  /** @class */
  function(_super) {
    __extends8(EvmApi2, _super);
    function EvmApi2(core2) {
      return _super.call(this, EvmApi2.moduleName, core2, function() {
        return core2.config.get(EvmApiConfig.evmApiBaseUrl);
      }) || this;
    }
    EvmApi2.create = function(core2) {
      return new EvmApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    EvmApi2.prototype.setup = function() {
      EvmApiConfigSetup.register(this.core.config);
    };
    EvmApi2.prototype.start = function() {
    };
    EvmApi2.moduleName = "evmApi";
    return EvmApi2;
  }(ClientEvmApi)
);

// node_modules/@moralisweb3/aptos-api/lib/esm/index.js
var import_dist199 = __toESM(require_dist());
var import_dist200 = __toESM(require_dist2());
var import_dist201 = __toESM(require_dist3());
var extendStatics9 = function(d, b) {
  extendStatics9 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics9(d, b);
};
function __extends9(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics9(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var MAINNET_BASE_URL = "https://aptos-mainnet.aws-prod-api-1.moralis.io";
var TESTNET_BASE_URL = "https://aptos-testnet.aws-prod-api-1.moralis.io";
var AptosApi = (
  /** @class */
  function(_super) {
    __extends9(AptosApi2, _super);
    function AptosApi2(core2) {
      var _this = _super.call(this) || this;
      _this.core = core2;
      return _this;
    }
    AptosApi2.create = function(core2) {
      if (!core2) {
        core2 = CoreProvider.getDefault();
      }
      return new AptosApi2(core2);
    };
    AptosApi2.prototype.createEndpoint = function(operation) {
      var _this = this;
      return function(request) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, null);
      };
    };
    AptosApi2.prototype.createEndpointWithBody = function(operation) {
      var _this = this;
      return function(request, body) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, body);
      };
    };
    AptosApi2.moduleName = "aptApi";
    return AptosApi2;
  }(AbstractClient)
);
function createBaseUrlResolver(core2) {
  return function(request) {
    var network = request.network;
    if (network) {
      var finalNetwork = AptosNetworkResolver.resolve(network, core2);
      switch (finalNetwork) {
        case "mainnet":
          return MAINNET_BASE_URL;
        case "testnet":
          return TESTNET_BASE_URL;
        default:
          throw new Error("Not supported network");
      }
    }
    return MAINNET_BASE_URL;
  };
}

// node_modules/@moralisweb3/sol-api/lib/esm/index.js
var import_dist202 = __toESM(require_dist());
var import_dist203 = __toESM(require_dist2());
var import_dist204 = __toESM(require_dist3());
var extendStatics10 = function(d, b) {
  extendStatics10 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics10(d, b);
};
function __extends10(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics10(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var ClientSolApi = (
  /** @class */
  function(_super) {
    __extends10(ClientSolApi2, _super);
    function ClientSolApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.account = {
        getBalance: function(request) {
          return new OperationResolver(getBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTs: function(request) {
          return new OperationResolver(getNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPortfolio: function(request) {
          return new OperationResolver(getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getSPL: function(request) {
          return new OperationResolver(getSPLOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getNFTMetadata: function(request) {
          return new OperationResolver(getNFTMetadataOperation2, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.token = {
        getTokenPrice: function(request) {
          return new OperationV3Resolver(GetTokenPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTokenMetadata: function(request) {
          return new OperationV3Resolver(GetTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      return _this;
    }
    return ClientSolApi2;
  }(ApiModule)
);
var SolApiConfig = {
  solApiBaseUrl: {
    name: "solApiBaseUrl",
    defaultValue: "https://solana-gateway.moralis.io"
  }
};
var EvmSolApiConfigSetup = (
  /** @class */
  function() {
    function EvmSolApiConfigSetup2() {
    }
    EvmSolApiConfigSetup2.register = function(config) {
      config.registerKey(SolApiConfig.solApiBaseUrl);
    };
    return EvmSolApiConfigSetup2;
  }()
);
var SolApi = (
  /** @class */
  function(_super) {
    __extends10(SolApi2, _super);
    function SolApi2(core2) {
      return _super.call(this, SolApi2.moduleName, core2, function() {
        return core2.config.get(SolApiConfig.solApiBaseUrl);
      }) || this;
    }
    SolApi2.create = function(core2) {
      return new SolApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    SolApi2.prototype.setup = function() {
      EvmSolApiConfigSetup.register(this.core.config);
    };
    SolApi2.prototype.start = function() {
    };
    SolApi2.moduleName = "solApi";
    return SolApi2;
  }(ClientSolApi)
);

// node_modules/moralis/lib/esm/index.js
var core = Core.create();
var commonEvmUtils = CommonEvmUtils.create(core);
var commonSolUtils = CommonSolUtils.create(core);
var apiUtils = ApiUtils.create(core);
var auth = Auth.create(core);
var streams = Streams.create(core);
var evmApi = EvmApi.create(core);
var solApi = SolApi.create(core);
var aptosApi = AptosApi.create(core);
core.registerModules([commonEvmUtils, commonSolUtils, auth, apiUtils, evmApi, solApi, streams]);
CoreProvider.setDefault(core);
var Moralis = {
  Core: core,
  Auth: auth,
  Streams: streams,
  EvmApi: evmApi,
  SolApi: solApi,
  AptosApi: aptosApi,
  EvmUtils: commonEvmUtils,
  SolUtils: commonSolUtils,
  start: function(config) {
    return core.start(config);
  }
};
export {
  Moralis as default
};
/*! Bundled license information:

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

@moralisweb3/common-aptos-utils/lib/esm/index.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=moralis.js.map
